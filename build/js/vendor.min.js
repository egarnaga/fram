!function(r){var s={};function i(e){var n;return(s[e]||(n=s[e]={i:e,l:!1,exports:{}},r[e].call(n.exports,n,n.exports,i),n.l=!0,n)).exports}i.m=r,i.c=s,i.d=function(e,n,r){i.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(n,e){if(1&e&&(n=i(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var s in n)i.d(r,s,function(e){return n[e]}.bind(null,s));return r},i.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(n,"a",n),n},i.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},i.p="",i(i.s="./js/vendor.js")}({"../node_modules/webpack/buildin/amd-options.js":function(module,exports){eval("/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */\nmodule.exports = __webpack_amd_options__;\n\n/* WEBPACK VAR INJECTION */}.call(this, {}))\n\n//# sourceURL=webpack:///../node_modules/webpack/buildin/amd-options.js?")},"../node_modules/webpack/buildin/harmony-module.js":function(module,exports){eval('module.exports = function(originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, "loaded", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, "id", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, "exports", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n\n\n//# sourceURL=webpack:///../node_modules/webpack/buildin/harmony-module.js?')},"./js/vendor.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _vendor_swiper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vendor/swiper */ "./js/vendor/swiper.js");\n/* harmony import */ var _vendor_nouislider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vendor/nouislider */ "./js/vendor/nouislider.js");\n\n\n\n//# sourceURL=webpack:///./js/vendor.js?')},"./js/vendor/nouislider.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\nvar _this = undefined;\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nvar nouislider = function nouislider() {\n  (function (global, factory) {\n    (typeof exports === "undefined" ? "undefined" : _typeof(exports)) === \'object\' && typeof module !== \'undefined\' ? factory(exports) : typeof define === \'function\' && __webpack_require__(/*! !webpack amd options */ "../node_modules/webpack/buildin/amd-options.js") ? define([\'exports\'], factory) : (global = typeof globalThis !== \'undefined\' ? globalThis : global || self, factory(global.noUiSlider = {}));\n  })(_this, function (exports) {\n    \'use strict\';\n\n    exports.PipsMode = void 0;\n    (function (PipsMode) {\n      PipsMode["Range"] = "range";\n      PipsMode["Steps"] = "steps";\n      PipsMode["Positions"] = "positions";\n      PipsMode["Count"] = "count";\n      PipsMode["Values"] = "values";\n    })(exports.PipsMode || (exports.PipsMode = {}));\n    exports.PipsType = void 0;\n    (function (PipsType) {\n      PipsType[PipsType["None"] = -1] = "None";\n      PipsType[PipsType["NoValue"] = 0] = "NoValue";\n      PipsType[PipsType["LargeValue"] = 1] = "LargeValue";\n      PipsType[PipsType["SmallValue"] = 2] = "SmallValue";\n    })(exports.PipsType || (exports.PipsType = {}));\n    //region Helper Methods\n    function isValidFormatter(entry) {\n      return isValidPartialFormatter(entry) && typeof entry.from === "function";\n    }\n    function isValidPartialFormatter(entry) {\n      // partial formatters only need a to function and not a from function\n      return _typeof(entry) === "object" && typeof entry.to === "function";\n    }\n    function removeElement(el) {\n      el.parentElement.removeChild(el);\n    }\n    function isSet(value) {\n      return value !== null && value !== undefined;\n    }\n    // Bindable version\n    function preventDefault(e) {\n      e.preventDefault();\n    }\n    // Removes duplicates from an array.\n    function unique(array) {\n      return array.filter(function (a) {\n        return !this[a] ? this[a] = true : false;\n      }, {});\n    }\n    // Round a value to the closest \'to\'.\n    function closest(value, to) {\n      return Math.round(value / to) * to;\n    }\n    // Current position of an element relative to the document.\n    function offset(elem, orientation) {\n      var rect = elem.getBoundingClientRect();\n      var doc = elem.ownerDocument;\n      var docElem = doc.documentElement;\n      var pageOffset = getPageOffset(doc);\n      // getBoundingClientRect contains left scroll in Chrome on Android.\n      // I haven\'t found a feature detection that proves this. Worst case\n      // scenario on mis-match: the \'tap\' feature on horizontal sliders breaks.\n      if (/webkit.*Chrome.*Mobile/i.test(navigator.userAgent)) {\n        pageOffset.x = 0;\n      }\n      return orientation ? rect.top + pageOffset.y - docElem.clientTop : rect.left + pageOffset.x - docElem.clientLeft;\n    }\n    // Checks whether a value is numerical.\n    function isNumeric(a) {\n      return typeof a === "number" && !isNaN(a) && isFinite(a);\n    }\n    // Sets a class and removes it after [duration] ms.\n    function addClassFor(element, className, duration) {\n      if (duration > 0) {\n        addClass(element, className);\n        setTimeout(function () {\n          removeClass(element, className);\n        }, duration);\n      }\n    }\n    // Limits a value to 0 - 100\n    function limit(a) {\n      return Math.max(Math.min(a, 100), 0);\n    }\n    // Wraps a variable as an array, if it isn\'t one yet.\n    // Note that an input array is returned by reference!\n    function asArray(a) {\n      return Array.isArray(a) ? a : [a];\n    }\n    // Counts decimals\n    function countDecimals(numStr) {\n      numStr = String(numStr);\n      var pieces = numStr.split(".");\n      return pieces.length > 1 ? pieces[1].length : 0;\n    }\n    // http://youmightnotneedjquery.com/#add_class\n    function addClass(el, className) {\n      if (el.classList && !/\\s/.test(className)) {\n        el.classList.add(className);\n      } else {\n        el.className += " " + className;\n      }\n    }\n    // http://youmightnotneedjquery.com/#remove_class\n    function removeClass(el, className) {\n      if (el.classList && !/\\s/.test(className)) {\n        el.classList.remove(className);\n      } else {\n        el.className = el.className.replace(new RegExp("(^|\\\\b)" + className.split(" ").join("|") + "(\\\\b|$)", "gi"), " ");\n      }\n    }\n    // https://plainjs.com/javascript/attributes/adding-removing-and-testing-for-classes-9/\n    function hasClass(el, className) {\n      return el.classList ? el.classList.contains(className) : new RegExp("\\\\b" + className + "\\\\b").test(el.className);\n    }\n    // https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollY#Notes\n    function getPageOffset(doc) {\n      var supportPageOffset = window.pageXOffset !== undefined;\n      var isCSS1Compat = (doc.compatMode || "") === "CSS1Compat";\n      var x = supportPageOffset ? window.pageXOffset : isCSS1Compat ? doc.documentElement.scrollLeft : doc.body.scrollLeft;\n      var y = supportPageOffset ? window.pageYOffset : isCSS1Compat ? doc.documentElement.scrollTop : doc.body.scrollTop;\n      return {\n        x: x,\n        y: y\n      };\n    }\n    // we provide a function to compute constants instead\n    // of accessing window.* as soon as the module needs it\n    // so that we do not compute anything if not needed\n    function getActions() {\n      // Determine the events to bind. IE11 implements pointerEvents without\n      // a prefix, which breaks compatibility with the IE10 implementation.\n      return window.navigator.pointerEnabled ? {\n        start: "pointerdown",\n        move: "pointermove",\n        end: "pointerup"\n      } : window.navigator.msPointerEnabled ? {\n        start: "MSPointerDown",\n        move: "MSPointerMove",\n        end: "MSPointerUp"\n      } : {\n        start: "mousedown touchstart",\n        move: "mousemove touchmove",\n        end: "mouseup touchend"\n      };\n    }\n    // https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n    // Issue #785\n    function getSupportsPassive() {\n      var supportsPassive = false;\n      /* eslint-disable */\n      try {\n        var opts = Object.defineProperty({}, "passive", {\n          get: function get() {\n            supportsPassive = true;\n          }\n        });\n        // @ts-ignore\n        window.addEventListener("test", null, opts);\n      } catch (e) {}\n      /* eslint-enable */\n      return supportsPassive;\n    }\n    function getSupportsTouchActionNone() {\n      return window.CSS && CSS.supports && CSS.supports("touch-action", "none");\n    }\n    //endregion\n    //region Range Calculation\n    // Determine the size of a sub-range in relation to a full range.\n    function subRangeRatio(pa, pb) {\n      return 100 / (pb - pa);\n    }\n    // (percentage) How many percent is this value of this range?\n    function fromPercentage(range, value, startRange) {\n      return value * 100 / (range[startRange + 1] - range[startRange]);\n    }\n    // (percentage) Where is this value on this range?\n    function toPercentage(range, value) {\n      return fromPercentage(range, range[0] < 0 ? value + Math.abs(range[0]) : value - range[0], 0);\n    }\n    // (value) How much is this percentage on this range?\n    function isPercentage(range, value) {\n      return value * (range[1] - range[0]) / 100 + range[0];\n    }\n    function getJ(value, arr) {\n      var j = 1;\n      while (value >= arr[j]) {\n        j += 1;\n      }\n      return j;\n    }\n    // (percentage) Input a value, find where, on a scale of 0-100, it applies.\n    function toStepping(xVal, xPct, value) {\n      if (value >= xVal.slice(-1)[0]) {\n        return 100;\n      }\n      var j = getJ(value, xVal);\n      var va = xVal[j - 1];\n      var vb = xVal[j];\n      var pa = xPct[j - 1];\n      var pb = xPct[j];\n      return pa + toPercentage([va, vb], value) / subRangeRatio(pa, pb);\n    }\n    // (value) Input a percentage, find where it is on the specified range.\n    function fromStepping(xVal, xPct, value) {\n      // There is no range group that fits 100\n      if (value >= 100) {\n        return xVal.slice(-1)[0];\n      }\n      var j = getJ(value, xPct);\n      var va = xVal[j - 1];\n      var vb = xVal[j];\n      var pa = xPct[j - 1];\n      var pb = xPct[j];\n      return isPercentage([va, vb], (value - pa) * subRangeRatio(pa, pb));\n    }\n    // (percentage) Get the step that applies at a certain value.\n    function getStep(xPct, xSteps, snap, value) {\n      if (value === 100) {\n        return value;\n      }\n      var j = getJ(value, xPct);\n      var a = xPct[j - 1];\n      var b = xPct[j];\n      // If \'snap\' is set, steps are used as fixed points on the slider.\n      if (snap) {\n        // Find the closest position, a or b.\n        if (value - a > (b - a) / 2) {\n          return b;\n        }\n        return a;\n      }\n      if (!xSteps[j - 1]) {\n        return value;\n      }\n      return xPct[j - 1] + closest(value - xPct[j - 1], xSteps[j - 1]);\n    }\n    //endregion\n    //region Spectrum\n    var Spectrum = /** @class */function () {\n      function Spectrum(entry, snap, singleStep) {\n        this.xPct = [];\n        this.xVal = [];\n        this.xSteps = [];\n        this.xNumSteps = [];\n        this.xHighestCompleteStep = [];\n        this.xSteps = [singleStep || false];\n        this.xNumSteps = [false];\n        this.snap = snap;\n        var index;\n        var ordered = [];\n        // Map the object keys to an array.\n        Object.keys(entry).forEach(function (index) {\n          ordered.push([asArray(entry[index]), index]);\n        });\n        // Sort all entries by value (numeric sort).\n        ordered.sort(function (a, b) {\n          return a[0][0] - b[0][0];\n        });\n        // Convert all entries to subranges.\n        for (index = 0; index < ordered.length; index++) {\n          this.handleEntryPoint(ordered[index][1], ordered[index][0]);\n        }\n        // Store the actual step values.\n        // xSteps is sorted in the same order as xPct and xVal.\n        this.xNumSteps = this.xSteps.slice(0);\n        // Convert all numeric steps to the percentage of the subrange they represent.\n        for (index = 0; index < this.xNumSteps.length; index++) {\n          this.handleStepPoint(index, this.xNumSteps[index]);\n        }\n      }\n      Spectrum.prototype.getDistance = function (value) {\n        var distances = [];\n        for (var index = 0; index < this.xNumSteps.length - 1; index++) {\n          distances[index] = fromPercentage(this.xVal, value, index);\n        }\n        return distances;\n      };\n      // Calculate the percentual distance over the whole scale of ranges.\n      // direction: 0 = backwards / 1 = forwards\n      Spectrum.prototype.getAbsoluteDistance = function (value, distances, direction) {\n        var xPct_index = 0;\n        // Calculate range where to start calculation\n        if (value < this.xPct[this.xPct.length - 1]) {\n          while (value > this.xPct[xPct_index + 1]) {\n            xPct_index++;\n          }\n        } else if (value === this.xPct[this.xPct.length - 1]) {\n          xPct_index = this.xPct.length - 2;\n        }\n        // If looking backwards and the value is exactly at a range separator then look one range further\n        if (!direction && value === this.xPct[xPct_index + 1]) {\n          xPct_index++;\n        }\n        if (distances === null) {\n          distances = [];\n        }\n        var start_factor;\n        var rest_factor = 1;\n        var rest_rel_distance = distances[xPct_index];\n        var range_pct = 0;\n        var rel_range_distance = 0;\n        var abs_distance_counter = 0;\n        var range_counter = 0;\n        // Calculate what part of the start range the value is\n        if (direction) {\n          start_factor = (value - this.xPct[xPct_index]) / (this.xPct[xPct_index + 1] - this.xPct[xPct_index]);\n        } else {\n          start_factor = (this.xPct[xPct_index + 1] - value) / (this.xPct[xPct_index + 1] - this.xPct[xPct_index]);\n        }\n        // Do until the complete distance across ranges is calculated\n        while (rest_rel_distance > 0) {\n          // Calculate the percentage of total range\n          range_pct = this.xPct[xPct_index + 1 + range_counter] - this.xPct[xPct_index + range_counter];\n          // Detect if the margin, padding or limit is larger then the current range and calculate\n          if (distances[xPct_index + range_counter] * rest_factor + 100 - start_factor * 100 > 100) {\n            // If larger then take the percentual distance of the whole range\n            rel_range_distance = range_pct * start_factor;\n            // Rest factor of relative percentual distance still to be calculated\n            rest_factor = (rest_rel_distance - 100 * start_factor) / distances[xPct_index + range_counter];\n            // Set start factor to 1 as for next range it does not apply.\n            start_factor = 1;\n          } else {\n            // If smaller or equal then take the percentual distance of the calculate percentual part of that range\n            rel_range_distance = distances[xPct_index + range_counter] * range_pct / 100 * rest_factor;\n            // No rest left as the rest fits in current range\n            rest_factor = 0;\n          }\n          if (direction) {\n            abs_distance_counter = abs_distance_counter - rel_range_distance;\n            // Limit range to first range when distance becomes outside of minimum range\n            if (this.xPct.length + range_counter >= 1) {\n              range_counter--;\n            }\n          } else {\n            abs_distance_counter = abs_distance_counter + rel_range_distance;\n            // Limit range to last range when distance becomes outside of maximum range\n            if (this.xPct.length - range_counter >= 1) {\n              range_counter++;\n            }\n          }\n          // Rest of relative percentual distance still to be calculated\n          rest_rel_distance = distances[xPct_index + range_counter] * rest_factor;\n        }\n        return value + abs_distance_counter;\n      };\n      Spectrum.prototype.toStepping = function (value) {\n        value = toStepping(this.xVal, this.xPct, value);\n        return value;\n      };\n      Spectrum.prototype.fromStepping = function (value) {\n        return fromStepping(this.xVal, this.xPct, value);\n      };\n      Spectrum.prototype.getStep = function (value) {\n        value = getStep(this.xPct, this.xSteps, this.snap, value);\n        return value;\n      };\n      Spectrum.prototype.getDefaultStep = function (value, isDown, size) {\n        var j = getJ(value, this.xPct);\n        // When at the top or stepping down, look at the previous sub-range\n        if (value === 100 || isDown && value === this.xPct[j - 1]) {\n          j = Math.max(j - 1, 1);\n        }\n        return (this.xVal[j] - this.xVal[j - 1]) / size;\n      };\n      Spectrum.prototype.getNearbySteps = function (value) {\n        var j = getJ(value, this.xPct);\n        return {\n          stepBefore: {\n            startValue: this.xVal[j - 2],\n            step: this.xNumSteps[j - 2],\n            highestStep: this.xHighestCompleteStep[j - 2]\n          },\n          thisStep: {\n            startValue: this.xVal[j - 1],\n            step: this.xNumSteps[j - 1],\n            highestStep: this.xHighestCompleteStep[j - 1]\n          },\n          stepAfter: {\n            startValue: this.xVal[j],\n            step: this.xNumSteps[j],\n            highestStep: this.xHighestCompleteStep[j]\n          }\n        };\n      };\n      Spectrum.prototype.countStepDecimals = function () {\n        var stepDecimals = this.xNumSteps.map(countDecimals);\n        return Math.max.apply(null, stepDecimals);\n      };\n      Spectrum.prototype.hasNoSize = function () {\n        return this.xVal[0] === this.xVal[this.xVal.length - 1];\n      };\n      // Outside testing\n      Spectrum.prototype.convert = function (value) {\n        return this.getStep(this.toStepping(value));\n      };\n      Spectrum.prototype.handleEntryPoint = function (index, value) {\n        var percentage;\n        // Covert min/max syntax to 0 and 100.\n        if (index === "min") {\n          percentage = 0;\n        } else if (index === "max") {\n          percentage = 100;\n        } else {\n          percentage = parseFloat(index);\n        }\n        // Check for correct input.\n        if (!isNumeric(percentage) || !isNumeric(value[0])) {\n          throw new Error("noUiSlider: \'range\' value isn\'t numeric.");\n        }\n        // Store values.\n        this.xPct.push(percentage);\n        this.xVal.push(value[0]);\n        var value1 = Number(value[1]);\n        // NaN will evaluate to false too, but to keep\n        // logging clear, set step explicitly. Make sure\n        // not to override the \'step\' setting with false.\n        if (!percentage) {\n          if (!isNaN(value1)) {\n            this.xSteps[0] = value1;\n          }\n        } else {\n          this.xSteps.push(isNaN(value1) ? false : value1);\n        }\n        this.xHighestCompleteStep.push(0);\n      };\n      Spectrum.prototype.handleStepPoint = function (i, n) {\n        // Ignore \'false\' stepping.\n        if (!n) {\n          return;\n        }\n        // Step over zero-length ranges (#948);\n        if (this.xVal[i] === this.xVal[i + 1]) {\n          this.xSteps[i] = this.xHighestCompleteStep[i] = this.xVal[i];\n          return;\n        }\n        // Factor to range ratio\n        this.xSteps[i] = fromPercentage([this.xVal[i], this.xVal[i + 1]], n, 0) / subRangeRatio(this.xPct[i], this.xPct[i + 1]);\n        var totalSteps = (this.xVal[i + 1] - this.xVal[i]) / this.xNumSteps[i];\n        var highestStep = Math.ceil(Number(totalSteps.toFixed(3)) - 1);\n        var step = this.xVal[i] + this.xNumSteps[i] * highestStep;\n        this.xHighestCompleteStep[i] = step;\n      };\n      return Spectrum;\n    }();\n    //endregion\n    //region Options\n    /*\tEvery input option is tested and parsed. This will prevent\n        endless validation in internal methods. These tests are\n        structured with an item for every option available. An\n        option can be marked as required by setting the \'r\' flag.\n        The testing function is provided with three arguments:\n            - The provided value for the option;\n            - A reference to the options object;\n            - The name for the option;\n         The testing function returns false when an error is detected,\n        or true when everything is OK. It can also modify the option\n        object, to make sure all values can be correctly looped elsewhere. */\n    //region Defaults\n    var defaultFormatter = {\n      to: function to(value) {\n        return value === undefined ? "" : value.toFixed(2);\n      },\n      from: Number\n    };\n    var cssClasses = {\n      target: "target",\n      base: "base",\n      origin: "origin",\n      handle: "handle",\n      handleLower: "handle-lower",\n      handleUpper: "handle-upper",\n      touchArea: "touch-area",\n      horizontal: "horizontal",\n      vertical: "vertical",\n      background: "background",\n      connect: "connect",\n      connects: "connects",\n      ltr: "ltr",\n      rtl: "rtl",\n      textDirectionLtr: "txt-dir-ltr",\n      textDirectionRtl: "txt-dir-rtl",\n      draggable: "draggable",\n      drag: "state-drag",\n      tap: "state-tap",\n      active: "active",\n      tooltip: "tooltip",\n      pips: "pips",\n      pipsHorizontal: "pips-horizontal",\n      pipsVertical: "pips-vertical",\n      marker: "marker",\n      markerHorizontal: "marker-horizontal",\n      markerVertical: "marker-vertical",\n      markerNormal: "marker-normal",\n      markerLarge: "marker-large",\n      markerSub: "marker-sub",\n      value: "value",\n      valueHorizontal: "value-horizontal",\n      valueVertical: "value-vertical",\n      valueNormal: "value-normal",\n      valueLarge: "value-large",\n      valueSub: "value-sub"\n    };\n    // Namespaces of internal event listeners\n    var INTERNAL_EVENT_NS = {\n      tooltips: ".__tooltips",\n      aria: ".__aria"\n    };\n    //endregion\n    function testStep(parsed, entry) {\n      if (!isNumeric(entry)) {\n        throw new Error("noUiSlider: \'step\' is not numeric.");\n      }\n      // The step option can still be used to set stepping\n      // for linear sliders. Overwritten if set in \'range\'.\n      parsed.singleStep = entry;\n    }\n    function testKeyboardPageMultiplier(parsed, entry) {\n      if (!isNumeric(entry)) {\n        throw new Error("noUiSlider: \'keyboardPageMultiplier\' is not numeric.");\n      }\n      parsed.keyboardPageMultiplier = entry;\n    }\n    function testKeyboardMultiplier(parsed, entry) {\n      if (!isNumeric(entry)) {\n        throw new Error("noUiSlider: \'keyboardMultiplier\' is not numeric.");\n      }\n      parsed.keyboardMultiplier = entry;\n    }\n    function testKeyboardDefaultStep(parsed, entry) {\n      if (!isNumeric(entry)) {\n        throw new Error("noUiSlider: \'keyboardDefaultStep\' is not numeric.");\n      }\n      parsed.keyboardDefaultStep = entry;\n    }\n    function testRange(parsed, entry) {\n      // Filter incorrect input.\n      if (_typeof(entry) !== "object" || Array.isArray(entry)) {\n        throw new Error("noUiSlider: \'range\' is not an object.");\n      }\n      // Catch missing start or end.\n      if (entry.min === undefined || entry.max === undefined) {\n        throw new Error("noUiSlider: Missing \'min\' or \'max\' in \'range\'.");\n      }\n      parsed.spectrum = new Spectrum(entry, parsed.snap || false, parsed.singleStep);\n    }\n    function testStart(parsed, entry) {\n      entry = asArray(entry);\n      // Validate input. Values aren\'t tested, as the public .val method\n      // will always provide a valid location.\n      if (!Array.isArray(entry) || !entry.length) {\n        throw new Error("noUiSlider: \'start\' option is incorrect.");\n      }\n      // Store the number of handles.\n      parsed.handles = entry.length;\n      // When the slider is initialized, the .val method will\n      // be called with the start options.\n      parsed.start = entry;\n    }\n    function testSnap(parsed, entry) {\n      if (typeof entry !== "boolean") {\n        throw new Error("noUiSlider: \'snap\' option must be a boolean.");\n      }\n      // Enforce 100% stepping within subranges.\n      parsed.snap = entry;\n    }\n    function testAnimate(parsed, entry) {\n      if (typeof entry !== "boolean") {\n        throw new Error("noUiSlider: \'animate\' option must be a boolean.");\n      }\n      // Enforce 100% stepping within subranges.\n      parsed.animate = entry;\n    }\n    function testAnimationDuration(parsed, entry) {\n      if (typeof entry !== "number") {\n        throw new Error("noUiSlider: \'animationDuration\' option must be a number.");\n      }\n      parsed.animationDuration = entry;\n    }\n    function testConnect(parsed, entry) {\n      var connect = [false];\n      var i;\n      // Map legacy options\n      if (entry === "lower") {\n        entry = [true, false];\n      } else if (entry === "upper") {\n        entry = [false, true];\n      }\n      // Handle boolean options\n      if (entry === true || entry === false) {\n        for (i = 1; i < parsed.handles; i++) {\n          connect.push(entry);\n        }\n        connect.push(false);\n      }\n      // Reject invalid input\n      else if (!Array.isArray(entry) || !entry.length || entry.length !== parsed.handles + 1) {\n        throw new Error("noUiSlider: \'connect\' option doesn\'t match handle count.");\n      } else {\n        connect = entry;\n      }\n      parsed.connect = connect;\n    }\n    function testOrientation(parsed, entry) {\n      // Set orientation to an a numerical value for easy\n      // array selection.\n      switch (entry) {\n        case "horizontal":\n          parsed.ort = 0;\n          break;\n        case "vertical":\n          parsed.ort = 1;\n          break;\n        default:\n          throw new Error("noUiSlider: \'orientation\' option is invalid.");\n      }\n    }\n    function testMargin(parsed, entry) {\n      if (!isNumeric(entry)) {\n        throw new Error("noUiSlider: \'margin\' option must be numeric.");\n      }\n      // Issue #582\n      if (entry === 0) {\n        return;\n      }\n      parsed.margin = parsed.spectrum.getDistance(entry);\n    }\n    function testLimit(parsed, entry) {\n      if (!isNumeric(entry)) {\n        throw new Error("noUiSlider: \'limit\' option must be numeric.");\n      }\n      parsed.limit = parsed.spectrum.getDistance(entry);\n      if (!parsed.limit || parsed.handles < 2) {\n        throw new Error("noUiSlider: \'limit\' option is only supported on linear sliders with 2 or more handles.");\n      }\n    }\n    function testPadding(parsed, entry) {\n      var index;\n      if (!isNumeric(entry) && !Array.isArray(entry)) {\n        throw new Error("noUiSlider: \'padding\' option must be numeric or array of exactly 2 numbers.");\n      }\n      if (Array.isArray(entry) && !(entry.length === 2 || isNumeric(entry[0]) || isNumeric(entry[1]))) {\n        throw new Error("noUiSlider: \'padding\' option must be numeric or array of exactly 2 numbers.");\n      }\n      if (entry === 0) {\n        return;\n      }\n      if (!Array.isArray(entry)) {\n        entry = [entry, entry];\n      }\n      // \'getDistance\' returns false for invalid values.\n      parsed.padding = [parsed.spectrum.getDistance(entry[0]), parsed.spectrum.getDistance(entry[1])];\n      for (index = 0; index < parsed.spectrum.xNumSteps.length - 1; index++) {\n        // last "range" can\'t contain step size as it is purely an endpoint.\n        if (parsed.padding[0][index] < 0 || parsed.padding[1][index] < 0) {\n          throw new Error("noUiSlider: \'padding\' option must be a positive number(s).");\n        }\n      }\n      var totalPadding = entry[0] + entry[1];\n      var firstValue = parsed.spectrum.xVal[0];\n      var lastValue = parsed.spectrum.xVal[parsed.spectrum.xVal.length - 1];\n      if (totalPadding / (lastValue - firstValue) > 1) {\n        throw new Error("noUiSlider: \'padding\' option must not exceed 100% of the range.");\n      }\n    }\n    function testDirection(parsed, entry) {\n      // Set direction as a numerical value for easy parsing.\n      // Invert connection for RTL sliders, so that the proper\n      // handles get the connect/background classes.\n      switch (entry) {\n        case "ltr":\n          parsed.dir = 0;\n          break;\n        case "rtl":\n          parsed.dir = 1;\n          break;\n        default:\n          throw new Error("noUiSlider: \'direction\' option was not recognized.");\n      }\n    }\n    function testBehaviour(parsed, entry) {\n      // Make sure the input is a string.\n      if (typeof entry !== "string") {\n        throw new Error("noUiSlider: \'behaviour\' must be a string containing options.");\n      }\n      // Check if the string contains any keywords.\n      // None are required.\n      var tap = entry.indexOf("tap") >= 0;\n      var drag = entry.indexOf("drag") >= 0;\n      var fixed = entry.indexOf("fixed") >= 0;\n      var snap = entry.indexOf("snap") >= 0;\n      var hover = entry.indexOf("hover") >= 0;\n      var unconstrained = entry.indexOf("unconstrained") >= 0;\n      var dragAll = entry.indexOf("drag-all") >= 0;\n      var smoothSteps = entry.indexOf("smooth-steps") >= 0;\n      if (fixed) {\n        if (parsed.handles !== 2) {\n          throw new Error("noUiSlider: \'fixed\' behaviour must be used with 2 handles");\n        }\n        // Use margin to enforce fixed state\n        testMargin(parsed, parsed.start[1] - parsed.start[0]);\n      }\n      if (unconstrained && (parsed.margin || parsed.limit)) {\n        throw new Error("noUiSlider: \'unconstrained\' behaviour cannot be used with margin or limit");\n      }\n      parsed.events = {\n        tap: tap || snap,\n        drag: drag,\n        dragAll: dragAll,\n        smoothSteps: smoothSteps,\n        fixed: fixed,\n        snap: snap,\n        hover: hover,\n        unconstrained: unconstrained\n      };\n    }\n    function testTooltips(parsed, entry) {\n      if (entry === false) {\n        return;\n      }\n      if (entry === true || isValidPartialFormatter(entry)) {\n        parsed.tooltips = [];\n        for (var i = 0; i < parsed.handles; i++) {\n          parsed.tooltips.push(entry);\n        }\n      } else {\n        entry = asArray(entry);\n        if (entry.length !== parsed.handles) {\n          throw new Error("noUiSlider: must pass a formatter for all handles.");\n        }\n        entry.forEach(function (formatter) {\n          if (typeof formatter !== "boolean" && !isValidPartialFormatter(formatter)) {\n            throw new Error("noUiSlider: \'tooltips\' must be passed a formatter or \'false\'.");\n          }\n        });\n        parsed.tooltips = entry;\n      }\n    }\n    function testHandleAttributes(parsed, entry) {\n      if (entry.length !== parsed.handles) {\n        throw new Error("noUiSlider: must pass a attributes for all handles.");\n      }\n      parsed.handleAttributes = entry;\n    }\n    function testAriaFormat(parsed, entry) {\n      if (!isValidPartialFormatter(entry)) {\n        throw new Error("noUiSlider: \'ariaFormat\' requires \'to\' method.");\n      }\n      parsed.ariaFormat = entry;\n    }\n    function testFormat(parsed, entry) {\n      if (!isValidFormatter(entry)) {\n        throw new Error("noUiSlider: \'format\' requires \'to\' and \'from\' methods.");\n      }\n      parsed.format = entry;\n    }\n    function testKeyboardSupport(parsed, entry) {\n      if (typeof entry !== "boolean") {\n        throw new Error("noUiSlider: \'keyboardSupport\' option must be a boolean.");\n      }\n      parsed.keyboardSupport = entry;\n    }\n    function testDocumentElement(parsed, entry) {\n      // This is an advanced option. Passed values are used without validation.\n      parsed.documentElement = entry;\n    }\n    function testCssPrefix(parsed, entry) {\n      if (typeof entry !== "string" && entry !== false) {\n        throw new Error("noUiSlider: \'cssPrefix\' must be a string or `false`.");\n      }\n      parsed.cssPrefix = entry;\n    }\n    function testCssClasses(parsed, entry) {\n      if (_typeof(entry) !== "object") {\n        throw new Error("noUiSlider: \'cssClasses\' must be an object.");\n      }\n      if (typeof parsed.cssPrefix === "string") {\n        parsed.cssClasses = {};\n        Object.keys(entry).forEach(function (key) {\n          parsed.cssClasses[key] = parsed.cssPrefix + entry[key];\n        });\n      } else {\n        parsed.cssClasses = entry;\n      }\n    }\n    // Test all developer settings and parse to assumption-safe values.\n    function testOptions(options) {\n      // To prove a fix for #537, freeze options here.\n      // If the object is modified, an error will be thrown.\n      // Object.freeze(options);\n      var parsed = {\n        margin: null,\n        limit: null,\n        padding: null,\n        animate: true,\n        animationDuration: 300,\n        ariaFormat: defaultFormatter,\n        format: defaultFormatter\n      };\n      // Tests are executed in the order they are presented here.\n      var tests = {\n        step: {\n          r: false,\n          t: testStep\n        },\n        keyboardPageMultiplier: {\n          r: false,\n          t: testKeyboardPageMultiplier\n        },\n        keyboardMultiplier: {\n          r: false,\n          t: testKeyboardMultiplier\n        },\n        keyboardDefaultStep: {\n          r: false,\n          t: testKeyboardDefaultStep\n        },\n        start: {\n          r: true,\n          t: testStart\n        },\n        connect: {\n          r: true,\n          t: testConnect\n        },\n        direction: {\n          r: true,\n          t: testDirection\n        },\n        snap: {\n          r: false,\n          t: testSnap\n        },\n        animate: {\n          r: false,\n          t: testAnimate\n        },\n        animationDuration: {\n          r: false,\n          t: testAnimationDuration\n        },\n        range: {\n          r: true,\n          t: testRange\n        },\n        orientation: {\n          r: false,\n          t: testOrientation\n        },\n        margin: {\n          r: false,\n          t: testMargin\n        },\n        limit: {\n          r: false,\n          t: testLimit\n        },\n        padding: {\n          r: false,\n          t: testPadding\n        },\n        behaviour: {\n          r: true,\n          t: testBehaviour\n        },\n        ariaFormat: {\n          r: false,\n          t: testAriaFormat\n        },\n        format: {\n          r: false,\n          t: testFormat\n        },\n        tooltips: {\n          r: false,\n          t: testTooltips\n        },\n        keyboardSupport: {\n          r: true,\n          t: testKeyboardSupport\n        },\n        documentElement: {\n          r: false,\n          t: testDocumentElement\n        },\n        cssPrefix: {\n          r: true,\n          t: testCssPrefix\n        },\n        cssClasses: {\n          r: true,\n          t: testCssClasses\n        },\n        handleAttributes: {\n          r: false,\n          t: testHandleAttributes\n        }\n      };\n      var defaults = {\n        connect: false,\n        direction: "ltr",\n        behaviour: "tap",\n        orientation: "horizontal",\n        keyboardSupport: true,\n        cssPrefix: "noUi-",\n        cssClasses: cssClasses,\n        keyboardPageMultiplier: 5,\n        keyboardMultiplier: 1,\n        keyboardDefaultStep: 10\n      };\n      // AriaFormat defaults to regular format, if any.\n      if (options.format && !options.ariaFormat) {\n        options.ariaFormat = options.format;\n      }\n      // Run all options through a testing mechanism to ensure correct\n      // input. It should be noted that options might get modified to\n      // be handled properly. E.g. wrapping integers in arrays.\n      Object.keys(tests).forEach(function (name) {\n        // If the option isn\'t set, but it is required, throw an error.\n        if (!isSet(options[name]) && defaults[name] === undefined) {\n          if (tests[name].r) {\n            throw new Error("noUiSlider: \'" + name + "\' is required.");\n          }\n          return;\n        }\n        tests[name].t(parsed, !isSet(options[name]) ? defaults[name] : options[name]);\n      });\n      // Forward pips options\n      parsed.pips = options.pips;\n      // All recent browsers accept unprefixed transform.\n      // We need -ms- for IE9 and -webkit- for older Android;\n      // Assume use of -webkit- if unprefixed and -ms- are not supported.\n      // https://caniuse.com/#feat=transforms2d\n      var d = document.createElement("div");\n      var msPrefix = d.style.msTransform !== undefined;\n      var noPrefix = d.style.transform !== undefined;\n      parsed.transformRule = noPrefix ? "transform" : msPrefix ? "msTransform" : "webkitTransform";\n      // Pips don\'t move, so we can place them using left/top.\n      var styles = [["left", "top"], ["right", "bottom"]];\n      parsed.style = styles[parsed.dir][parsed.ort];\n      return parsed;\n    }\n    //endregion\n    function scope(target, options, originalOptions) {\n      var actions = getActions();\n      var supportsTouchActionNone = getSupportsTouchActionNone();\n      var supportsPassive = supportsTouchActionNone && getSupportsPassive();\n      // All variables local to \'scope\' are prefixed with \'scope_\'\n      // Slider DOM Nodes\n      var scope_Target = target;\n      var scope_Base;\n      var scope_Handles;\n      var scope_Connects;\n      var scope_Pips;\n      var scope_Tooltips;\n      // Slider state values\n      var scope_Spectrum = options.spectrum;\n      var scope_Values = [];\n      var scope_Locations = [];\n      var scope_HandleNumbers = [];\n      var scope_ActiveHandlesCount = 0;\n      var scope_Events = {};\n      // Document Nodes\n      var scope_Document = target.ownerDocument;\n      var scope_DocumentElement = options.documentElement || scope_Document.documentElement;\n      var scope_Body = scope_Document.body;\n      // For horizontal sliders in standard ltr documents,\n      // make .noUi-origin overflow to the left so the document doesn\'t scroll.\n      var scope_DirOffset = scope_Document.dir === "rtl" || options.ort === 1 ? 0 : 100;\n      // Creates a node, adds it to target, returns the new node.\n      function addNodeTo(addTarget, className) {\n        var div = scope_Document.createElement("div");\n        if (className) {\n          addClass(div, className);\n        }\n        addTarget.appendChild(div);\n        return div;\n      }\n      // Append a origin to the base\n      function addOrigin(base, handleNumber) {\n        var origin = addNodeTo(base, options.cssClasses.origin);\n        var handle = addNodeTo(origin, options.cssClasses.handle);\n        addNodeTo(handle, options.cssClasses.touchArea);\n        handle.setAttribute("data-handle", String(handleNumber));\n        if (options.keyboardSupport) {\n          // https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex\n          // 0 = focusable and reachable\n          handle.setAttribute("tabindex", "0");\n          handle.addEventListener("keydown", function (event) {\n            return eventKeydown(event, handleNumber);\n          });\n        }\n        if (options.handleAttributes !== undefined) {\n          var attributes_1 = options.handleAttributes[handleNumber];\n          Object.keys(attributes_1).forEach(function (attribute) {\n            handle.setAttribute(attribute, attributes_1[attribute]);\n          });\n        }\n        handle.setAttribute("role", "slider");\n        handle.setAttribute("aria-orientation", options.ort ? "vertical" : "horizontal");\n        if (handleNumber === 0) {\n          addClass(handle, options.cssClasses.handleLower);\n        } else if (handleNumber === options.handles - 1) {\n          addClass(handle, options.cssClasses.handleUpper);\n        }\n        origin.handle = handle;\n        return origin;\n      }\n      // Insert nodes for connect elements\n      function addConnect(base, add) {\n        if (!add) {\n          return false;\n        }\n        return addNodeTo(base, options.cssClasses.connect);\n      }\n      // Add handles to the slider base.\n      function addElements(connectOptions, base) {\n        var connectBase = addNodeTo(base, options.cssClasses.connects);\n        scope_Handles = [];\n        scope_Connects = [];\n        scope_Connects.push(addConnect(connectBase, connectOptions[0]));\n        // [::::O====O====O====]\n        // connectOptions = [0, 1, 1, 1]\n        for (var i = 0; i < options.handles; i++) {\n          // Keep a list of all added handles.\n          scope_Handles.push(addOrigin(base, i));\n          scope_HandleNumbers[i] = i;\n          scope_Connects.push(addConnect(connectBase, connectOptions[i + 1]));\n        }\n      }\n      // Initialize a single slider.\n      function addSlider(addTarget) {\n        // Apply classes and data to the target.\n        addClass(addTarget, options.cssClasses.target);\n        if (options.dir === 0) {\n          addClass(addTarget, options.cssClasses.ltr);\n        } else {\n          addClass(addTarget, options.cssClasses.rtl);\n        }\n        if (options.ort === 0) {\n          addClass(addTarget, options.cssClasses.horizontal);\n        } else {\n          addClass(addTarget, options.cssClasses.vertical);\n        }\n        var textDirection = getComputedStyle(addTarget).direction;\n        if (textDirection === "rtl") {\n          addClass(addTarget, options.cssClasses.textDirectionRtl);\n        } else {\n          addClass(addTarget, options.cssClasses.textDirectionLtr);\n        }\n        return addNodeTo(addTarget, options.cssClasses.base);\n      }\n      function addTooltip(handle, handleNumber) {\n        if (!options.tooltips || !options.tooltips[handleNumber]) {\n          return false;\n        }\n        return addNodeTo(handle.firstChild, options.cssClasses.tooltip);\n      }\n      function isSliderDisabled() {\n        return scope_Target.hasAttribute("disabled");\n      }\n      // Disable the slider dragging if any handle is disabled\n      function isHandleDisabled(handleNumber) {\n        var handleOrigin = scope_Handles[handleNumber];\n        return handleOrigin.hasAttribute("disabled");\n      }\n      function disable(handleNumber) {\n        if (handleNumber !== null && handleNumber !== undefined) {\n          scope_Handles[handleNumber].setAttribute("disabled", "");\n          scope_Handles[handleNumber].handle.removeAttribute("tabindex");\n        } else {\n          scope_Target.setAttribute("disabled", "");\n          scope_Handles.forEach(function (handle) {\n            handle.handle.removeAttribute("tabindex");\n          });\n        }\n      }\n      function enable(handleNumber) {\n        if (handleNumber !== null && handleNumber !== undefined) {\n          scope_Handles[handleNumber].removeAttribute("disabled");\n          scope_Handles[handleNumber].handle.setAttribute("tabindex", "0");\n        } else {\n          scope_Target.removeAttribute("disabled");\n          scope_Handles.forEach(function (handle) {\n            handle.removeAttribute("disabled");\n            handle.handle.setAttribute("tabindex", "0");\n          });\n        }\n      }\n      function removeTooltips() {\n        if (scope_Tooltips) {\n          removeEvent("update" + INTERNAL_EVENT_NS.tooltips);\n          scope_Tooltips.forEach(function (tooltip) {\n            if (tooltip) {\n              removeElement(tooltip);\n            }\n          });\n          scope_Tooltips = null;\n        }\n      }\n      // The tooltips option is a shorthand for using the \'update\' event.\n      function tooltips() {\n        removeTooltips();\n        // Tooltips are added with options.tooltips in original order.\n        scope_Tooltips = scope_Handles.map(addTooltip);\n        bindEvent("update" + INTERNAL_EVENT_NS.tooltips, function (values, handleNumber, unencoded) {\n          if (!scope_Tooltips || !options.tooltips) {\n            return;\n          }\n          if (scope_Tooltips[handleNumber] === false) {\n            return;\n          }\n          var formattedValue = values[handleNumber];\n          if (options.tooltips[handleNumber] !== true) {\n            formattedValue = options.tooltips[handleNumber].to(unencoded[handleNumber]);\n          }\n          scope_Tooltips[handleNumber].innerHTML = formattedValue;\n        });\n      }\n      function aria() {\n        removeEvent("update" + INTERNAL_EVENT_NS.aria);\n        bindEvent("update" + INTERNAL_EVENT_NS.aria, function (values, handleNumber, unencoded, tap, positions) {\n          // Update Aria Values for all handles, as a change in one changes min and max values for the next.\n          scope_HandleNumbers.forEach(function (index) {\n            var handle = scope_Handles[index];\n            var min = checkHandlePosition(scope_Locations, index, 0, true, true, true);\n            var max = checkHandlePosition(scope_Locations, index, 100, true, true, true);\n            var now = positions[index];\n            // Formatted value for display\n            var text = String(options.ariaFormat.to(unencoded[index]));\n            // Map to slider range values\n            min = scope_Spectrum.fromStepping(min).toFixed(1);\n            max = scope_Spectrum.fromStepping(max).toFixed(1);\n            now = scope_Spectrum.fromStepping(now).toFixed(1);\n            handle.children[0].setAttribute("aria-valuemin", min);\n            handle.children[0].setAttribute("aria-valuemax", max);\n            handle.children[0].setAttribute("aria-valuenow", now);\n            handle.children[0].setAttribute("aria-valuetext", text);\n          });\n        });\n      }\n      function getGroup(pips) {\n        // Use the range.\n        if (pips.mode === exports.PipsMode.Range || pips.mode === exports.PipsMode.Steps) {\n          return scope_Spectrum.xVal;\n        }\n        if (pips.mode === exports.PipsMode.Count) {\n          if (pips.values < 2) {\n            throw new Error("noUiSlider: \'values\' (>= 2) required for mode \'count\'.");\n          }\n          // Divide 0 - 100 in \'count\' parts.\n          var interval = pips.values - 1;\n          var spread = 100 / interval;\n          var values = [];\n          // List these parts and have them handled as \'positions\'.\n          while (interval--) {\n            values[interval] = interval * spread;\n          }\n          values.push(100);\n          return mapToRange(values, pips.stepped);\n        }\n        if (pips.mode === exports.PipsMode.Positions) {\n          // Map all percentages to on-range values.\n          return mapToRange(pips.values, pips.stepped);\n        }\n        if (pips.mode === exports.PipsMode.Values) {\n          // If the value must be stepped, it needs to be converted to a percentage first.\n          if (pips.stepped) {\n            return pips.values.map(function (value) {\n              // Convert to percentage, apply step, return to value.\n              return scope_Spectrum.fromStepping(scope_Spectrum.getStep(scope_Spectrum.toStepping(value)));\n            });\n          }\n          // Otherwise, we can simply use the values.\n          return pips.values;\n        }\n        return []; // pips.mode = never\n      }\n\n      function mapToRange(values, stepped) {\n        return values.map(function (value) {\n          return scope_Spectrum.fromStepping(stepped ? scope_Spectrum.getStep(value) : value);\n        });\n      }\n      function generateSpread(pips) {\n        function safeIncrement(value, increment) {\n          // Avoid floating point variance by dropping the smallest decimal places.\n          return Number((value + increment).toFixed(7));\n        }\n        var group = getGroup(pips);\n        var indexes = {};\n        var firstInRange = scope_Spectrum.xVal[0];\n        var lastInRange = scope_Spectrum.xVal[scope_Spectrum.xVal.length - 1];\n        var ignoreFirst = false;\n        var ignoreLast = false;\n        var prevPct = 0;\n        // Create a copy of the group, sort it and filter away all duplicates.\n        group = unique(group.slice().sort(function (a, b) {\n          return a - b;\n        }));\n        // Make sure the range starts with the first element.\n        if (group[0] !== firstInRange) {\n          group.unshift(firstInRange);\n          ignoreFirst = true;\n        }\n        // Likewise for the last one.\n        if (group[group.length - 1] !== lastInRange) {\n          group.push(lastInRange);\n          ignoreLast = true;\n        }\n        group.forEach(function (current, index) {\n          // Get the current step and the lower + upper positions.\n          var step;\n          var i;\n          var q;\n          var low = current;\n          var high = group[index + 1];\n          var newPct;\n          var pctDifference;\n          var pctPos;\n          var type;\n          var steps;\n          var realSteps;\n          var stepSize;\n          var isSteps = pips.mode === exports.PipsMode.Steps;\n          // When using \'steps\' mode, use the provided steps.\n          // Otherwise, we\'ll step on to the next subrange.\n          if (isSteps) {\n            step = scope_Spectrum.xNumSteps[index];\n          }\n          // Default to a \'full\' step.\n          if (!step) {\n            step = high - low;\n          }\n          // If high is undefined we are at the last subrange. Make sure it iterates once (#1088)\n          if (high === undefined) {\n            high = low;\n          }\n          // Make sure step isn\'t 0, which would cause an infinite loop (#654)\n          step = Math.max(step, 0.0000001);\n          // Find all steps in the subrange.\n          for (i = low; i <= high; i = safeIncrement(i, step)) {\n            // Get the percentage value for the current step,\n            // calculate the size for the subrange.\n            newPct = scope_Spectrum.toStepping(i);\n            pctDifference = newPct - prevPct;\n            steps = pctDifference / (pips.density || 1);\n            realSteps = Math.round(steps);\n            // This ratio represents the amount of percentage-space a point indicates.\n            // For a density 1 the points/percentage = 1. For density 2, that percentage needs to be re-divided.\n            // Round the percentage offset to an even number, then divide by two\n            // to spread the offset on both sides of the range.\n            stepSize = pctDifference / realSteps;\n            // Divide all points evenly, adding the correct number to this subrange.\n            // Run up to <= so that 100% gets a point, event if ignoreLast is set.\n            for (q = 1; q <= realSteps; q += 1) {\n              // The ratio between the rounded value and the actual size might be ~1% off.\n              // Correct the percentage offset by the number of points\n              // per subrange. density = 1 will result in 100 points on the\n              // full range, 2 for 50, 4 for 25, etc.\n              pctPos = prevPct + q * stepSize;\n              indexes[pctPos.toFixed(5)] = [scope_Spectrum.fromStepping(pctPos), 0];\n            }\n            // Determine the point type.\n            type = group.indexOf(i) > -1 ? exports.PipsType.LargeValue : isSteps ? exports.PipsType.SmallValue : exports.PipsType.NoValue;\n            // Enforce the \'ignoreFirst\' option by overwriting the type for 0.\n            if (!index && ignoreFirst && i !== high) {\n              type = 0;\n            }\n            if (!(i === high && ignoreLast)) {\n              // Mark the \'type\' of this point. 0 = plain, 1 = real value, 2 = step value.\n              indexes[newPct.toFixed(5)] = [i, type];\n            }\n            // Update the percentage count.\n            prevPct = newPct;\n          }\n        });\n        return indexes;\n      }\n      function addMarking(spread, filterFunc, formatter) {\n        var _a, _b;\n        var element = scope_Document.createElement("div");\n        var valueSizeClasses = (_a = {}, _a[exports.PipsType.None] = "", _a[exports.PipsType.NoValue] = options.cssClasses.valueNormal, _a[exports.PipsType.LargeValue] = options.cssClasses.valueLarge, _a[exports.PipsType.SmallValue] = options.cssClasses.valueSub, _a);\n        var markerSizeClasses = (_b = {}, _b[exports.PipsType.None] = "", _b[exports.PipsType.NoValue] = options.cssClasses.markerNormal, _b[exports.PipsType.LargeValue] = options.cssClasses.markerLarge, _b[exports.PipsType.SmallValue] = options.cssClasses.markerSub, _b);\n        var valueOrientationClasses = [options.cssClasses.valueHorizontal, options.cssClasses.valueVertical];\n        var markerOrientationClasses = [options.cssClasses.markerHorizontal, options.cssClasses.markerVertical];\n        addClass(element, options.cssClasses.pips);\n        addClass(element, options.ort === 0 ? options.cssClasses.pipsHorizontal : options.cssClasses.pipsVertical);\n        function getClasses(type, source) {\n          var a = source === options.cssClasses.value;\n          var orientationClasses = a ? valueOrientationClasses : markerOrientationClasses;\n          var sizeClasses = a ? valueSizeClasses : markerSizeClasses;\n          return source + " " + orientationClasses[options.ort] + " " + sizeClasses[type];\n        }\n        function addSpread(offset, value, type) {\n          // Apply the filter function, if it is set.\n          type = filterFunc ? filterFunc(value, type) : type;\n          if (type === exports.PipsType.None) {\n            return;\n          }\n          // Add a marker for every point\n          var node = addNodeTo(element, false);\n          node.className = getClasses(type, options.cssClasses.marker);\n          node.style[options.style] = offset + "%";\n          // Values are only appended for points marked \'1\' or \'2\'.\n          if (type > exports.PipsType.NoValue) {\n            node = addNodeTo(element, false);\n            node.className = getClasses(type, options.cssClasses.value);\n            node.setAttribute("data-value", String(value));\n            node.style[options.style] = offset + "%";\n            node.innerHTML = String(formatter.to(value));\n          }\n        }\n        // Append all points.\n        Object.keys(spread).forEach(function (offset) {\n          addSpread(offset, spread[offset][0], spread[offset][1]);\n        });\n        return element;\n      }\n      function removePips() {\n        if (scope_Pips) {\n          removeElement(scope_Pips);\n          scope_Pips = null;\n        }\n      }\n      function pips(pips) {\n        // Fix #669\n        removePips();\n        var spread = generateSpread(pips);\n        var filter = pips.filter;\n        var format = pips.format || {\n          to: function to(value) {\n            return String(Math.round(value));\n          }\n        };\n        scope_Pips = scope_Target.appendChild(addMarking(spread, filter, format));\n        return scope_Pips;\n      }\n      // Shorthand for base dimensions.\n      function baseSize() {\n        var rect = scope_Base.getBoundingClientRect();\n        var alt = "offset" + ["Width", "Height"][options.ort];\n        return options.ort === 0 ? rect.width || scope_Base[alt] : rect.height || scope_Base[alt];\n      }\n      // Handler for attaching events trough a proxy.\n      function attachEvent(events, element, callback, data) {\n        // This function can be used to \'filter\' events to the slider.\n        // element is a node, not a nodeList\n        var method = function method(event) {\n          var e = fixEvent(event, data.pageOffset, data.target || element);\n          // fixEvent returns false if this event has a different target\n          // when handling (multi-) touch events;\n          if (!e) {\n            return false;\n          }\n          // doNotReject is passed by all end events to make sure released touches\n          // are not rejected, leaving the slider "stuck" to the cursor;\n          if (isSliderDisabled() && !data.doNotReject) {\n            return false;\n          }\n          // Stop if an active \'tap\' transition is taking place.\n          if (hasClass(scope_Target, options.cssClasses.tap) && !data.doNotReject) {\n            return false;\n          }\n          // Ignore right or middle clicks on start #454\n          if (events === actions.start && e.buttons !== undefined && e.buttons > 1) {\n            return false;\n          }\n          // Ignore right or middle clicks on start #454\n          if (data.hover && e.buttons) {\n            return false;\n          }\n          // \'supportsPassive\' is only true if a browser also supports touch-action: none in CSS.\n          // iOS safari does not, so it doesn\'t get to benefit from passive scrolling. iOS does support\n          // touch-action: manipulation, but that allows panning, which breaks\n          // sliders after zooming/on non-responsive pages.\n          // See: https://bugs.webkit.org/show_bug.cgi?id=133112\n          if (!supportsPassive) {\n            e.preventDefault();\n          }\n          e.calcPoint = e.points[options.ort];\n          // Call the event handler with the event [ and additional data ].\n          callback(e, data);\n          return;\n        };\n        var methods = [];\n        // Bind a closure on the target for every event type.\n        events.split(" ").forEach(function (eventName) {\n          element.addEventListener(eventName, method, supportsPassive ? {\n            passive: true\n          } : false);\n          methods.push([eventName, method]);\n        });\n        return methods;\n      }\n      // Provide a clean event with standardized offset values.\n      function fixEvent(e, pageOffset, eventTarget) {\n        // Filter the event to register the type, which can be\n        // touch, mouse or pointer. Offset changes need to be\n        // made on an event specific basis.\n        var touch = e.type.indexOf("touch") === 0;\n        var mouse = e.type.indexOf("mouse") === 0;\n        var pointer = e.type.indexOf("pointer") === 0;\n        var x = 0;\n        var y = 0;\n        // IE10 implemented pointer events with a prefix;\n        if (e.type.indexOf("MSPointer") === 0) {\n          pointer = true;\n        }\n        // Erroneous events seem to be passed in occasionally on iOS/iPadOS after user finishes interacting with\n        // the slider. They appear to be of type MouseEvent, yet they don\'t have usual properties set. Ignore\n        // events that have no touches or buttons associated with them. (#1057, #1079, #1095)\n        if (e.type === "mousedown" && !e.buttons && !e.touches) {\n          return false;\n        }\n        // The only thing one handle should be concerned about is the touches that originated on top of it.\n        if (touch) {\n          // Returns true if a touch originated on the target.\n          var isTouchOnTarget = function isTouchOnTarget(checkTouch) {\n            var target = checkTouch.target;\n            return target === eventTarget || eventTarget.contains(target) || e.composed && e.composedPath().shift() === eventTarget;\n          };\n          // In the case of touchstart events, we need to make sure there is still no more than one\n          // touch on the target so we look amongst all touches.\n          if (e.type === "touchstart") {\n            var targetTouches = Array.prototype.filter.call(e.touches, isTouchOnTarget);\n            // Do not support more than one touch per handle.\n            if (targetTouches.length > 1) {\n              return false;\n            }\n            x = targetTouches[0].pageX;\n            y = targetTouches[0].pageY;\n          } else {\n            // In the other cases, find on changedTouches is enough.\n            var targetTouch = Array.prototype.find.call(e.changedTouches, isTouchOnTarget);\n            // Cancel if the target touch has not moved.\n            if (!targetTouch) {\n              return false;\n            }\n            x = targetTouch.pageX;\n            y = targetTouch.pageY;\n          }\n        }\n        pageOffset = pageOffset || getPageOffset(scope_Document);\n        if (mouse || pointer) {\n          x = e.clientX + pageOffset.x;\n          y = e.clientY + pageOffset.y;\n        }\n        e.pageOffset = pageOffset;\n        e.points = [x, y];\n        e.cursor = mouse || pointer; // Fix #435\n        return e;\n      }\n      // Translate a coordinate in the document to a percentage on the slider\n      function calcPointToPercentage(calcPoint) {\n        var location = calcPoint - offset(scope_Base, options.ort);\n        var proposal = location * 100 / baseSize();\n        // Clamp proposal between 0% and 100%\n        // Out-of-bound coordinates may occur when .noUi-base pseudo-elements\n        // are used (e.g. contained handles feature)\n        proposal = limit(proposal);\n        return options.dir ? 100 - proposal : proposal;\n      }\n      // Find handle closest to a certain percentage on the slider\n      function getClosestHandle(clickedPosition) {\n        var smallestDifference = 100;\n        var handleNumber = false;\n        scope_Handles.forEach(function (handle, index) {\n          // Disabled handles are ignored\n          if (isHandleDisabled(index)) {\n            return;\n          }\n          var handlePosition = scope_Locations[index];\n          var differenceWithThisHandle = Math.abs(handlePosition - clickedPosition);\n          // Initial state\n          var clickAtEdge = differenceWithThisHandle === 100 && smallestDifference === 100;\n          // Difference with this handle is smaller than the previously checked handle\n          var isCloser = differenceWithThisHandle < smallestDifference;\n          var isCloserAfter = differenceWithThisHandle <= smallestDifference && clickedPosition > handlePosition;\n          if (isCloser || isCloserAfter || clickAtEdge) {\n            handleNumber = index;\n            smallestDifference = differenceWithThisHandle;\n          }\n        });\n        return handleNumber;\n      }\n      // Fire \'end\' when a mouse or pen leaves the document.\n      function documentLeave(event, data) {\n        if (event.type === "mouseout" && event.target.nodeName === "HTML" && event.relatedTarget === null) {\n          eventEnd(event, data);\n        }\n      }\n      // Handle movement on document for handle and range drag.\n      function eventMove(event, data) {\n        // Fix #498\n        // Check value of .buttons in \'start\' to work around a bug in IE10 mobile (data.buttonsProperty).\n        // https://connect.microsoft.com/IE/feedback/details/927005/mobile-ie10-windows-phone-buttons-property-of-pointermove-event-always-zero\n        // IE9 has .buttons and .which zero on mousemove.\n        // Firefox breaks the spec MDN defines.\n        if (navigator.appVersion.indexOf("MSIE 9") === -1 && event.buttons === 0 && data.buttonsProperty !== 0) {\n          return eventEnd(event, data);\n        }\n        // Check if we are moving up or down\n        var movement = (options.dir ? -1 : 1) * (event.calcPoint - data.startCalcPoint);\n        // Convert the movement into a percentage of the slider width/height\n        var proposal = movement * 100 / data.baseSize;\n        moveHandles(movement > 0, proposal, data.locations, data.handleNumbers, data.connect);\n      }\n      // Unbind move events on document, call callbacks.\n      function eventEnd(event, data) {\n        // The handle is no longer active, so remove the class.\n        if (data.handle) {\n          removeClass(data.handle, options.cssClasses.active);\n          scope_ActiveHandlesCount -= 1;\n        }\n        // Unbind the move and end events, which are added on \'start\'.\n        data.listeners.forEach(function (c) {\n          scope_DocumentElement.removeEventListener(c[0], c[1]);\n        });\n        if (scope_ActiveHandlesCount === 0) {\n          // Remove dragging class.\n          removeClass(scope_Target, options.cssClasses.drag);\n          setZindex();\n          // Remove cursor styles and text-selection events bound to the body.\n          if (event.cursor) {\n            scope_Body.style.cursor = "";\n            scope_Body.removeEventListener("selectstart", preventDefault);\n          }\n        }\n        if (options.events.smoothSteps) {\n          data.handleNumbers.forEach(function (handleNumber) {\n            setHandle(handleNumber, scope_Locations[handleNumber], true, true, false, false);\n          });\n          data.handleNumbers.forEach(function (handleNumber) {\n            fireEvent("update", handleNumber);\n          });\n        }\n        data.handleNumbers.forEach(function (handleNumber) {\n          fireEvent("change", handleNumber);\n          fireEvent("set", handleNumber);\n          fireEvent("end", handleNumber);\n        });\n      }\n      // Bind move events on document.\n      function eventStart(event, data) {\n        // Ignore event if any handle is disabled\n        if (data.handleNumbers.some(isHandleDisabled)) {\n          return;\n        }\n        var handle;\n        if (data.handleNumbers.length === 1) {\n          var handleOrigin = scope_Handles[data.handleNumbers[0]];\n          handle = handleOrigin.children[0];\n          scope_ActiveHandlesCount += 1;\n          // Mark the handle as \'active\' so it can be styled.\n          addClass(handle, options.cssClasses.active);\n        }\n        // A drag should never propagate up to the \'tap\' event.\n        event.stopPropagation();\n        // Record the event listeners.\n        var listeners = [];\n        // Attach the move and end events.\n        var moveEvent = attachEvent(actions.move, scope_DocumentElement, eventMove, {\n          // The event target has changed so we need to propagate the original one so that we keep\n          // relying on it to extract target touches.\n          target: event.target,\n          handle: handle,\n          connect: data.connect,\n          listeners: listeners,\n          startCalcPoint: event.calcPoint,\n          baseSize: baseSize(),\n          pageOffset: event.pageOffset,\n          handleNumbers: data.handleNumbers,\n          buttonsProperty: event.buttons,\n          locations: scope_Locations.slice()\n        });\n        var endEvent = attachEvent(actions.end, scope_DocumentElement, eventEnd, {\n          target: event.target,\n          handle: handle,\n          listeners: listeners,\n          doNotReject: true,\n          handleNumbers: data.handleNumbers\n        });\n        var outEvent = attachEvent("mouseout", scope_DocumentElement, documentLeave, {\n          target: event.target,\n          handle: handle,\n          listeners: listeners,\n          doNotReject: true,\n          handleNumbers: data.handleNumbers\n        });\n        // We want to make sure we pushed the listeners in the listener list rather than creating\n        // a new one as it has already been passed to the event handlers.\n        listeners.push.apply(listeners, moveEvent.concat(endEvent, outEvent));\n        // Text selection isn\'t an issue on touch devices,\n        // so adding cursor styles can be skipped.\n        if (event.cursor) {\n          // Prevent the \'I\' cursor and extend the range-drag cursor.\n          scope_Body.style.cursor = getComputedStyle(event.target).cursor;\n          // Mark the target with a dragging state.\n          if (scope_Handles.length > 1) {\n            addClass(scope_Target, options.cssClasses.drag);\n          }\n          // Prevent text selection when dragging the handles.\n          // In noUiSlider <= 9.2.0, this was handled by calling preventDefault on mouse/touch start/move,\n          // which is scroll blocking. The selectstart event is supported by FireFox starting from version 52,\n          // meaning the only holdout is iOS Safari. This doesn\'t matter: text selection isn\'t triggered there.\n          // The \'cursor\' flag is false.\n          // See: http://caniuse.com/#search=selectstart\n          scope_Body.addEventListener("selectstart", preventDefault, false);\n        }\n        data.handleNumbers.forEach(function (handleNumber) {\n          fireEvent("start", handleNumber);\n        });\n      }\n      // Move closest handle to tapped location.\n      function eventTap(event) {\n        // The tap event shouldn\'t propagate up\n        event.stopPropagation();\n        var proposal = calcPointToPercentage(event.calcPoint);\n        var handleNumber = getClosestHandle(proposal);\n        // Tackle the case that all handles are \'disabled\'.\n        if (handleNumber === false) {\n          return;\n        }\n        // Flag the slider as it is now in a transitional state.\n        // Transition takes a configurable amount of ms (default 300). Re-enable the slider after that.\n        if (!options.events.snap) {\n          addClassFor(scope_Target, options.cssClasses.tap, options.animationDuration);\n        }\n        setHandle(handleNumber, proposal, true, true);\n        setZindex();\n        fireEvent("slide", handleNumber, true);\n        fireEvent("update", handleNumber, true);\n        if (!options.events.snap) {\n          fireEvent("change", handleNumber, true);\n          fireEvent("set", handleNumber, true);\n        } else {\n          eventStart(event, {\n            handleNumbers: [handleNumber]\n          });\n        }\n      }\n      // Fires a \'hover\' event for a hovered mouse/pen position.\n      function eventHover(event) {\n        var proposal = calcPointToPercentage(event.calcPoint);\n        var to = scope_Spectrum.getStep(proposal);\n        var value = scope_Spectrum.fromStepping(to);\n        Object.keys(scope_Events).forEach(function (targetEvent) {\n          if ("hover" === targetEvent.split(".")[0]) {\n            scope_Events[targetEvent].forEach(function (callback) {\n              callback.call(scope_Self, value);\n            });\n          }\n        });\n      }\n      // Handles keydown on focused handles\n      // Don\'t move the document when pressing arrow keys on focused handles\n      function eventKeydown(event, handleNumber) {\n        if (isSliderDisabled() || isHandleDisabled(handleNumber)) {\n          return false;\n        }\n        var horizontalKeys = ["Left", "Right"];\n        var verticalKeys = ["Down", "Up"];\n        var largeStepKeys = ["PageDown", "PageUp"];\n        var edgeKeys = ["Home", "End"];\n        if (options.dir && !options.ort) {\n          // On an right-to-left slider, the left and right keys act inverted\n          horizontalKeys.reverse();\n        } else if (options.ort && !options.dir) {\n          // On a top-to-bottom slider, the up and down keys act inverted\n          verticalKeys.reverse();\n          largeStepKeys.reverse();\n        }\n        // Strip "Arrow" for IE compatibility. https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key\n        var key = event.key.replace("Arrow", "");\n        var isLargeDown = key === largeStepKeys[0];\n        var isLargeUp = key === largeStepKeys[1];\n        var isDown = key === verticalKeys[0] || key === horizontalKeys[0] || isLargeDown;\n        var isUp = key === verticalKeys[1] || key === horizontalKeys[1] || isLargeUp;\n        var isMin = key === edgeKeys[0];\n        var isMax = key === edgeKeys[1];\n        if (!isDown && !isUp && !isMin && !isMax) {\n          return true;\n        }\n        event.preventDefault();\n        var to;\n        if (isUp || isDown) {\n          var direction = isDown ? 0 : 1;\n          var steps = getNextStepsForHandle(handleNumber);\n          var step = steps[direction];\n          // At the edge of a slider, do nothing\n          if (step === null) {\n            return false;\n          }\n          // No step set, use the default of 10% of the sub-range\n          if (step === false) {\n            step = scope_Spectrum.getDefaultStep(scope_Locations[handleNumber], isDown, options.keyboardDefaultStep);\n          }\n          if (isLargeUp || isLargeDown) {\n            step *= options.keyboardPageMultiplier;\n          } else {\n            step *= options.keyboardMultiplier;\n          }\n          // Step over zero-length ranges (#948);\n          step = Math.max(step, 0.0000001);\n          // Decrement for down steps\n          step = (isDown ? -1 : 1) * step;\n          to = scope_Values[handleNumber] + step;\n        } else if (isMax) {\n          // End key\n          to = options.spectrum.xVal[options.spectrum.xVal.length - 1];\n        } else {\n          // Home key\n          to = options.spectrum.xVal[0];\n        }\n        setHandle(handleNumber, scope_Spectrum.toStepping(to), true, true);\n        fireEvent("slide", handleNumber);\n        fireEvent("update", handleNumber);\n        fireEvent("change", handleNumber);\n        fireEvent("set", handleNumber);\n        return false;\n      }\n      // Attach events to several slider parts.\n      function bindSliderEvents(behaviour) {\n        // Attach the standard drag event to the handles.\n        if (!behaviour.fixed) {\n          scope_Handles.forEach(function (handle, index) {\n            // These events are only bound to the visual handle\n            // element, not the \'real\' origin element.\n            attachEvent(actions.start, handle.children[0], eventStart, {\n              handleNumbers: [index]\n            });\n          });\n        }\n        // Attach the tap event to the slider base.\n        if (behaviour.tap) {\n          attachEvent(actions.start, scope_Base, eventTap, {});\n        }\n        // Fire hover events\n        if (behaviour.hover) {\n          attachEvent(actions.move, scope_Base, eventHover, {\n            hover: true\n          });\n        }\n        // Make the range draggable.\n        if (behaviour.drag) {\n          scope_Connects.forEach(function (connect, index) {\n            if (connect === false || index === 0 || index === scope_Connects.length - 1) {\n              return;\n            }\n            var handleBefore = scope_Handles[index - 1];\n            var handleAfter = scope_Handles[index];\n            var eventHolders = [connect];\n            var handlesToDrag = [handleBefore, handleAfter];\n            var handleNumbersToDrag = [index - 1, index];\n            addClass(connect, options.cssClasses.draggable);\n            // When the range is fixed, the entire range can\n            // be dragged by the handles. The handle in the first\n            // origin will propagate the start event upward,\n            // but it needs to be bound manually on the other.\n            if (behaviour.fixed) {\n              eventHolders.push(handleBefore.children[0]);\n              eventHolders.push(handleAfter.children[0]);\n            }\n            if (behaviour.dragAll) {\n              handlesToDrag = scope_Handles;\n              handleNumbersToDrag = scope_HandleNumbers;\n            }\n            eventHolders.forEach(function (eventHolder) {\n              attachEvent(actions.start, eventHolder, eventStart, {\n                handles: handlesToDrag,\n                handleNumbers: handleNumbersToDrag,\n                connect: connect\n              });\n            });\n          });\n        }\n      }\n      // Attach an event to this slider, possibly including a namespace\n      function bindEvent(namespacedEvent, callback) {\n        scope_Events[namespacedEvent] = scope_Events[namespacedEvent] || [];\n        scope_Events[namespacedEvent].push(callback);\n        // If the event bound is \'update,\' fire it immediately for all handles.\n        if (namespacedEvent.split(".")[0] === "update") {\n          scope_Handles.forEach(function (a, index) {\n            fireEvent("update", index);\n          });\n        }\n      }\n      function isInternalNamespace(namespace) {\n        return namespace === INTERNAL_EVENT_NS.aria || namespace === INTERNAL_EVENT_NS.tooltips;\n      }\n      // Undo attachment of event\n      function removeEvent(namespacedEvent) {\n        var event = namespacedEvent && namespacedEvent.split(".")[0];\n        var namespace = event ? namespacedEvent.substring(event.length) : namespacedEvent;\n        Object.keys(scope_Events).forEach(function (bind) {\n          var tEvent = bind.split(".")[0];\n          var tNamespace = bind.substring(tEvent.length);\n          if ((!event || event === tEvent) && (!namespace || namespace === tNamespace)) {\n            // only delete protected internal event if intentional\n            if (!isInternalNamespace(tNamespace) || namespace === tNamespace) {\n              delete scope_Events[bind];\n            }\n          }\n        });\n      }\n      // External event handling\n      function fireEvent(eventName, handleNumber, tap) {\n        Object.keys(scope_Events).forEach(function (targetEvent) {\n          var eventType = targetEvent.split(".")[0];\n          if (eventName === eventType) {\n            scope_Events[targetEvent].forEach(function (callback) {\n              callback.call(\n              // Use the slider public API as the scope (\'this\')\n              scope_Self,\n              // Return values as array, so arg_1[arg_2] is always valid.\n              scope_Values.map(options.format.to),\n              // Handle index, 0 or 1\n              handleNumber,\n              // Un-formatted slider values\n              scope_Values.slice(),\n              // Event is fired by tap, true or false\n              tap || false,\n              // Left offset of the handle, in relation to the slider\n              scope_Locations.slice(),\n              // add the slider public API to an accessible parameter when this is unavailable\n              scope_Self);\n            });\n          }\n        });\n      }\n      // Split out the handle positioning logic so the Move event can use it, too\n      function checkHandlePosition(reference, handleNumber, to, lookBackward, lookForward, getValue, smoothSteps) {\n        var distance;\n        // For sliders with multiple handles, limit movement to the other handle.\n        // Apply the margin option by adding it to the handle positions.\n        if (scope_Handles.length > 1 && !options.events.unconstrained) {\n          if (lookBackward && handleNumber > 0) {\n            distance = scope_Spectrum.getAbsoluteDistance(reference[handleNumber - 1], options.margin, false);\n            to = Math.max(to, distance);\n          }\n          if (lookForward && handleNumber < scope_Handles.length - 1) {\n            distance = scope_Spectrum.getAbsoluteDistance(reference[handleNumber + 1], options.margin, true);\n            to = Math.min(to, distance);\n          }\n        }\n        // The limit option has the opposite effect, limiting handles to a\n        // maximum distance from another. Limit must be > 0, as otherwise\n        // handles would be unmovable.\n        if (scope_Handles.length > 1 && options.limit) {\n          if (lookBackward && handleNumber > 0) {\n            distance = scope_Spectrum.getAbsoluteDistance(reference[handleNumber - 1], options.limit, false);\n            to = Math.min(to, distance);\n          }\n          if (lookForward && handleNumber < scope_Handles.length - 1) {\n            distance = scope_Spectrum.getAbsoluteDistance(reference[handleNumber + 1], options.limit, true);\n            to = Math.max(to, distance);\n          }\n        }\n        // The padding option keeps the handles a certain distance from the\n        // edges of the slider. Padding must be > 0.\n        if (options.padding) {\n          if (handleNumber === 0) {\n            distance = scope_Spectrum.getAbsoluteDistance(0, options.padding[0], false);\n            to = Math.max(to, distance);\n          }\n          if (handleNumber === scope_Handles.length - 1) {\n            distance = scope_Spectrum.getAbsoluteDistance(100, options.padding[1], true);\n            to = Math.min(to, distance);\n          }\n        }\n        if (!smoothSteps) {\n          to = scope_Spectrum.getStep(to);\n        }\n        // Limit percentage to the 0 - 100 range\n        to = limit(to);\n        // Return false if handle can\'t move\n        if (to === reference[handleNumber] && !getValue) {\n          return false;\n        }\n        return to;\n      }\n      // Uses slider orientation to create CSS rules. a = base value;\n      function inRuleOrder(v, a) {\n        var o = options.ort;\n        return (o ? a : v) + ", " + (o ? v : a);\n      }\n      // Moves handle(s) by a percentage\n      // (bool, % to move, [% where handle started, ...], [index in scope_Handles, ...])\n      function moveHandles(upward, proposal, locations, handleNumbers, connect) {\n        var proposals = locations.slice();\n        // Store first handle now, so we still have it in case handleNumbers is reversed\n        var firstHandle = handleNumbers[0];\n        var smoothSteps = options.events.smoothSteps;\n        var b = [!upward, upward];\n        var f = [upward, !upward];\n        // Copy handleNumbers so we don\'t change the dataset\n        handleNumbers = handleNumbers.slice();\n        // Check to see which handle is \'leading\'.\n        // If that one can\'t move the second can\'t either.\n        if (upward) {\n          handleNumbers.reverse();\n        }\n        // Step 1: get the maximum percentage that any of the handles can move\n        if (handleNumbers.length > 1) {\n          handleNumbers.forEach(function (handleNumber, o) {\n            var to = checkHandlePosition(proposals, handleNumber, proposals[handleNumber] + proposal, b[o], f[o], false, smoothSteps);\n            // Stop if one of the handles can\'t move.\n            if (to === false) {\n              proposal = 0;\n            } else {\n              proposal = to - proposals[handleNumber];\n              proposals[handleNumber] = to;\n            }\n          });\n        }\n        // If using one handle, check backward AND forward\n        else {\n          b = f = [true];\n        }\n        var state = false;\n        // Step 2: Try to set the handles with the found percentage\n        handleNumbers.forEach(function (handleNumber, o) {\n          state = setHandle(handleNumber, locations[handleNumber] + proposal, b[o], f[o], false, smoothSteps) || state;\n        });\n        // Step 3: If a handle moved, fire events\n        if (state) {\n          handleNumbers.forEach(function (handleNumber) {\n            fireEvent("update", handleNumber);\n            fireEvent("slide", handleNumber);\n          });\n          // If target is a connect, then fire drag event\n          if (connect != undefined) {\n            fireEvent("drag", firstHandle);\n          }\n        }\n      }\n      // Takes a base value and an offset. This offset is used for the connect bar size.\n      // In the initial design for this feature, the origin element was 1% wide.\n      // Unfortunately, a rounding bug in Chrome makes it impossible to implement this feature\n      // in this manner: https://bugs.chromium.org/p/chromium/issues/detail?id=798223\n      function transformDirection(a, b) {\n        return options.dir ? 100 - a - b : a;\n      }\n      // Updates scope_Locations and scope_Values, updates visual state\n      function updateHandlePosition(handleNumber, to) {\n        // Update locations.\n        scope_Locations[handleNumber] = to;\n        // Convert the value to the slider stepping/range.\n        scope_Values[handleNumber] = scope_Spectrum.fromStepping(to);\n        var translation = transformDirection(to, 0) - scope_DirOffset;\n        var translateRule = "translate(" + inRuleOrder(translation + "%", "0") + ")";\n        scope_Handles[handleNumber].style[options.transformRule] = translateRule;\n        updateConnect(handleNumber);\n        updateConnect(handleNumber + 1);\n      }\n      // Handles before the slider middle are stacked later = higher,\n      // Handles after the middle later is lower\n      // [[7] [8] .......... | .......... [5] [4]\n      function setZindex() {\n        scope_HandleNumbers.forEach(function (handleNumber) {\n          var dir = scope_Locations[handleNumber] > 50 ? -1 : 1;\n          var zIndex = 3 + (scope_Handles.length + dir * handleNumber);\n          scope_Handles[handleNumber].style.zIndex = String(zIndex);\n        });\n      }\n      // Test suggested values and apply margin, step.\n      // if exactInput is true, don\'t run checkHandlePosition, then the handle can be placed in between steps (#436)\n      function setHandle(handleNumber, to, lookBackward, lookForward, exactInput, smoothSteps) {\n        if (!exactInput) {\n          to = checkHandlePosition(scope_Locations, handleNumber, to, lookBackward, lookForward, false, smoothSteps);\n        }\n        if (to === false) {\n          return false;\n        }\n        updateHandlePosition(handleNumber, to);\n        return true;\n      }\n      // Updates style attribute for connect nodes\n      function updateConnect(index) {\n        // Skip connects set to false\n        if (!scope_Connects[index]) {\n          return;\n        }\n        var l = 0;\n        var h = 100;\n        if (index !== 0) {\n          l = scope_Locations[index - 1];\n        }\n        if (index !== scope_Connects.length - 1) {\n          h = scope_Locations[index];\n        }\n        // We use two rules:\n        // \'translate\' to change the left/top offset;\n        // \'scale\' to change the width of the element;\n        // As the element has a width of 100%, a translation of 100% is equal to 100% of the parent (.noUi-base)\n        var connectWidth = h - l;\n        var translateRule = "translate(" + inRuleOrder(transformDirection(l, connectWidth) + "%", "0") + ")";\n        var scaleRule = "scale(" + inRuleOrder(connectWidth / 100, "1") + ")";\n        scope_Connects[index].style[options.transformRule] = translateRule + " " + scaleRule;\n      }\n      // Parses value passed to .set method. Returns current value if not parse-able.\n      function resolveToValue(to, handleNumber) {\n        // Setting with null indicates an \'ignore\'.\n        // Inputting \'false\' is invalid.\n        if (to === null || to === false || to === undefined) {\n          return scope_Locations[handleNumber];\n        }\n        // If a formatted number was passed, attempt to decode it.\n        if (typeof to === "number") {\n          to = String(to);\n        }\n        to = options.format.from(to);\n        if (to !== false) {\n          to = scope_Spectrum.toStepping(to);\n        }\n        // If parsing the number failed, use the current value.\n        if (to === false || isNaN(to)) {\n          return scope_Locations[handleNumber];\n        }\n        return to;\n      }\n      // Set the slider value.\n      function valueSet(input, fireSetEvent, exactInput) {\n        var values = asArray(input);\n        var isInit = scope_Locations[0] === undefined;\n        // Event fires by default\n        fireSetEvent = fireSetEvent === undefined ? true : fireSetEvent;\n        // Animation is optional.\n        // Make sure the initial values were set before using animated placement.\n        if (options.animate && !isInit) {\n          addClassFor(scope_Target, options.cssClasses.tap, options.animationDuration);\n        }\n        // First pass, without lookAhead but with lookBackward. Values are set from left to right.\n        scope_HandleNumbers.forEach(function (handleNumber) {\n          setHandle(handleNumber, resolveToValue(values[handleNumber], handleNumber), true, false, exactInput);\n        });\n        var i = scope_HandleNumbers.length === 1 ? 0 : 1;\n        // Spread handles evenly across the slider if the range has no size (min=max)\n        if (isInit && scope_Spectrum.hasNoSize()) {\n          exactInput = true;\n          scope_Locations[0] = 0;\n          if (scope_HandleNumbers.length > 1) {\n            var space_1 = 100 / (scope_HandleNumbers.length - 1);\n            scope_HandleNumbers.forEach(function (handleNumber) {\n              scope_Locations[handleNumber] = handleNumber * space_1;\n            });\n          }\n        }\n        // Secondary passes. Now that all base values are set, apply constraints.\n        // Iterate all handles to ensure constraints are applied for the entire slider (Issue #1009)\n        for (; i < scope_HandleNumbers.length; ++i) {\n          scope_HandleNumbers.forEach(function (handleNumber) {\n            setHandle(handleNumber, scope_Locations[handleNumber], true, true, exactInput);\n          });\n        }\n        setZindex();\n        scope_HandleNumbers.forEach(function (handleNumber) {\n          fireEvent("update", handleNumber);\n          // Fire the event only for handles that received a new value, as per #579\n          if (values[handleNumber] !== null && fireSetEvent) {\n            fireEvent("set", handleNumber);\n          }\n        });\n      }\n      // Reset slider to initial values\n      function valueReset(fireSetEvent) {\n        valueSet(options.start, fireSetEvent);\n      }\n      // Set value for a single handle\n      function valueSetHandle(handleNumber, value, fireSetEvent, exactInput) {\n        // Ensure numeric input\n        handleNumber = Number(handleNumber);\n        if (!(handleNumber >= 0 && handleNumber < scope_HandleNumbers.length)) {\n          throw new Error("noUiSlider: invalid handle number, got: " + handleNumber);\n        }\n        // Look both backward and forward, since we don\'t want this handle to "push" other handles (#960);\n        // The exactInput argument can be used to ignore slider stepping (#436)\n        setHandle(handleNumber, resolveToValue(value, handleNumber), true, true, exactInput);\n        fireEvent("update", handleNumber);\n        if (fireSetEvent) {\n          fireEvent("set", handleNumber);\n        }\n      }\n      // Get the slider value.\n      function valueGet(unencoded) {\n        if (unencoded === void 0) {\n          unencoded = false;\n        }\n        if (unencoded) {\n          // return a copy of the raw values\n          return scope_Values.length === 1 ? scope_Values[0] : scope_Values.slice(0);\n        }\n        var values = scope_Values.map(options.format.to);\n        // If only one handle is used, return a single value.\n        if (values.length === 1) {\n          return values[0];\n        }\n        return values;\n      }\n      // Removes classes from the root and empties it.\n      function destroy() {\n        // remove protected internal listeners\n        removeEvent(INTERNAL_EVENT_NS.aria);\n        removeEvent(INTERNAL_EVENT_NS.tooltips);\n        Object.keys(options.cssClasses).forEach(function (key) {\n          removeClass(scope_Target, options.cssClasses[key]);\n        });\n        while (scope_Target.firstChild) {\n          scope_Target.removeChild(scope_Target.firstChild);\n        }\n        delete scope_Target.noUiSlider;\n      }\n      function getNextStepsForHandle(handleNumber) {\n        var location = scope_Locations[handleNumber];\n        var nearbySteps = scope_Spectrum.getNearbySteps(location);\n        var value = scope_Values[handleNumber];\n        var increment = nearbySteps.thisStep.step;\n        var decrement = null;\n        // If snapped, directly use defined step value\n        if (options.snap) {\n          return [value - nearbySteps.stepBefore.startValue || null, nearbySteps.stepAfter.startValue - value || null];\n        }\n        // If the next value in this step moves into the next step,\n        // the increment is the start of the next step - the current value\n        if (increment !== false) {\n          if (value + increment > nearbySteps.stepAfter.startValue) {\n            increment = nearbySteps.stepAfter.startValue - value;\n          }\n        }\n        // If the value is beyond the starting point\n        if (value > nearbySteps.thisStep.startValue) {\n          decrement = nearbySteps.thisStep.step;\n        } else if (nearbySteps.stepBefore.step === false) {\n          decrement = false;\n        }\n        // If a handle is at the start of a step, it always steps back into the previous step first\n        else {\n          decrement = value - nearbySteps.stepBefore.highestStep;\n        }\n        // Now, if at the slider edges, there is no in/decrement\n        if (location === 100) {\n          increment = null;\n        } else if (location === 0) {\n          decrement = null;\n        }\n        // As per #391, the comparison for the decrement step can have some rounding issues.\n        var stepDecimals = scope_Spectrum.countStepDecimals();\n        // Round per #391\n        if (increment !== null && increment !== false) {\n          increment = Number(increment.toFixed(stepDecimals));\n        }\n        if (decrement !== null && decrement !== false) {\n          decrement = Number(decrement.toFixed(stepDecimals));\n        }\n        return [decrement, increment];\n      }\n      // Get the current step size for the slider.\n      function getNextSteps() {\n        return scope_HandleNumbers.map(getNextStepsForHandle);\n      }\n      // Updatable: margin, limit, padding, step, range, animate, snap\n      function updateOptions(optionsToUpdate, fireSetEvent) {\n        // Spectrum is created using the range, snap, direction and step options.\n        // \'snap\' and \'step\' can be updated.\n        // If \'snap\' and \'step\' are not passed, they should remain unchanged.\n        var v = valueGet();\n        var updateAble = ["margin", "limit", "padding", "range", "animate", "snap", "step", "format", "pips", "tooltips"];\n        // Only change options that we\'re actually passed to update.\n        updateAble.forEach(function (name) {\n          // Check for undefined. null removes the value.\n          if (optionsToUpdate[name] !== undefined) {\n            originalOptions[name] = optionsToUpdate[name];\n          }\n        });\n        var newOptions = testOptions(originalOptions);\n        // Load new options into the slider state\n        updateAble.forEach(function (name) {\n          if (optionsToUpdate[name] !== undefined) {\n            options[name] = newOptions[name];\n          }\n        });\n        scope_Spectrum = newOptions.spectrum;\n        // Limit, margin and padding depend on the spectrum but are stored outside of it. (#677)\n        options.margin = newOptions.margin;\n        options.limit = newOptions.limit;\n        options.padding = newOptions.padding;\n        // Update pips, removes existing.\n        if (options.pips) {\n          pips(options.pips);\n        } else {\n          removePips();\n        }\n        // Update tooltips, removes existing.\n        if (options.tooltips) {\n          tooltips();\n        } else {\n          removeTooltips();\n        }\n        // Invalidate the current positioning so valueSet forces an update.\n        scope_Locations = [];\n        valueSet(isSet(optionsToUpdate.start) ? optionsToUpdate.start : v, fireSetEvent);\n      }\n      // Initialization steps\n      function setupSlider() {\n        // Create the base element, initialize HTML and set classes.\n        // Add handles and connect elements.\n        scope_Base = addSlider(scope_Target);\n        addElements(options.connect, scope_Base);\n        // Attach user events.\n        bindSliderEvents(options.events);\n        // Use the public value method to set the start values.\n        valueSet(options.start);\n        if (options.pips) {\n          pips(options.pips);\n        }\n        if (options.tooltips) {\n          tooltips();\n        }\n        aria();\n      }\n      setupSlider();\n      var scope_Self = {\n        destroy: destroy,\n        steps: getNextSteps,\n        on: bindEvent,\n        off: removeEvent,\n        get: valueGet,\n        set: valueSet,\n        setHandle: valueSetHandle,\n        reset: valueReset,\n        disable: disable,\n        enable: enable,\n        // Exposed for unit testing, don\'t use this in your application.\n        __moveHandles: function __moveHandles(upward, proposal, handleNumbers) {\n          moveHandles(upward, proposal, scope_Locations, handleNumbers);\n        },\n        options: originalOptions,\n        updateOptions: updateOptions,\n        target: scope_Target,\n        removePips: removePips,\n        removeTooltips: removeTooltips,\n        getPositions: function getPositions() {\n          return scope_Locations.slice();\n        },\n        getTooltips: function getTooltips() {\n          return scope_Tooltips;\n        },\n        getOrigins: function getOrigins() {\n          return scope_Handles;\n        },\n        pips: pips // Issue #594\n      };\n\n      return scope_Self;\n    }\n    // Run the standard initializer\n    function initialize(target, originalOptions) {\n      if (!target || !target.nodeName) {\n        throw new Error("noUiSlider: create requires a single element, got: " + target);\n      }\n      // Throw an error if the slider was already initialized.\n      if (target.noUiSlider) {\n        throw new Error("noUiSlider: Slider was already initialized.");\n      }\n      // Test the options and create the slider environment;\n      var options = testOptions(originalOptions);\n      var api = scope(target, options, originalOptions);\n      target.noUiSlider = api;\n      return api;\n    }\n    var nouislider = {\n      // Exposed for unit testing, don\'t use this in your application.\n      __spectrum: Spectrum,\n      // A reference to the default classes, allows global changes.\n      // Use the cssClasses option for changes to one slider.\n      cssClasses: cssClasses,\n      create: initialize\n    };\n    exports.create = initialize;\n    exports.cssClasses = cssClasses;\n    exports["default"] = nouislider;\n    Object.defineProperty(exports, \'__esModule\', {\n      value: true\n    });\n  });\n};\n/* harmony default export */ __webpack_exports__["default"] = (nouislider());\n\n//# sourceURL=webpack:///./js/vendor/nouislider.js?')},"./js/vendor/swiper.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {var _this = undefined;\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nvar swiper = function swiper() {\n  /**\n   * Swiper 5.3.6\n   * Most modern mobile touch slider and framework with hardware accelerated transitions\n   * http://swiperjs.com\n   *\n   * Copyright 2014-2020 Vladimir Kharlampidi\n   *\n   * Released under the MIT License\n   *\n   * Released on: February 29, 2020\n   */\n\n  (function (global, factory) {\n    (typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && __webpack_require__(/*! !webpack amd options */ \"../node_modules/webpack/buildin/amd-options.js\") ? define(factory) : (global = global || self, global.Swiper = factory());\n  })(_this, function () {\n    'use strict';\n\n    /**\n     * SSR Window 1.0.1\n     * Better handling for window object in SSR environment\n     * https://github.com/nolimits4web/ssr-window\n     *\n     * Copyright 2018, Vladimir Kharlampidi\n     *\n     * Licensed under MIT\n     *\n     * Released on: July 18, 2018\n     */\n    var doc = typeof document === 'undefined' ? {\n      body: {},\n      addEventListener: function addEventListener() {},\n      removeEventListener: function removeEventListener() {},\n      activeElement: {\n        blur: function blur() {},\n        nodeName: ''\n      },\n      querySelector: function querySelector() {\n        return null;\n      },\n      querySelectorAll: function querySelectorAll() {\n        return [];\n      },\n      getElementById: function getElementById() {\n        return null;\n      },\n      createEvent: function createEvent() {\n        return {\n          initEvent: function initEvent() {}\n        };\n      },\n      createElement: function createElement() {\n        return {\n          children: [],\n          childNodes: [],\n          style: {},\n          setAttribute: function setAttribute() {},\n          getElementsByTagName: function getElementsByTagName() {\n            return [];\n          }\n        };\n      },\n      location: {\n        hash: ''\n      }\n    } : document; // eslint-disable-line\n\n    var win = typeof window === 'undefined' ? {\n      document: doc,\n      navigator: {\n        userAgent: ''\n      },\n      location: {},\n      history: {},\n      CustomEvent: function CustomEvent() {\n        return this;\n      },\n      addEventListener: function addEventListener() {},\n      removeEventListener: function removeEventListener() {},\n      getComputedStyle: function getComputedStyle() {\n        return {\n          getPropertyValue: function getPropertyValue() {\n            return '';\n          }\n        };\n      },\n      Image: function Image() {},\n      Date: function Date() {},\n      screen: {},\n      setTimeout: function setTimeout() {},\n      clearTimeout: function clearTimeout() {}\n    } : window; // eslint-disable-line\n\n    /**\n     * Dom7 2.1.3\n     * Minimalistic JavaScript library for DOM manipulation, with a jQuery-compatible API\n     * http://framework7.io/docs/dom.html\n     *\n     * Copyright 2019, Vladimir Kharlampidi\n     * The iDangero.us\n     * http://www.idangero.us/\n     *\n     * Licensed under MIT\n     *\n     * Released on: February 11, 2019\n     */\n\n    var Dom7 = function Dom7(arr) {\n      var self = this;\n      // Create array-like object\n      for (var i = 0; i < arr.length; i += 1) {\n        self[i] = arr[i];\n      }\n      self.length = arr.length;\n      // Return collection with methods\n      return this;\n    };\n    function $(selector, context) {\n      var arr = [];\n      var i = 0;\n      if (selector && !context) {\n        if (selector instanceof Dom7) {\n          return selector;\n        }\n      }\n      if (selector) {\n        // String\n        if (typeof selector === 'string') {\n          var els;\n          var tempParent;\n          var html = selector.trim();\n          if (html.indexOf('<') >= 0 && html.indexOf('>') >= 0) {\n            var toCreate = 'div';\n            if (html.indexOf('<li') === 0) {\n              toCreate = 'ul';\n            }\n            if (html.indexOf('<tr') === 0) {\n              toCreate = 'tbody';\n            }\n            if (html.indexOf('<td') === 0 || html.indexOf('<th') === 0) {\n              toCreate = 'tr';\n            }\n            if (html.indexOf('<tbody') === 0) {\n              toCreate = 'table';\n            }\n            if (html.indexOf('<option') === 0) {\n              toCreate = 'select';\n            }\n            tempParent = doc.createElement(toCreate);\n            tempParent.innerHTML = html;\n            for (i = 0; i < tempParent.childNodes.length; i += 1) {\n              arr.push(tempParent.childNodes[i]);\n            }\n          } else {\n            if (!context && selector[0] === '#' && !selector.match(/[ .<>:~]/)) {\n              // Pure ID selector\n              els = [doc.getElementById(selector.trim().split('#')[1])];\n            } else {\n              // Other selectors\n              els = (context || doc).querySelectorAll(selector.trim());\n            }\n            for (i = 0; i < els.length; i += 1) {\n              if (els[i]) {\n                arr.push(els[i]);\n              }\n            }\n          }\n        } else if (selector.nodeType || selector === win || selector === doc) {\n          // Node/element\n          arr.push(selector);\n        } else if (selector.length > 0 && selector[0].nodeType) {\n          // Array of elements or instance of Dom\n          for (i = 0; i < selector.length; i += 1) {\n            arr.push(selector[i]);\n          }\n        }\n      }\n      return new Dom7(arr);\n    }\n    $.fn = Dom7.prototype;\n    $.Class = Dom7;\n    $.Dom7 = Dom7;\n    function unique(arr) {\n      var uniqueArray = [];\n      for (var i = 0; i < arr.length; i += 1) {\n        if (uniqueArray.indexOf(arr[i]) === -1) {\n          uniqueArray.push(arr[i]);\n        }\n      }\n      return uniqueArray;\n    }\n\n    // Classes and attributes\n    function addClass(className) {\n      if (typeof className === 'undefined') {\n        return this;\n      }\n      var classes = className.split(' ');\n      for (var i = 0; i < classes.length; i += 1) {\n        for (var j = 0; j < this.length; j += 1) {\n          if (typeof this[j] !== 'undefined' && typeof this[j].classList !== 'undefined') {\n            this[j].classList.add(classes[i]);\n          }\n        }\n      }\n      return this;\n    }\n    function removeClass(className) {\n      var classes = className.split(' ');\n      for (var i = 0; i < classes.length; i += 1) {\n        for (var j = 0; j < this.length; j += 1) {\n          if (typeof this[j] !== 'undefined' && typeof this[j].classList !== 'undefined') {\n            this[j].classList.remove(classes[i]);\n          }\n        }\n      }\n      return this;\n    }\n    function hasClass(className) {\n      if (!this[0]) {\n        return false;\n      }\n      return this[0].classList.contains(className);\n    }\n    function toggleClass(className) {\n      var classes = className.split(' ');\n      for (var i = 0; i < classes.length; i += 1) {\n        for (var j = 0; j < this.length; j += 1) {\n          if (typeof this[j] !== 'undefined' && typeof this[j].classList !== 'undefined') {\n            this[j].classList.toggle(classes[i]);\n          }\n        }\n      }\n      return this;\n    }\n    function attr(attrs, value) {\n      var arguments$1 = arguments;\n      if (arguments.length === 1 && typeof attrs === 'string') {\n        // Get attr\n        if (this[0]) {\n          return this[0].getAttribute(attrs);\n        }\n        return undefined;\n      }\n\n      // Set attrs\n      for (var i = 0; i < this.length; i += 1) {\n        if (arguments$1.length === 2) {\n          // String\n          this[i].setAttribute(attrs, value);\n        } else {\n          // Object\n          // eslint-disable-next-line\n          for (var attrName in attrs) {\n            this[i][attrName] = attrs[attrName];\n            this[i].setAttribute(attrName, attrs[attrName]);\n          }\n        }\n      }\n      return this;\n    }\n    // eslint-disable-next-line\n    function removeAttr(attr) {\n      for (var i = 0; i < this.length; i += 1) {\n        this[i].removeAttribute(attr);\n      }\n      return this;\n    }\n    function data(key, value) {\n      var el;\n      if (typeof value === 'undefined') {\n        el = this[0];\n        // Get value\n        if (el) {\n          if (el.dom7ElementDataStorage && key in el.dom7ElementDataStorage) {\n            return el.dom7ElementDataStorage[key];\n          }\n          var dataKey = el.getAttribute(\"data-\" + key);\n          if (dataKey) {\n            return dataKey;\n          }\n          return undefined;\n        }\n        return undefined;\n      }\n\n      // Set value\n      for (var i = 0; i < this.length; i += 1) {\n        el = this[i];\n        if (!el.dom7ElementDataStorage) {\n          el.dom7ElementDataStorage = {};\n        }\n        el.dom7ElementDataStorage[key] = value;\n      }\n      return this;\n    }\n    // Transforms\n    // eslint-disable-next-line\n    function transform(transform) {\n      for (var i = 0; i < this.length; i += 1) {\n        var elStyle = this[i].style;\n        elStyle.webkitTransform = transform;\n        elStyle.transform = transform;\n      }\n      return this;\n    }\n    function transition(duration) {\n      if (typeof duration !== 'string') {\n        duration = duration + \"ms\"; // eslint-disable-line\n      }\n\n      for (var i = 0; i < this.length; i += 1) {\n        var elStyle = this[i].style;\n        elStyle.webkitTransitionDuration = duration;\n        elStyle.transitionDuration = duration;\n      }\n      return this;\n    }\n    // Events\n    function on() {\n      var assign;\n      var args = [],\n        len = arguments.length;\n      while (len--) args[len] = arguments[len];\n      var eventType = args[0];\n      var targetSelector = args[1];\n      var listener = args[2];\n      var capture = args[3];\n      if (typeof args[1] === 'function') {\n        assign = args, eventType = assign[0], listener = assign[1], capture = assign[2];\n        targetSelector = undefined;\n      }\n      if (!capture) {\n        capture = false;\n      }\n      function handleLiveEvent(e) {\n        var target = e.target;\n        if (!target) {\n          return;\n        }\n        var eventData = e.target.dom7EventData || [];\n        if (eventData.indexOf(e) < 0) {\n          eventData.unshift(e);\n        }\n        if ($(target).is(targetSelector)) {\n          listener.apply(target, eventData);\n        } else {\n          var parents = $(target).parents(); // eslint-disable-line\n          for (var k = 0; k < parents.length; k += 1) {\n            if ($(parents[k]).is(targetSelector)) {\n              listener.apply(parents[k], eventData);\n            }\n          }\n        }\n      }\n      function handleEvent(e) {\n        var eventData = e && e.target ? e.target.dom7EventData || [] : [];\n        if (eventData.indexOf(e) < 0) {\n          eventData.unshift(e);\n        }\n        listener.apply(this, eventData);\n      }\n      var events = eventType.split(' ');\n      var j;\n      for (var i = 0; i < this.length; i += 1) {\n        var el = this[i];\n        if (!targetSelector) {\n          for (j = 0; j < events.length; j += 1) {\n            var event = events[j];\n            if (!el.dom7Listeners) {\n              el.dom7Listeners = {};\n            }\n            if (!el.dom7Listeners[event]) {\n              el.dom7Listeners[event] = [];\n            }\n            el.dom7Listeners[event].push({\n              listener: listener,\n              proxyListener: handleEvent\n            });\n            el.addEventListener(event, handleEvent, capture);\n          }\n        } else {\n          // Live events\n          for (j = 0; j < events.length; j += 1) {\n            var event$1 = events[j];\n            if (!el.dom7LiveListeners) {\n              el.dom7LiveListeners = {};\n            }\n            if (!el.dom7LiveListeners[event$1]) {\n              el.dom7LiveListeners[event$1] = [];\n            }\n            el.dom7LiveListeners[event$1].push({\n              listener: listener,\n              proxyListener: handleLiveEvent\n            });\n            el.addEventListener(event$1, handleLiveEvent, capture);\n          }\n        }\n      }\n      return this;\n    }\n    function off() {\n      var assign;\n      var args = [],\n        len = arguments.length;\n      while (len--) args[len] = arguments[len];\n      var eventType = args[0];\n      var targetSelector = args[1];\n      var listener = args[2];\n      var capture = args[3];\n      if (typeof args[1] === 'function') {\n        assign = args, eventType = assign[0], listener = assign[1], capture = assign[2];\n        targetSelector = undefined;\n      }\n      if (!capture) {\n        capture = false;\n      }\n      var events = eventType.split(' ');\n      for (var i = 0; i < events.length; i += 1) {\n        var event = events[i];\n        for (var j = 0; j < this.length; j += 1) {\n          var el = this[j];\n          var handlers = void 0;\n          if (!targetSelector && el.dom7Listeners) {\n            handlers = el.dom7Listeners[event];\n          } else if (targetSelector && el.dom7LiveListeners) {\n            handlers = el.dom7LiveListeners[event];\n          }\n          if (handlers && handlers.length) {\n            for (var k = handlers.length - 1; k >= 0; k -= 1) {\n              var handler = handlers[k];\n              if (listener && handler.listener === listener) {\n                el.removeEventListener(event, handler.proxyListener, capture);\n                handlers.splice(k, 1);\n              } else if (listener && handler.listener && handler.listener.dom7proxy && handler.listener.dom7proxy === listener) {\n                el.removeEventListener(event, handler.proxyListener, capture);\n                handlers.splice(k, 1);\n              } else if (!listener) {\n                el.removeEventListener(event, handler.proxyListener, capture);\n                handlers.splice(k, 1);\n              }\n            }\n          }\n        }\n      }\n      return this;\n    }\n    function trigger() {\n      var args = [],\n        len = arguments.length;\n      while (len--) args[len] = arguments[len];\n      var events = args[0].split(' ');\n      var eventData = args[1];\n      for (var i = 0; i < events.length; i += 1) {\n        var event = events[i];\n        for (var j = 0; j < this.length; j += 1) {\n          var el = this[j];\n          var evt = void 0;\n          try {\n            evt = new win.CustomEvent(event, {\n              detail: eventData,\n              bubbles: true,\n              cancelable: true\n            });\n          } catch (e) {\n            evt = doc.createEvent('Event');\n            evt.initEvent(event, true, true);\n            evt.detail = eventData;\n          }\n          // eslint-disable-next-line\n          el.dom7EventData = args.filter(function (data, dataIndex) {\n            return dataIndex > 0;\n          });\n          el.dispatchEvent(evt);\n          el.dom7EventData = [];\n          delete el.dom7EventData;\n        }\n      }\n      return this;\n    }\n    function transitionEnd(callback) {\n      var events = ['webkitTransitionEnd', 'transitionend'];\n      var dom = this;\n      var i;\n      function fireCallBack(e) {\n        /* jshint validthis:true */\n        if (e.target !== this) {\n          return;\n        }\n        callback.call(this, e);\n        for (i = 0; i < events.length; i += 1) {\n          dom.off(events[i], fireCallBack);\n        }\n      }\n      if (callback) {\n        for (i = 0; i < events.length; i += 1) {\n          dom.on(events[i], fireCallBack);\n        }\n      }\n      return this;\n    }\n    function outerWidth(includeMargins) {\n      if (this.length > 0) {\n        if (includeMargins) {\n          // eslint-disable-next-line\n          var styles = this.styles();\n          return this[0].offsetWidth + parseFloat(styles.getPropertyValue('margin-right')) + parseFloat(styles.getPropertyValue('margin-left'));\n        }\n        return this[0].offsetWidth;\n      }\n      return null;\n    }\n    function outerHeight(includeMargins) {\n      if (this.length > 0) {\n        if (includeMargins) {\n          // eslint-disable-next-line\n          var styles = this.styles();\n          return this[0].offsetHeight + parseFloat(styles.getPropertyValue('margin-top')) + parseFloat(styles.getPropertyValue('margin-bottom'));\n        }\n        return this[0].offsetHeight;\n      }\n      return null;\n    }\n    function offset() {\n      if (this.length > 0) {\n        var el = this[0];\n        var box = el.getBoundingClientRect();\n        var body = doc.body;\n        var clientTop = el.clientTop || body.clientTop || 0;\n        var clientLeft = el.clientLeft || body.clientLeft || 0;\n        var scrollTop = el === win ? win.scrollY : el.scrollTop;\n        var scrollLeft = el === win ? win.scrollX : el.scrollLeft;\n        return {\n          top: box.top + scrollTop - clientTop,\n          left: box.left + scrollLeft - clientLeft\n        };\n      }\n      return null;\n    }\n    function styles() {\n      if (this[0]) {\n        return win.getComputedStyle(this[0], null);\n      }\n      return {};\n    }\n    function css(props, value) {\n      var i;\n      if (arguments.length === 1) {\n        if (typeof props === 'string') {\n          if (this[0]) {\n            return win.getComputedStyle(this[0], null).getPropertyValue(props);\n          }\n        } else {\n          for (i = 0; i < this.length; i += 1) {\n            // eslint-disable-next-line\n            for (var prop in props) {\n              this[i].style[prop] = props[prop];\n            }\n          }\n          return this;\n        }\n      }\n      if (arguments.length === 2 && typeof props === 'string') {\n        for (i = 0; i < this.length; i += 1) {\n          this[i].style[props] = value;\n        }\n        return this;\n      }\n      return this;\n    }\n    // Iterate over the collection passing elements to `callback`\n    function each(callback) {\n      // Don't bother continuing without a callback\n      if (!callback) {\n        return this;\n      }\n      // Iterate over the current collection\n      for (var i = 0; i < this.length; i += 1) {\n        // If the callback returns false\n        if (callback.call(this[i], i, this[i]) === false) {\n          // End the loop early\n          return this;\n        }\n      }\n      // Return `this` to allow chained DOM operations\n      return this;\n    }\n    function filter(callback) {\n      var matchedItems = [];\n      var dom = this;\n      for (var i = 0; i < dom.length; i += 1) {\n        if (callback.call(dom[i], i, dom[i])) {\n          matchedItems.push(dom[i]);\n        }\n      }\n      return new Dom7(matchedItems);\n    }\n    // eslint-disable-next-line\n    function html(html) {\n      if (typeof html === 'undefined') {\n        return this[0] ? this[0].innerHTML : undefined;\n      }\n      for (var i = 0; i < this.length; i += 1) {\n        this[i].innerHTML = html;\n      }\n      return this;\n    }\n    // eslint-disable-next-line\n    function text(text) {\n      if (typeof text === 'undefined') {\n        if (this[0]) {\n          return this[0].textContent.trim();\n        }\n        return null;\n      }\n      for (var i = 0; i < this.length; i += 1) {\n        this[i].textContent = text;\n      }\n      return this;\n    }\n    function is(selector) {\n      var el = this[0];\n      var compareWith;\n      var i;\n      if (!el || typeof selector === 'undefined') {\n        return false;\n      }\n      if (typeof selector === 'string') {\n        if (el.matches) {\n          return el.matches(selector);\n        } else if (el.webkitMatchesSelector) {\n          return el.webkitMatchesSelector(selector);\n        } else if (el.msMatchesSelector) {\n          return el.msMatchesSelector(selector);\n        }\n        compareWith = $(selector);\n        for (i = 0; i < compareWith.length; i += 1) {\n          if (compareWith[i] === el) {\n            return true;\n          }\n        }\n        return false;\n      } else if (selector === doc) {\n        return el === doc;\n      } else if (selector === win) {\n        return el === win;\n      }\n      if (selector.nodeType || selector instanceof Dom7) {\n        compareWith = selector.nodeType ? [selector] : selector;\n        for (i = 0; i < compareWith.length; i += 1) {\n          if (compareWith[i] === el) {\n            return true;\n          }\n        }\n        return false;\n      }\n      return false;\n    }\n    function index() {\n      var child = this[0];\n      var i;\n      if (child) {\n        i = 0;\n        // eslint-disable-next-line\n        while ((child = child.previousSibling) !== null) {\n          if (child.nodeType === 1) {\n            i += 1;\n          }\n        }\n        return i;\n      }\n      return undefined;\n    }\n    // eslint-disable-next-line\n    function eq(index) {\n      if (typeof index === 'undefined') {\n        return this;\n      }\n      var length = this.length;\n      var returnIndex;\n      if (index > length - 1) {\n        return new Dom7([]);\n      }\n      if (index < 0) {\n        returnIndex = length + index;\n        if (returnIndex < 0) {\n          return new Dom7([]);\n        }\n        return new Dom7([this[returnIndex]]);\n      }\n      return new Dom7([this[index]]);\n    }\n    function append() {\n      var args = [],\n        len = arguments.length;\n      while (len--) args[len] = arguments[len];\n      var newChild;\n      for (var k = 0; k < args.length; k += 1) {\n        newChild = args[k];\n        for (var i = 0; i < this.length; i += 1) {\n          if (typeof newChild === 'string') {\n            var tempDiv = doc.createElement('div');\n            tempDiv.innerHTML = newChild;\n            while (tempDiv.firstChild) {\n              this[i].appendChild(tempDiv.firstChild);\n            }\n          } else if (newChild instanceof Dom7) {\n            for (var j = 0; j < newChild.length; j += 1) {\n              this[i].appendChild(newChild[j]);\n            }\n          } else {\n            this[i].appendChild(newChild);\n          }\n        }\n      }\n      return this;\n    }\n    function prepend(newChild) {\n      var i;\n      var j;\n      for (i = 0; i < this.length; i += 1) {\n        if (typeof newChild === 'string') {\n          var tempDiv = doc.createElement('div');\n          tempDiv.innerHTML = newChild;\n          for (j = tempDiv.childNodes.length - 1; j >= 0; j -= 1) {\n            this[i].insertBefore(tempDiv.childNodes[j], this[i].childNodes[0]);\n          }\n        } else if (newChild instanceof Dom7) {\n          for (j = 0; j < newChild.length; j += 1) {\n            this[i].insertBefore(newChild[j], this[i].childNodes[0]);\n          }\n        } else {\n          this[i].insertBefore(newChild, this[i].childNodes[0]);\n        }\n      }\n      return this;\n    }\n    function next(selector) {\n      if (this.length > 0) {\n        if (selector) {\n          if (this[0].nextElementSibling && $(this[0].nextElementSibling).is(selector)) {\n            return new Dom7([this[0].nextElementSibling]);\n          }\n          return new Dom7([]);\n        }\n        if (this[0].nextElementSibling) {\n          return new Dom7([this[0].nextElementSibling]);\n        }\n        return new Dom7([]);\n      }\n      return new Dom7([]);\n    }\n    function nextAll(selector) {\n      var nextEls = [];\n      var el = this[0];\n      if (!el) {\n        return new Dom7([]);\n      }\n      while (el.nextElementSibling) {\n        var next = el.nextElementSibling; // eslint-disable-line\n        if (selector) {\n          if ($(next).is(selector)) {\n            nextEls.push(next);\n          }\n        } else {\n          nextEls.push(next);\n        }\n        el = next;\n      }\n      return new Dom7(nextEls);\n    }\n    function prev(selector) {\n      if (this.length > 0) {\n        var el = this[0];\n        if (selector) {\n          if (el.previousElementSibling && $(el.previousElementSibling).is(selector)) {\n            return new Dom7([el.previousElementSibling]);\n          }\n          return new Dom7([]);\n        }\n        if (el.previousElementSibling) {\n          return new Dom7([el.previousElementSibling]);\n        }\n        return new Dom7([]);\n      }\n      return new Dom7([]);\n    }\n    function prevAll(selector) {\n      var prevEls = [];\n      var el = this[0];\n      if (!el) {\n        return new Dom7([]);\n      }\n      while (el.previousElementSibling) {\n        var prev = el.previousElementSibling; // eslint-disable-line\n        if (selector) {\n          if ($(prev).is(selector)) {\n            prevEls.push(prev);\n          }\n        } else {\n          prevEls.push(prev);\n        }\n        el = prev;\n      }\n      return new Dom7(prevEls);\n    }\n    function parent(selector) {\n      var parents = []; // eslint-disable-line\n      for (var i = 0; i < this.length; i += 1) {\n        if (this[i].parentNode !== null) {\n          if (selector) {\n            if ($(this[i].parentNode).is(selector)) {\n              parents.push(this[i].parentNode);\n            }\n          } else {\n            parents.push(this[i].parentNode);\n          }\n        }\n      }\n      return $(unique(parents));\n    }\n    function parents(selector) {\n      var parents = []; // eslint-disable-line\n      for (var i = 0; i < this.length; i += 1) {\n        var parent = this[i].parentNode; // eslint-disable-line\n        while (parent) {\n          if (selector) {\n            if ($(parent).is(selector)) {\n              parents.push(parent);\n            }\n          } else {\n            parents.push(parent);\n          }\n          parent = parent.parentNode;\n        }\n      }\n      return $(unique(parents));\n    }\n    function closest(selector) {\n      var closest = this; // eslint-disable-line\n      if (typeof selector === 'undefined') {\n        return new Dom7([]);\n      }\n      if (!closest.is(selector)) {\n        closest = closest.parents(selector).eq(0);\n      }\n      return closest;\n    }\n    function find(selector) {\n      var foundElements = [];\n      for (var i = 0; i < this.length; i += 1) {\n        var found = this[i].querySelectorAll(selector);\n        for (var j = 0; j < found.length; j += 1) {\n          foundElements.push(found[j]);\n        }\n      }\n      return new Dom7(foundElements);\n    }\n    function children(selector) {\n      var children = []; // eslint-disable-line\n      for (var i = 0; i < this.length; i += 1) {\n        var childNodes = this[i].childNodes;\n        for (var j = 0; j < childNodes.length; j += 1) {\n          if (!selector) {\n            if (childNodes[j].nodeType === 1) {\n              children.push(childNodes[j]);\n            }\n          } else if (childNodes[j].nodeType === 1 && $(childNodes[j]).is(selector)) {\n            children.push(childNodes[j]);\n          }\n        }\n      }\n      return new Dom7(unique(children));\n    }\n    function remove() {\n      for (var i = 0; i < this.length; i += 1) {\n        if (this[i].parentNode) {\n          this[i].parentNode.removeChild(this[i]);\n        }\n      }\n      return this;\n    }\n    function add() {\n      var args = [],\n        len = arguments.length;\n      while (len--) args[len] = arguments[len];\n      var dom = this;\n      var i;\n      var j;\n      for (i = 0; i < args.length; i += 1) {\n        var toAdd = $(args[i]);\n        for (j = 0; j < toAdd.length; j += 1) {\n          dom[dom.length] = toAdd[j];\n          dom.length += 1;\n        }\n      }\n      return dom;\n    }\n    var Methods = {\n      addClass: addClass,\n      removeClass: removeClass,\n      hasClass: hasClass,\n      toggleClass: toggleClass,\n      attr: attr,\n      removeAttr: removeAttr,\n      data: data,\n      transform: transform,\n      transition: transition,\n      on: on,\n      off: off,\n      trigger: trigger,\n      transitionEnd: transitionEnd,\n      outerWidth: outerWidth,\n      outerHeight: outerHeight,\n      offset: offset,\n      css: css,\n      each: each,\n      html: html,\n      text: text,\n      is: is,\n      index: index,\n      eq: eq,\n      append: append,\n      prepend: prepend,\n      next: next,\n      nextAll: nextAll,\n      prev: prev,\n      prevAll: prevAll,\n      parent: parent,\n      parents: parents,\n      closest: closest,\n      find: find,\n      children: children,\n      filter: filter,\n      remove: remove,\n      add: add,\n      styles: styles\n    };\n    Object.keys(Methods).forEach(function (methodName) {\n      $.fn[methodName] = $.fn[methodName] || Methods[methodName];\n    });\n    var Utils = {\n      deleteProps: function deleteProps(obj) {\n        var object = obj;\n        Object.keys(object).forEach(function (key) {\n          try {\n            object[key] = null;\n          } catch (e) {\n            // no getter for object\n          }\n          try {\n            delete object[key];\n          } catch (e) {\n            // something got wrong\n          }\n        });\n      },\n      nextTick: function nextTick(callback, delay) {\n        if (delay === void 0) delay = 0;\n        return setTimeout(callback, delay);\n      },\n      now: function now() {\n        return Date.now();\n      },\n      getTranslate: function getTranslate(el, axis) {\n        if (axis === void 0) axis = 'x';\n        var matrix;\n        var curTransform;\n        var transformMatrix;\n        var curStyle = win.getComputedStyle(el, null);\n        if (win.WebKitCSSMatrix) {\n          curTransform = curStyle.transform || curStyle.webkitTransform;\n          if (curTransform.split(',').length > 6) {\n            curTransform = curTransform.split(', ').map(function (a) {\n              return a.replace(',', '.');\n            }).join(', ');\n          }\n          // Some old versions of Webkit choke when 'none' is passed; pass\n          // empty string instead in this case\n          transformMatrix = new win.WebKitCSSMatrix(curTransform === 'none' ? '' : curTransform);\n        } else {\n          transformMatrix = curStyle.MozTransform || curStyle.OTransform || curStyle.MsTransform || curStyle.msTransform || curStyle.transform || curStyle.getPropertyValue('transform').replace('translate(', 'matrix(1, 0, 0, 1,');\n          matrix = transformMatrix.toString().split(',');\n        }\n        if (axis === 'x') {\n          // Latest Chrome and webkits Fix\n          if (win.WebKitCSSMatrix) {\n            curTransform = transformMatrix.m41;\n          }\n          // Crazy IE10 Matrix\n          else if (matrix.length === 16) {\n            curTransform = parseFloat(matrix[12]);\n          }\n          // Normal Browsers\n          else {\n            curTransform = parseFloat(matrix[4]);\n          }\n        }\n        if (axis === 'y') {\n          // Latest Chrome and webkits Fix\n          if (win.WebKitCSSMatrix) {\n            curTransform = transformMatrix.m42;\n          }\n          // Crazy IE10 Matrix\n          else if (matrix.length === 16) {\n            curTransform = parseFloat(matrix[13]);\n          }\n          // Normal Browsers\n          else {\n            curTransform = parseFloat(matrix[5]);\n          }\n        }\n        return curTransform || 0;\n      },\n      parseUrlQuery: function parseUrlQuery(url) {\n        var query = {};\n        var urlToParse = url || win.location.href;\n        var i;\n        var params;\n        var param;\n        var length;\n        if (typeof urlToParse === 'string' && urlToParse.length) {\n          urlToParse = urlToParse.indexOf('?') > -1 ? urlToParse.replace(/\\S*\\?/, '') : '';\n          params = urlToParse.split('&').filter(function (paramsPart) {\n            return paramsPart !== '';\n          });\n          length = params.length;\n          for (i = 0; i < length; i += 1) {\n            param = params[i].replace(/#\\S+/g, '').split('=');\n            query[decodeURIComponent(param[0])] = typeof param[1] === 'undefined' ? undefined : decodeURIComponent(param[1]) || '';\n          }\n        }\n        return query;\n      },\n      isObject: function isObject(o) {\n        return _typeof(o) === 'object' && o !== null && o.constructor && o.constructor === Object;\n      },\n      extend: function extend() {\n        var args = [],\n          len$1 = arguments.length;\n        while (len$1--) args[len$1] = arguments[len$1];\n        var to = Object(args[0]);\n        for (var i = 1; i < args.length; i += 1) {\n          var nextSource = args[i];\n          if (nextSource !== undefined && nextSource !== null) {\n            var keysArray = Object.keys(Object(nextSource));\n            for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex += 1) {\n              var nextKey = keysArray[nextIndex];\n              var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n              if (desc !== undefined && desc.enumerable) {\n                if (Utils.isObject(to[nextKey]) && Utils.isObject(nextSource[nextKey])) {\n                  Utils.extend(to[nextKey], nextSource[nextKey]);\n                } else if (!Utils.isObject(to[nextKey]) && Utils.isObject(nextSource[nextKey])) {\n                  to[nextKey] = {};\n                  Utils.extend(to[nextKey], nextSource[nextKey]);\n                } else {\n                  to[nextKey] = nextSource[nextKey];\n                }\n              }\n            }\n          }\n        }\n        return to;\n      }\n    };\n    var Support = function Support() {\n      return {\n        touch: win.Modernizr && win.Modernizr.touch === true || function checkTouch() {\n          return !!(win.navigator.maxTouchPoints > 0 || 'ontouchstart' in win || win.DocumentTouch && doc instanceof win.DocumentTouch);\n        }(),\n        pointerEvents: !!win.PointerEvent && 'maxTouchPoints' in win.navigator && win.navigator.maxTouchPoints > 0,\n        observer: function checkObserver() {\n          return 'MutationObserver' in win || 'WebkitMutationObserver' in win;\n        }(),\n        passiveListener: function checkPassiveListener() {\n          var supportsPassive = false;\n          try {\n            var opts = Object.defineProperty({}, 'passive', {\n              // eslint-disable-next-line\n              get: function get() {\n                supportsPassive = true;\n              }\n            });\n            win.addEventListener('testPassiveListener', null, opts);\n          } catch (e) {\n            // No support\n          }\n          return supportsPassive;\n        }(),\n        gestures: function checkGestures() {\n          return 'ongesturestart' in win;\n        }()\n      };\n    }();\n    var SwiperClass = function SwiperClass(params) {\n      if (params === void 0) params = {};\n      var self = this;\n      self.params = params;\n\n      // Events\n      self.eventsListeners = {};\n      if (self.params && self.params.on) {\n        Object.keys(self.params.on).forEach(function (eventName) {\n          self.on(eventName, self.params.on[eventName]);\n        });\n      }\n    };\n    var staticAccessors = {\n      components: {\n        configurable: true\n      }\n    };\n    SwiperClass.prototype.on = function on(events, handler, priority) {\n      var self = this;\n      if (typeof handler !== 'function') {\n        return self;\n      }\n      var method = priority ? 'unshift' : 'push';\n      events.split(' ').forEach(function (event) {\n        if (!self.eventsListeners[event]) {\n          self.eventsListeners[event] = [];\n        }\n        self.eventsListeners[event][method](handler);\n      });\n      return self;\n    };\n    SwiperClass.prototype.once = function once(events, handler, priority) {\n      var self = this;\n      if (typeof handler !== 'function') {\n        return self;\n      }\n      function onceHandler() {\n        var args = [],\n          len = arguments.length;\n        while (len--) args[len] = arguments[len];\n        self.off(events, onceHandler);\n        if (onceHandler.f7proxy) {\n          delete onceHandler.f7proxy;\n        }\n        handler.apply(self, args);\n      }\n      onceHandler.f7proxy = handler;\n      return self.on(events, onceHandler, priority);\n    };\n    SwiperClass.prototype.off = function off(events, handler) {\n      var self = this;\n      if (!self.eventsListeners) {\n        return self;\n      }\n      events.split(' ').forEach(function (event) {\n        if (typeof handler === 'undefined') {\n          self.eventsListeners[event] = [];\n        } else if (self.eventsListeners[event] && self.eventsListeners[event].length) {\n          self.eventsListeners[event].forEach(function (eventHandler, index) {\n            if (eventHandler === handler || eventHandler.f7proxy && eventHandler.f7proxy === handler) {\n              self.eventsListeners[event].splice(index, 1);\n            }\n          });\n        }\n      });\n      return self;\n    };\n    SwiperClass.prototype.emit = function emit() {\n      var args = [],\n        len = arguments.length;\n      while (len--) args[len] = arguments[len];\n      var self = this;\n      if (!self.eventsListeners) {\n        return self;\n      }\n      var events;\n      var data;\n      var context;\n      if (typeof args[0] === 'string' || Array.isArray(args[0])) {\n        events = args[0];\n        data = args.slice(1, args.length);\n        context = self;\n      } else {\n        events = args[0].events;\n        data = args[0].data;\n        context = args[0].context || self;\n      }\n      var eventsArray = Array.isArray(events) ? events : events.split(' ');\n      eventsArray.forEach(function (event) {\n        if (self.eventsListeners && self.eventsListeners[event]) {\n          var handlers = [];\n          self.eventsListeners[event].forEach(function (eventHandler) {\n            handlers.push(eventHandler);\n          });\n          handlers.forEach(function (eventHandler) {\n            eventHandler.apply(context, data);\n          });\n        }\n      });\n      return self;\n    };\n    SwiperClass.prototype.useModulesParams = function useModulesParams(instanceParams) {\n      var instance = this;\n      if (!instance.modules) {\n        return;\n      }\n      Object.keys(instance.modules).forEach(function (moduleName) {\n        var module = instance.modules[moduleName];\n        // Extend params\n        if (module.params) {\n          Utils.extend(instanceParams, module.params);\n        }\n      });\n    };\n    SwiperClass.prototype.useModules = function useModules(modulesParams) {\n      if (modulesParams === void 0) modulesParams = {};\n      var instance = this;\n      if (!instance.modules) {\n        return;\n      }\n      Object.keys(instance.modules).forEach(function (moduleName) {\n        var module = instance.modules[moduleName];\n        var moduleParams = modulesParams[moduleName] || {};\n        // Extend instance methods and props\n        if (module.instance) {\n          Object.keys(module.instance).forEach(function (modulePropName) {\n            var moduleProp = module.instance[modulePropName];\n            if (typeof moduleProp === 'function') {\n              instance[modulePropName] = moduleProp.bind(instance);\n            } else {\n              instance[modulePropName] = moduleProp;\n            }\n          });\n        }\n        // Add event listeners\n        if (module.on && instance.on) {\n          Object.keys(module.on).forEach(function (moduleEventName) {\n            instance.on(moduleEventName, module.on[moduleEventName]);\n          });\n        }\n\n        // Module create callback\n        if (module.create) {\n          module.create.bind(instance)(moduleParams);\n        }\n      });\n    };\n    staticAccessors.components.set = function (components) {\n      var Class = this;\n      if (!Class.use) {\n        return;\n      }\n      Class.use(components);\n    };\n    SwiperClass.installModule = function installModule(module) {\n      var params = [],\n        len = arguments.length - 1;\n      while (len-- > 0) params[len] = arguments[len + 1];\n      var Class = this;\n      if (!Class.prototype.modules) {\n        Class.prototype.modules = {};\n      }\n      var name = module.name || Object.keys(Class.prototype.modules).length + \"_\" + Utils.now();\n      Class.prototype.modules[name] = module;\n      // Prototype\n      if (module.proto) {\n        Object.keys(module.proto).forEach(function (key) {\n          Class.prototype[key] = module.proto[key];\n        });\n      }\n      // Class\n      if (module.static) {\n        Object.keys(module.static).forEach(function (key) {\n          Class[key] = module.static[key];\n        });\n      }\n      // Callback\n      if (module.install) {\n        module.install.apply(Class, params);\n      }\n      return Class;\n    };\n    SwiperClass.use = function use(module) {\n      var params = [],\n        len = arguments.length - 1;\n      while (len-- > 0) params[len] = arguments[len + 1];\n      var Class = this;\n      if (Array.isArray(module)) {\n        module.forEach(function (m) {\n          return Class.installModule(m);\n        });\n        return Class;\n      }\n      return Class.installModule.apply(Class, [module].concat(params));\n    };\n    Object.defineProperties(SwiperClass, staticAccessors);\n    function updateSize() {\n      var swiper = this;\n      var width;\n      var height;\n      var $el = swiper.$el;\n      if (typeof swiper.params.width !== 'undefined') {\n        width = swiper.params.width;\n      } else {\n        width = $el[0].clientWidth;\n      }\n      if (typeof swiper.params.height !== 'undefined') {\n        height = swiper.params.height;\n      } else {\n        height = $el[0].clientHeight;\n      }\n      if (width === 0 && swiper.isHorizontal() || height === 0 && swiper.isVertical()) {\n        return;\n      }\n\n      // Subtract paddings\n      width = width - parseInt($el.css('padding-left'), 10) - parseInt($el.css('padding-right'), 10);\n      height = height - parseInt($el.css('padding-top'), 10) - parseInt($el.css('padding-bottom'), 10);\n      Utils.extend(swiper, {\n        width: width,\n        height: height,\n        size: swiper.isHorizontal() ? width : height\n      });\n    }\n    function updateSlides() {\n      var swiper = this;\n      var params = swiper.params;\n      var $wrapperEl = swiper.$wrapperEl;\n      var swiperSize = swiper.size;\n      var rtl = swiper.rtlTranslate;\n      var wrongRTL = swiper.wrongRTL;\n      var isVirtual = swiper.virtual && params.virtual.enabled;\n      var previousSlidesLength = isVirtual ? swiper.virtual.slides.length : swiper.slides.length;\n      var slides = $wrapperEl.children(\".\" + swiper.params.slideClass);\n      var slidesLength = isVirtual ? swiper.virtual.slides.length : slides.length;\n      var snapGrid = [];\n      var slidesGrid = [];\n      var slidesSizesGrid = [];\n      function slidesForMargin(slideIndex) {\n        if (!params.cssMode) {\n          return true;\n        }\n        if (slideIndex === slides.length - 1) {\n          return false;\n        }\n        return true;\n      }\n      var offsetBefore = params.slidesOffsetBefore;\n      if (typeof offsetBefore === 'function') {\n        offsetBefore = params.slidesOffsetBefore.call(swiper);\n      }\n      var offsetAfter = params.slidesOffsetAfter;\n      if (typeof offsetAfter === 'function') {\n        offsetAfter = params.slidesOffsetAfter.call(swiper);\n      }\n      var previousSnapGridLength = swiper.snapGrid.length;\n      var previousSlidesGridLength = swiper.snapGrid.length;\n      var spaceBetween = params.spaceBetween;\n      var slidePosition = -offsetBefore;\n      var prevSlideSize = 0;\n      var index = 0;\n      if (typeof swiperSize === 'undefined') {\n        return;\n      }\n      if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {\n        spaceBetween = parseFloat(spaceBetween.replace('%', '')) / 100 * swiperSize;\n      }\n      swiper.virtualSize = -spaceBetween;\n\n      // reset margins\n      if (rtl) {\n        slides.css({\n          marginLeft: '',\n          marginTop: ''\n        });\n      } else {\n        slides.css({\n          marginRight: '',\n          marginBottom: ''\n        });\n      }\n      var slidesNumberEvenToRows;\n      if (params.slidesPerColumn > 1) {\n        if (Math.floor(slidesLength / params.slidesPerColumn) === slidesLength / swiper.params.slidesPerColumn) {\n          slidesNumberEvenToRows = slidesLength;\n        } else {\n          slidesNumberEvenToRows = Math.ceil(slidesLength / params.slidesPerColumn) * params.slidesPerColumn;\n        }\n        if (params.slidesPerView !== 'auto' && params.slidesPerColumnFill === 'row') {\n          slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, params.slidesPerView * params.slidesPerColumn);\n        }\n      }\n\n      // Calc slides\n      var slideSize;\n      var slidesPerColumn = params.slidesPerColumn;\n      var slidesPerRow = slidesNumberEvenToRows / slidesPerColumn;\n      var numFullColumns = Math.floor(slidesLength / params.slidesPerColumn);\n      for (var i = 0; i < slidesLength; i += 1) {\n        slideSize = 0;\n        var slide = slides.eq(i);\n        if (params.slidesPerColumn > 1) {\n          // Set slides order\n          var newSlideOrderIndex = void 0;\n          var column = void 0;\n          var row = void 0;\n          if (params.slidesPerColumnFill === 'row' && params.slidesPerGroup > 1) {\n            var groupIndex = Math.floor(i / (params.slidesPerGroup * params.slidesPerColumn));\n            var slideIndexInGroup = i - params.slidesPerColumn * params.slidesPerGroup * groupIndex;\n            var columnsInGroup = groupIndex === 0 ? params.slidesPerGroup : Math.min(Math.ceil((slidesLength - groupIndex * slidesPerColumn * params.slidesPerGroup) / slidesPerColumn), params.slidesPerGroup);\n            row = Math.floor(slideIndexInGroup / columnsInGroup);\n            column = slideIndexInGroup - row * columnsInGroup + groupIndex * params.slidesPerGroup;\n            newSlideOrderIndex = column + row * slidesNumberEvenToRows / slidesPerColumn;\n            slide.css({\n              '-webkit-box-ordinal-group': newSlideOrderIndex,\n              '-moz-box-ordinal-group': newSlideOrderIndex,\n              '-ms-flex-order': newSlideOrderIndex,\n              '-webkit-order': newSlideOrderIndex,\n              order: newSlideOrderIndex\n            });\n          } else if (params.slidesPerColumnFill === 'column') {\n            column = Math.floor(i / slidesPerColumn);\n            row = i - column * slidesPerColumn;\n            if (column > numFullColumns || column === numFullColumns && row === slidesPerColumn - 1) {\n              row += 1;\n              if (row >= slidesPerColumn) {\n                row = 0;\n                column += 1;\n              }\n            }\n          } else {\n            row = Math.floor(i / slidesPerRow);\n            column = i - row * slidesPerRow;\n          }\n          slide.css(\"margin-\" + (swiper.isHorizontal() ? 'top' : 'left'), row !== 0 && params.spaceBetween && params.spaceBetween + \"px\");\n        }\n        if (slide.css('display') === 'none') {\n          continue;\n        } // eslint-disable-line\n\n        if (params.slidesPerView === 'auto') {\n          var slideStyles = win.getComputedStyle(slide[0], null);\n          var currentTransform = slide[0].style.transform;\n          var currentWebKitTransform = slide[0].style.webkitTransform;\n          if (currentTransform) {\n            slide[0].style.transform = 'none';\n          }\n          if (currentWebKitTransform) {\n            slide[0].style.webkitTransform = 'none';\n          }\n          if (params.roundLengths) {\n            slideSize = swiper.isHorizontal() ? slide.outerWidth(true) : slide.outerHeight(true);\n          } else {\n            // eslint-disable-next-line\n            if (swiper.isHorizontal()) {\n              var width = parseFloat(slideStyles.getPropertyValue('width'));\n              var paddingLeft = parseFloat(slideStyles.getPropertyValue('padding-left'));\n              var paddingRight = parseFloat(slideStyles.getPropertyValue('padding-right'));\n              var marginLeft = parseFloat(slideStyles.getPropertyValue('margin-left'));\n              var marginRight = parseFloat(slideStyles.getPropertyValue('margin-right'));\n              var boxSizing = slideStyles.getPropertyValue('box-sizing');\n              if (boxSizing && boxSizing === 'border-box') {\n                slideSize = width + marginLeft + marginRight;\n              } else {\n                slideSize = width + paddingLeft + paddingRight + marginLeft + marginRight;\n              }\n            } else {\n              var height = parseFloat(slideStyles.getPropertyValue('height'));\n              var paddingTop = parseFloat(slideStyles.getPropertyValue('padding-top'));\n              var paddingBottom = parseFloat(slideStyles.getPropertyValue('padding-bottom'));\n              var marginTop = parseFloat(slideStyles.getPropertyValue('margin-top'));\n              var marginBottom = parseFloat(slideStyles.getPropertyValue('margin-bottom'));\n              var boxSizing$1 = slideStyles.getPropertyValue('box-sizing');\n              if (boxSizing$1 && boxSizing$1 === 'border-box') {\n                slideSize = height + marginTop + marginBottom;\n              } else {\n                slideSize = height + paddingTop + paddingBottom + marginTop + marginBottom;\n              }\n            }\n          }\n          if (currentTransform) {\n            slide[0].style.transform = currentTransform;\n          }\n          if (currentWebKitTransform) {\n            slide[0].style.webkitTransform = currentWebKitTransform;\n          }\n          if (params.roundLengths) {\n            slideSize = Math.floor(slideSize);\n          }\n        } else {\n          slideSize = (swiperSize - (params.slidesPerView - 1) * spaceBetween) / params.slidesPerView;\n          if (params.roundLengths) {\n            slideSize = Math.floor(slideSize);\n          }\n          if (slides[i]) {\n            if (swiper.isHorizontal()) {\n              slides[i].style.width = slideSize + \"px\";\n            } else {\n              slides[i].style.height = slideSize + \"px\";\n            }\n          }\n        }\n        if (slides[i]) {\n          slides[i].swiperSlideSize = slideSize;\n        }\n        slidesSizesGrid.push(slideSize);\n        if (params.centeredSlides) {\n          slidePosition = slidePosition + slideSize / 2 + prevSlideSize / 2 + spaceBetween;\n          if (prevSlideSize === 0 && i !== 0) {\n            slidePosition = slidePosition - swiperSize / 2 - spaceBetween;\n          }\n          if (i === 0) {\n            slidePosition = slidePosition - swiperSize / 2 - spaceBetween;\n          }\n          if (Math.abs(slidePosition) < 1 / 1000) {\n            slidePosition = 0;\n          }\n          if (params.roundLengths) {\n            slidePosition = Math.floor(slidePosition);\n          }\n          if (index % params.slidesPerGroup === 0) {\n            snapGrid.push(slidePosition);\n          }\n          slidesGrid.push(slidePosition);\n        } else {\n          if (params.roundLengths) {\n            slidePosition = Math.floor(slidePosition);\n          }\n          if ((index - Math.min(swiper.params.slidesPerGroupSkip, index)) % swiper.params.slidesPerGroup === 0) {\n            snapGrid.push(slidePosition);\n          }\n          slidesGrid.push(slidePosition);\n          slidePosition = slidePosition + slideSize + spaceBetween;\n        }\n        swiper.virtualSize += slideSize + spaceBetween;\n        prevSlideSize = slideSize;\n        index += 1;\n      }\n      swiper.virtualSize = Math.max(swiper.virtualSize, swiperSize) + offsetAfter;\n      var newSlidesGrid;\n      if (rtl && wrongRTL && (params.effect === 'slide' || params.effect === 'coverflow')) {\n        $wrapperEl.css({\n          width: swiper.virtualSize + params.spaceBetween + \"px\"\n        });\n      }\n      if (params.setWrapperSize) {\n        if (swiper.isHorizontal()) {\n          $wrapperEl.css({\n            width: swiper.virtualSize + params.spaceBetween + \"px\"\n          });\n        } else {\n          $wrapperEl.css({\n            height: swiper.virtualSize + params.spaceBetween + \"px\"\n          });\n        }\n      }\n      if (params.slidesPerColumn > 1) {\n        swiper.virtualSize = (slideSize + params.spaceBetween) * slidesNumberEvenToRows;\n        swiper.virtualSize = Math.ceil(swiper.virtualSize / params.slidesPerColumn) - params.spaceBetween;\n        if (swiper.isHorizontal()) {\n          $wrapperEl.css({\n            width: swiper.virtualSize + params.spaceBetween + \"px\"\n          });\n        } else {\n          $wrapperEl.css({\n            height: swiper.virtualSize + params.spaceBetween + \"px\"\n          });\n        }\n        if (params.centeredSlides) {\n          newSlidesGrid = [];\n          for (var i$1 = 0; i$1 < snapGrid.length; i$1 += 1) {\n            var slidesGridItem = snapGrid[i$1];\n            if (params.roundLengths) {\n              slidesGridItem = Math.floor(slidesGridItem);\n            }\n            if (snapGrid[i$1] < swiper.virtualSize + snapGrid[0]) {\n              newSlidesGrid.push(slidesGridItem);\n            }\n          }\n          snapGrid = newSlidesGrid;\n        }\n      }\n\n      // Remove last grid elements depending on width\n      if (!params.centeredSlides) {\n        newSlidesGrid = [];\n        for (var i$2 = 0; i$2 < snapGrid.length; i$2 += 1) {\n          var slidesGridItem$1 = snapGrid[i$2];\n          if (params.roundLengths) {\n            slidesGridItem$1 = Math.floor(slidesGridItem$1);\n          }\n          if (snapGrid[i$2] <= swiper.virtualSize - swiperSize) {\n            newSlidesGrid.push(slidesGridItem$1);\n          }\n        }\n        snapGrid = newSlidesGrid;\n        if (Math.floor(swiper.virtualSize - swiperSize) - Math.floor(snapGrid[snapGrid.length - 1]) > 1) {\n          snapGrid.push(swiper.virtualSize - swiperSize);\n        }\n      }\n      if (snapGrid.length === 0) {\n        snapGrid = [0];\n      }\n      if (params.spaceBetween !== 0) {\n        if (swiper.isHorizontal()) {\n          if (rtl) {\n            slides.filter(slidesForMargin).css({\n              marginLeft: spaceBetween + \"px\"\n            });\n          } else {\n            slides.filter(slidesForMargin).css({\n              marginRight: spaceBetween + \"px\"\n            });\n          }\n        } else {\n          slides.filter(slidesForMargin).css({\n            marginBottom: spaceBetween + \"px\"\n          });\n        }\n      }\n      if (params.centeredSlides && params.centeredSlidesBounds) {\n        var allSlidesSize = 0;\n        slidesSizesGrid.forEach(function (slideSizeValue) {\n          allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);\n        });\n        allSlidesSize -= params.spaceBetween;\n        var maxSnap = allSlidesSize - swiperSize;\n        snapGrid = snapGrid.map(function (snap) {\n          if (snap < 0) {\n            return -offsetBefore;\n          }\n          if (snap > maxSnap) {\n            return maxSnap + offsetAfter;\n          }\n          return snap;\n        });\n      }\n      if (params.centerInsufficientSlides) {\n        var allSlidesSize$1 = 0;\n        slidesSizesGrid.forEach(function (slideSizeValue) {\n          allSlidesSize$1 += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);\n        });\n        allSlidesSize$1 -= params.spaceBetween;\n        if (allSlidesSize$1 < swiperSize) {\n          var allSlidesOffset = (swiperSize - allSlidesSize$1) / 2;\n          snapGrid.forEach(function (snap, snapIndex) {\n            snapGrid[snapIndex] = snap - allSlidesOffset;\n          });\n          slidesGrid.forEach(function (snap, snapIndex) {\n            slidesGrid[snapIndex] = snap + allSlidesOffset;\n          });\n        }\n      }\n      Utils.extend(swiper, {\n        slides: slides,\n        snapGrid: snapGrid,\n        slidesGrid: slidesGrid,\n        slidesSizesGrid: slidesSizesGrid\n      });\n      if (slidesLength !== previousSlidesLength) {\n        swiper.emit('slidesLengthChange');\n      }\n      if (snapGrid.length !== previousSnapGridLength) {\n        if (swiper.params.watchOverflow) {\n          swiper.checkOverflow();\n        }\n        swiper.emit('snapGridLengthChange');\n      }\n      if (slidesGrid.length !== previousSlidesGridLength) {\n        swiper.emit('slidesGridLengthChange');\n      }\n      if (params.watchSlidesProgress || params.watchSlidesVisibility) {\n        swiper.updateSlidesOffset();\n      }\n    }\n    function updateAutoHeight(speed) {\n      var swiper = this;\n      var activeSlides = [];\n      var newHeight = 0;\n      var i;\n      if (typeof speed === 'number') {\n        swiper.setTransition(speed);\n      } else if (speed === true) {\n        swiper.setTransition(swiper.params.speed);\n      }\n      // Find slides currently in view\n      if (swiper.params.slidesPerView !== 'auto' && swiper.params.slidesPerView > 1) {\n        if (swiper.params.centeredSlides) {\n          activeSlides.push.apply(activeSlides, swiper.visibleSlides);\n        } else {\n          for (i = 0; i < Math.ceil(swiper.params.slidesPerView); i += 1) {\n            var index = swiper.activeIndex + i;\n            if (index > swiper.slides.length) {\n              break;\n            }\n            activeSlides.push(swiper.slides.eq(index)[0]);\n          }\n        }\n      } else {\n        activeSlides.push(swiper.slides.eq(swiper.activeIndex)[0]);\n      }\n\n      // Find new height from highest slide in view\n      for (i = 0; i < activeSlides.length; i += 1) {\n        if (typeof activeSlides[i] !== 'undefined') {\n          var height = activeSlides[i].offsetHeight;\n          newHeight = height > newHeight ? height : newHeight;\n        }\n      }\n\n      // Update Height\n      if (newHeight) {\n        swiper.$wrapperEl.css('height', newHeight + \"px\");\n      }\n    }\n    function updateSlidesOffset() {\n      var swiper = this;\n      var slides = swiper.slides;\n      for (var i = 0; i < slides.length; i += 1) {\n        slides[i].swiperSlideOffset = swiper.isHorizontal() ? slides[i].offsetLeft : slides[i].offsetTop;\n      }\n    }\n    function updateSlidesProgress(translate) {\n      if (translate === void 0) translate = this && this.translate || 0;\n      var swiper = this;\n      var params = swiper.params;\n      var slides = swiper.slides;\n      var rtl = swiper.rtlTranslate;\n      if (slides.length === 0) {\n        return;\n      }\n      if (typeof slides[0].swiperSlideOffset === 'undefined') {\n        swiper.updateSlidesOffset();\n      }\n      var offsetCenter = -translate;\n      if (rtl) {\n        offsetCenter = translate;\n      }\n\n      // Visible Slides\n      slides.removeClass(params.slideVisibleClass);\n      swiper.visibleSlidesIndexes = [];\n      swiper.visibleSlides = [];\n      for (var i = 0; i < slides.length; i += 1) {\n        var slide = slides[i];\n        var slideProgress = (offsetCenter + (params.centeredSlides ? swiper.minTranslate() : 0) - slide.swiperSlideOffset) / (slide.swiperSlideSize + params.spaceBetween);\n        if (params.watchSlidesVisibility || params.centeredSlides && params.autoHeight) {\n          var slideBefore = -(offsetCenter - slide.swiperSlideOffset);\n          var slideAfter = slideBefore + swiper.slidesSizesGrid[i];\n          var isVisible = slideBefore >= 0 && slideBefore < swiper.size - 1 || slideAfter > 1 && slideAfter <= swiper.size || slideBefore <= 0 && slideAfter >= swiper.size;\n          if (isVisible) {\n            swiper.visibleSlides.push(slide);\n            swiper.visibleSlidesIndexes.push(i);\n            slides.eq(i).addClass(params.slideVisibleClass);\n          }\n        }\n        slide.progress = rtl ? -slideProgress : slideProgress;\n      }\n      swiper.visibleSlides = $(swiper.visibleSlides);\n    }\n    function updateProgress(translate) {\n      var swiper = this;\n      if (typeof translate === 'undefined') {\n        var multiplier = swiper.rtlTranslate ? -1 : 1;\n        // eslint-disable-next-line\n        translate = swiper && swiper.translate && swiper.translate * multiplier || 0;\n      }\n      var params = swiper.params;\n      var translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\n      var progress = swiper.progress;\n      var isBeginning = swiper.isBeginning;\n      var isEnd = swiper.isEnd;\n      var wasBeginning = isBeginning;\n      var wasEnd = isEnd;\n      if (translatesDiff === 0) {\n        progress = 0;\n        isBeginning = true;\n        isEnd = true;\n      } else {\n        progress = (translate - swiper.minTranslate()) / translatesDiff;\n        isBeginning = progress <= 0;\n        isEnd = progress >= 1;\n      }\n      Utils.extend(swiper, {\n        progress: progress,\n        isBeginning: isBeginning,\n        isEnd: isEnd\n      });\n      if (params.watchSlidesProgress || params.watchSlidesVisibility || params.centeredSlides && params.autoHeight) {\n        swiper.updateSlidesProgress(translate);\n      }\n      if (isBeginning && !wasBeginning) {\n        swiper.emit('reachBeginning toEdge');\n      }\n      if (isEnd && !wasEnd) {\n        swiper.emit('reachEnd toEdge');\n      }\n      if (wasBeginning && !isBeginning || wasEnd && !isEnd) {\n        swiper.emit('fromEdge');\n      }\n      swiper.emit('progress', progress);\n    }\n    function updateSlidesClasses() {\n      var swiper = this;\n      var slides = swiper.slides;\n      var params = swiper.params;\n      var $wrapperEl = swiper.$wrapperEl;\n      var activeIndex = swiper.activeIndex;\n      var realIndex = swiper.realIndex;\n      var isVirtual = swiper.virtual && params.virtual.enabled;\n      slides.removeClass(params.slideActiveClass + \" \" + params.slideNextClass + \" \" + params.slidePrevClass + \" \" + params.slideDuplicateActiveClass + \" \" + params.slideDuplicateNextClass + \" \" + params.slideDuplicatePrevClass);\n      var activeSlide;\n      if (isVirtual) {\n        activeSlide = swiper.$wrapperEl.find(\".\" + params.slideClass + \"[data-swiper-slide-index=\\\"\" + activeIndex + \"\\\"]\");\n      } else {\n        activeSlide = slides.eq(activeIndex);\n      }\n\n      // Active classes\n      activeSlide.addClass(params.slideActiveClass);\n      if (params.loop) {\n        // Duplicate to all looped slides\n        if (activeSlide.hasClass(params.slideDuplicateClass)) {\n          $wrapperEl.children(\".\" + params.slideClass + \":not(.\" + params.slideDuplicateClass + \")[data-swiper-slide-index=\\\"\" + realIndex + \"\\\"]\").addClass(params.slideDuplicateActiveClass);\n        } else {\n          $wrapperEl.children(\".\" + params.slideClass + \".\" + params.slideDuplicateClass + \"[data-swiper-slide-index=\\\"\" + realIndex + \"\\\"]\").addClass(params.slideDuplicateActiveClass);\n        }\n      }\n      // Next Slide\n      var nextSlide = activeSlide.nextAll(\".\" + params.slideClass).eq(0).addClass(params.slideNextClass);\n      if (params.loop && nextSlide.length === 0) {\n        nextSlide = slides.eq(0);\n        nextSlide.addClass(params.slideNextClass);\n      }\n      // Prev Slide\n      var prevSlide = activeSlide.prevAll(\".\" + params.slideClass).eq(0).addClass(params.slidePrevClass);\n      if (params.loop && prevSlide.length === 0) {\n        prevSlide = slides.eq(-1);\n        prevSlide.addClass(params.slidePrevClass);\n      }\n      if (params.loop) {\n        // Duplicate to all looped slides\n        if (nextSlide.hasClass(params.slideDuplicateClass)) {\n          $wrapperEl.children(\".\" + params.slideClass + \":not(.\" + params.slideDuplicateClass + \")[data-swiper-slide-index=\\\"\" + nextSlide.attr('data-swiper-slide-index') + \"\\\"]\").addClass(params.slideDuplicateNextClass);\n        } else {\n          $wrapperEl.children(\".\" + params.slideClass + \".\" + params.slideDuplicateClass + \"[data-swiper-slide-index=\\\"\" + nextSlide.attr('data-swiper-slide-index') + \"\\\"]\").addClass(params.slideDuplicateNextClass);\n        }\n        if (prevSlide.hasClass(params.slideDuplicateClass)) {\n          $wrapperEl.children(\".\" + params.slideClass + \":not(.\" + params.slideDuplicateClass + \")[data-swiper-slide-index=\\\"\" + prevSlide.attr('data-swiper-slide-index') + \"\\\"]\").addClass(params.slideDuplicatePrevClass);\n        } else {\n          $wrapperEl.children(\".\" + params.slideClass + \".\" + params.slideDuplicateClass + \"[data-swiper-slide-index=\\\"\" + prevSlide.attr('data-swiper-slide-index') + \"\\\"]\").addClass(params.slideDuplicatePrevClass);\n        }\n      }\n    }\n    function updateActiveIndex(newActiveIndex) {\n      var swiper = this;\n      var translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;\n      var slidesGrid = swiper.slidesGrid;\n      var snapGrid = swiper.snapGrid;\n      var params = swiper.params;\n      var previousIndex = swiper.activeIndex;\n      var previousRealIndex = swiper.realIndex;\n      var previousSnapIndex = swiper.snapIndex;\n      var activeIndex = newActiveIndex;\n      var snapIndex;\n      if (typeof activeIndex === 'undefined') {\n        for (var i = 0; i < slidesGrid.length; i += 1) {\n          if (typeof slidesGrid[i + 1] !== 'undefined') {\n            if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1] - (slidesGrid[i + 1] - slidesGrid[i]) / 2) {\n              activeIndex = i;\n            } else if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1]) {\n              activeIndex = i + 1;\n            }\n          } else if (translate >= slidesGrid[i]) {\n            activeIndex = i;\n          }\n        }\n        // Normalize slideIndex\n        if (params.normalizeSlideIndex) {\n          if (activeIndex < 0 || typeof activeIndex === 'undefined') {\n            activeIndex = 0;\n          }\n        }\n      }\n      if (snapGrid.indexOf(translate) >= 0) {\n        snapIndex = snapGrid.indexOf(translate);\n      } else {\n        var skip = Math.min(params.slidesPerGroupSkip, activeIndex);\n        snapIndex = skip + Math.floor((activeIndex - skip) / params.slidesPerGroup);\n      }\n      if (snapIndex >= snapGrid.length) {\n        snapIndex = snapGrid.length - 1;\n      }\n      if (activeIndex === previousIndex) {\n        if (snapIndex !== previousSnapIndex) {\n          swiper.snapIndex = snapIndex;\n          swiper.emit('snapIndexChange');\n        }\n        return;\n      }\n\n      // Get real index\n      var realIndex = parseInt(swiper.slides.eq(activeIndex).attr('data-swiper-slide-index') || activeIndex, 10);\n      Utils.extend(swiper, {\n        snapIndex: snapIndex,\n        realIndex: realIndex,\n        previousIndex: previousIndex,\n        activeIndex: activeIndex\n      });\n      swiper.emit('activeIndexChange');\n      swiper.emit('snapIndexChange');\n      if (previousRealIndex !== realIndex) {\n        swiper.emit('realIndexChange');\n      }\n      if (swiper.initialized || swiper.runCallbacksOnInit) {\n        swiper.emit('slideChange');\n      }\n    }\n    function updateClickedSlide(e) {\n      var swiper = this;\n      var params = swiper.params;\n      var slide = $(e.target).closest(\".\" + params.slideClass)[0];\n      var slideFound = false;\n      if (slide) {\n        for (var i = 0; i < swiper.slides.length; i += 1) {\n          if (swiper.slides[i] === slide) {\n            slideFound = true;\n          }\n        }\n      }\n      if (slide && slideFound) {\n        swiper.clickedSlide = slide;\n        if (swiper.virtual && swiper.params.virtual.enabled) {\n          swiper.clickedIndex = parseInt($(slide).attr('data-swiper-slide-index'), 10);\n        } else {\n          swiper.clickedIndex = $(slide).index();\n        }\n      } else {\n        swiper.clickedSlide = undefined;\n        swiper.clickedIndex = undefined;\n        return;\n      }\n      if (params.slideToClickedSlide && swiper.clickedIndex !== undefined && swiper.clickedIndex !== swiper.activeIndex) {\n        swiper.slideToClickedSlide();\n      }\n    }\n    var update = {\n      updateSize: updateSize,\n      updateSlides: updateSlides,\n      updateAutoHeight: updateAutoHeight,\n      updateSlidesOffset: updateSlidesOffset,\n      updateSlidesProgress: updateSlidesProgress,\n      updateProgress: updateProgress,\n      updateSlidesClasses: updateSlidesClasses,\n      updateActiveIndex: updateActiveIndex,\n      updateClickedSlide: updateClickedSlide\n    };\n    function getTranslate(axis) {\n      if (axis === void 0) axis = this.isHorizontal() ? 'x' : 'y';\n      var swiper = this;\n      var params = swiper.params;\n      var rtl = swiper.rtlTranslate;\n      var translate = swiper.translate;\n      var $wrapperEl = swiper.$wrapperEl;\n      if (params.virtualTranslate) {\n        return rtl ? -translate : translate;\n      }\n      if (params.cssMode) {\n        return translate;\n      }\n      var currentTranslate = Utils.getTranslate($wrapperEl[0], axis);\n      if (rtl) {\n        currentTranslate = -currentTranslate;\n      }\n      return currentTranslate || 0;\n    }\n    function setTranslate(translate, byController) {\n      var swiper = this;\n      var rtl = swiper.rtlTranslate;\n      var params = swiper.params;\n      var $wrapperEl = swiper.$wrapperEl;\n      var wrapperEl = swiper.wrapperEl;\n      var progress = swiper.progress;\n      var x = 0;\n      var y = 0;\n      var z = 0;\n      if (swiper.isHorizontal()) {\n        x = rtl ? -translate : translate;\n      } else {\n        y = translate;\n      }\n      if (params.roundLengths) {\n        x = Math.floor(x);\n        y = Math.floor(y);\n      }\n      if (params.cssMode) {\n        wrapperEl[swiper.isHorizontal() ? 'scrollLeft' : 'scrollTop'] = swiper.isHorizontal() ? -x : -y;\n      } else if (!params.virtualTranslate) {\n        $wrapperEl.transform(\"translate3d(\" + x + \"px, \" + y + \"px, \" + z + \"px)\");\n      }\n      swiper.previousTranslate = swiper.translate;\n      swiper.translate = swiper.isHorizontal() ? x : y;\n\n      // Check if we need to update progress\n      var newProgress;\n      var translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\n      if (translatesDiff === 0) {\n        newProgress = 0;\n      } else {\n        newProgress = (translate - swiper.minTranslate()) / translatesDiff;\n      }\n      if (newProgress !== progress) {\n        swiper.updateProgress(translate);\n      }\n      swiper.emit('setTranslate', swiper.translate, byController);\n    }\n    function minTranslate() {\n      return -this.snapGrid[0];\n    }\n    function maxTranslate() {\n      return -this.snapGrid[this.snapGrid.length - 1];\n    }\n    function translateTo(translate, speed, runCallbacks, translateBounds, internal) {\n      var obj;\n      if (translate === void 0) translate = 0;\n      if (speed === void 0) speed = this.params.speed;\n      if (runCallbacks === void 0) runCallbacks = true;\n      if (translateBounds === void 0) translateBounds = true;\n      var swiper = this;\n      var params = swiper.params;\n      var wrapperEl = swiper.wrapperEl;\n      if (swiper.animating && params.preventInteractionOnTransition) {\n        return false;\n      }\n      var minTranslate = swiper.minTranslate();\n      var maxTranslate = swiper.maxTranslate();\n      var newTranslate;\n      if (translateBounds && translate > minTranslate) {\n        newTranslate = minTranslate;\n      } else if (translateBounds && translate < maxTranslate) {\n        newTranslate = maxTranslate;\n      } else {\n        newTranslate = translate;\n      }\n\n      // Update progress\n      swiper.updateProgress(newTranslate);\n      if (params.cssMode) {\n        var isH = swiper.isHorizontal();\n        if (speed === 0) {\n          wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = -newTranslate;\n        } else {\n          // eslint-disable-next-line\n          if (wrapperEl.scrollTo) {\n            wrapperEl.scrollTo((obj = {}, obj[isH ? 'left' : 'top'] = -newTranslate, obj.behavior = 'smooth', obj));\n          } else {\n            wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = -newTranslate;\n          }\n        }\n        return true;\n      }\n      if (speed === 0) {\n        swiper.setTransition(0);\n        swiper.setTranslate(newTranslate);\n        if (runCallbacks) {\n          swiper.emit('beforeTransitionStart', speed, internal);\n          swiper.emit('transitionEnd');\n        }\n      } else {\n        swiper.setTransition(speed);\n        swiper.setTranslate(newTranslate);\n        if (runCallbacks) {\n          swiper.emit('beforeTransitionStart', speed, internal);\n          swiper.emit('transitionStart');\n        }\n        if (!swiper.animating) {\n          swiper.animating = true;\n          if (!swiper.onTranslateToWrapperTransitionEnd) {\n            swiper.onTranslateToWrapperTransitionEnd = function transitionEnd(e) {\n              if (!swiper || swiper.destroyed) {\n                return;\n              }\n              if (e.target !== this) {\n                return;\n              }\n              swiper.$wrapperEl[0].removeEventListener('transitionend', swiper.onTranslateToWrapperTransitionEnd);\n              swiper.$wrapperEl[0].removeEventListener('webkitTransitionEnd', swiper.onTranslateToWrapperTransitionEnd);\n              swiper.onTranslateToWrapperTransitionEnd = null;\n              delete swiper.onTranslateToWrapperTransitionEnd;\n              if (runCallbacks) {\n                swiper.emit('transitionEnd');\n              }\n            };\n          }\n          swiper.$wrapperEl[0].addEventListener('transitionend', swiper.onTranslateToWrapperTransitionEnd);\n          swiper.$wrapperEl[0].addEventListener('webkitTransitionEnd', swiper.onTranslateToWrapperTransitionEnd);\n        }\n      }\n      return true;\n    }\n    var translate = {\n      getTranslate: getTranslate,\n      setTranslate: setTranslate,\n      minTranslate: minTranslate,\n      maxTranslate: maxTranslate,\n      translateTo: translateTo\n    };\n    function setTransition(duration, byController) {\n      var swiper = this;\n      if (!swiper.params.cssMode) {\n        swiper.$wrapperEl.transition(duration);\n      }\n      swiper.emit('setTransition', duration, byController);\n    }\n    function transitionStart(runCallbacks, direction) {\n      if (runCallbacks === void 0) runCallbacks = true;\n      var swiper = this;\n      var activeIndex = swiper.activeIndex;\n      var params = swiper.params;\n      var previousIndex = swiper.previousIndex;\n      if (params.cssMode) {\n        return;\n      }\n      if (params.autoHeight) {\n        swiper.updateAutoHeight();\n      }\n      var dir = direction;\n      if (!dir) {\n        if (activeIndex > previousIndex) {\n          dir = 'next';\n        } else if (activeIndex < previousIndex) {\n          dir = 'prev';\n        } else {\n          dir = 'reset';\n        }\n      }\n      swiper.emit('transitionStart');\n      if (runCallbacks && activeIndex !== previousIndex) {\n        if (dir === 'reset') {\n          swiper.emit('slideResetTransitionStart');\n          return;\n        }\n        swiper.emit('slideChangeTransitionStart');\n        if (dir === 'next') {\n          swiper.emit('slideNextTransitionStart');\n        } else {\n          swiper.emit('slidePrevTransitionStart');\n        }\n      }\n    }\n    function transitionEnd$1(runCallbacks, direction) {\n      if (runCallbacks === void 0) runCallbacks = true;\n      var swiper = this;\n      var activeIndex = swiper.activeIndex;\n      var previousIndex = swiper.previousIndex;\n      var params = swiper.params;\n      swiper.animating = false;\n      if (params.cssMode) {\n        return;\n      }\n      swiper.setTransition(0);\n      var dir = direction;\n      if (!dir) {\n        if (activeIndex > previousIndex) {\n          dir = 'next';\n        } else if (activeIndex < previousIndex) {\n          dir = 'prev';\n        } else {\n          dir = 'reset';\n        }\n      }\n      swiper.emit('transitionEnd');\n      if (runCallbacks && activeIndex !== previousIndex) {\n        if (dir === 'reset') {\n          swiper.emit('slideResetTransitionEnd');\n          return;\n        }\n        swiper.emit('slideChangeTransitionEnd');\n        if (dir === 'next') {\n          swiper.emit('slideNextTransitionEnd');\n        } else {\n          swiper.emit('slidePrevTransitionEnd');\n        }\n      }\n    }\n    var transition$1 = {\n      setTransition: setTransition,\n      transitionStart: transitionStart,\n      transitionEnd: transitionEnd$1\n    };\n    function slideTo(index, speed, runCallbacks, internal) {\n      var obj;\n      if (index === void 0) index = 0;\n      if (speed === void 0) speed = this.params.speed;\n      if (runCallbacks === void 0) runCallbacks = true;\n      var swiper = this;\n      var slideIndex = index;\n      if (slideIndex < 0) {\n        slideIndex = 0;\n      }\n      var params = swiper.params;\n      var snapGrid = swiper.snapGrid;\n      var slidesGrid = swiper.slidesGrid;\n      var previousIndex = swiper.previousIndex;\n      var activeIndex = swiper.activeIndex;\n      var rtl = swiper.rtlTranslate;\n      var wrapperEl = swiper.wrapperEl;\n      if (swiper.animating && params.preventInteractionOnTransition) {\n        return false;\n      }\n      var skip = Math.min(swiper.params.slidesPerGroupSkip, slideIndex);\n      var snapIndex = skip + Math.floor((slideIndex - skip) / swiper.params.slidesPerGroup);\n      if (snapIndex >= snapGrid.length) {\n        snapIndex = snapGrid.length - 1;\n      }\n      if ((activeIndex || params.initialSlide || 0) === (previousIndex || 0) && runCallbacks) {\n        swiper.emit('beforeSlideChangeStart');\n      }\n      var translate = -snapGrid[snapIndex];\n\n      // Update progress\n      swiper.updateProgress(translate);\n\n      // Normalize slideIndex\n      if (params.normalizeSlideIndex) {\n        for (var i = 0; i < slidesGrid.length; i += 1) {\n          if (-Math.floor(translate * 100) >= Math.floor(slidesGrid[i] * 100)) {\n            slideIndex = i;\n          }\n        }\n      }\n      // Directions locks\n      if (swiper.initialized && slideIndex !== activeIndex) {\n        if (!swiper.allowSlideNext && translate < swiper.translate && translate < swiper.minTranslate()) {\n          return false;\n        }\n        if (!swiper.allowSlidePrev && translate > swiper.translate && translate > swiper.maxTranslate()) {\n          if ((activeIndex || 0) !== slideIndex) {\n            return false;\n          }\n        }\n      }\n      var direction;\n      if (slideIndex > activeIndex) {\n        direction = 'next';\n      } else if (slideIndex < activeIndex) {\n        direction = 'prev';\n      } else {\n        direction = 'reset';\n      }\n\n      // Update Index\n      if (rtl && -translate === swiper.translate || !rtl && translate === swiper.translate) {\n        swiper.updateActiveIndex(slideIndex);\n        // Update Height\n        if (params.autoHeight) {\n          swiper.updateAutoHeight();\n        }\n        swiper.updateSlidesClasses();\n        if (params.effect !== 'slide') {\n          swiper.setTranslate(translate);\n        }\n        if (direction !== 'reset') {\n          swiper.transitionStart(runCallbacks, direction);\n          swiper.transitionEnd(runCallbacks, direction);\n        }\n        return false;\n      }\n      if (params.cssMode) {\n        var isH = swiper.isHorizontal();\n        if (speed === 0) {\n          wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = -translate;\n        } else {\n          // eslint-disable-next-line\n          if (wrapperEl.scrollTo) {\n            wrapperEl.scrollTo((obj = {}, obj[isH ? 'left' : 'top'] = -translate, obj.behavior = 'smooth', obj));\n          } else {\n            wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = -translate;\n          }\n        }\n        return true;\n      }\n      if (speed === 0) {\n        swiper.setTransition(0);\n        swiper.setTranslate(translate);\n        swiper.updateActiveIndex(slideIndex);\n        swiper.updateSlidesClasses();\n        swiper.emit('beforeTransitionStart', speed, internal);\n        swiper.transitionStart(runCallbacks, direction);\n        swiper.transitionEnd(runCallbacks, direction);\n      } else {\n        swiper.setTransition(speed);\n        swiper.setTranslate(translate);\n        swiper.updateActiveIndex(slideIndex);\n        swiper.updateSlidesClasses();\n        swiper.emit('beforeTransitionStart', speed, internal);\n        swiper.transitionStart(runCallbacks, direction);\n        if (!swiper.animating) {\n          swiper.animating = true;\n          if (!swiper.onSlideToWrapperTransitionEnd) {\n            swiper.onSlideToWrapperTransitionEnd = function transitionEnd(e) {\n              if (!swiper || swiper.destroyed) {\n                return;\n              }\n              if (e.target !== this) {\n                return;\n              }\n              swiper.$wrapperEl[0].removeEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);\n              swiper.$wrapperEl[0].removeEventListener('webkitTransitionEnd', swiper.onSlideToWrapperTransitionEnd);\n              swiper.onSlideToWrapperTransitionEnd = null;\n              delete swiper.onSlideToWrapperTransitionEnd;\n              swiper.transitionEnd(runCallbacks, direction);\n            };\n          }\n          swiper.$wrapperEl[0].addEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);\n          swiper.$wrapperEl[0].addEventListener('webkitTransitionEnd', swiper.onSlideToWrapperTransitionEnd);\n        }\n      }\n      return true;\n    }\n    function slideToLoop(index, speed, runCallbacks, internal) {\n      if (index === void 0) index = 0;\n      if (speed === void 0) speed = this.params.speed;\n      if (runCallbacks === void 0) runCallbacks = true;\n      var swiper = this;\n      var newIndex = index;\n      if (swiper.params.loop) {\n        newIndex += swiper.loopedSlides;\n      }\n      return swiper.slideTo(newIndex, speed, runCallbacks, internal);\n    }\n\n    /* eslint no-unused-vars: \"off\" */\n    function slideNext(speed, runCallbacks, internal) {\n      if (speed === void 0) speed = this.params.speed;\n      if (runCallbacks === void 0) runCallbacks = true;\n      var swiper = this;\n      var params = swiper.params;\n      var animating = swiper.animating;\n      var increment = swiper.activeIndex < params.slidesPerGroupSkip ? 1 : params.slidesPerGroup;\n      if (params.loop) {\n        if (animating) {\n          return false;\n        }\n        swiper.loopFix();\n        // eslint-disable-next-line\n        swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;\n      }\n      return swiper.slideTo(swiper.activeIndex + increment, speed, runCallbacks, internal);\n    }\n\n    /* eslint no-unused-vars: \"off\" */\n    function slidePrev(speed, runCallbacks, internal) {\n      if (speed === void 0) speed = this.params.speed;\n      if (runCallbacks === void 0) runCallbacks = true;\n      var swiper = this;\n      var params = swiper.params;\n      var animating = swiper.animating;\n      var snapGrid = swiper.snapGrid;\n      var slidesGrid = swiper.slidesGrid;\n      var rtlTranslate = swiper.rtlTranslate;\n      if (params.loop) {\n        if (animating) {\n          return false;\n        }\n        swiper.loopFix();\n        // eslint-disable-next-line\n        swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;\n      }\n      var translate = rtlTranslate ? swiper.translate : -swiper.translate;\n      function normalize(val) {\n        if (val < 0) {\n          return -Math.floor(Math.abs(val));\n        }\n        return Math.floor(val);\n      }\n      var normalizedTranslate = normalize(translate);\n      var normalizedSnapGrid = snapGrid.map(function (val) {\n        return normalize(val);\n      });\n      var normalizedSlidesGrid = slidesGrid.map(function (val) {\n        return normalize(val);\n      });\n      var currentSnap = snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate)];\n      var prevSnap = snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate) - 1];\n      if (typeof prevSnap === 'undefined' && params.cssMode) {\n        snapGrid.forEach(function (snap) {\n          if (!prevSnap && normalizedTranslate >= snap) {\n            prevSnap = snap;\n          }\n        });\n      }\n      var prevIndex;\n      if (typeof prevSnap !== 'undefined') {\n        prevIndex = slidesGrid.indexOf(prevSnap);\n        if (prevIndex < 0) {\n          prevIndex = swiper.activeIndex - 1;\n        }\n      }\n      return swiper.slideTo(prevIndex, speed, runCallbacks, internal);\n    }\n\n    /* eslint no-unused-vars: \"off\" */\n    function slideReset(speed, runCallbacks, internal) {\n      if (speed === void 0) speed = this.params.speed;\n      if (runCallbacks === void 0) runCallbacks = true;\n      var swiper = this;\n      return swiper.slideTo(swiper.activeIndex, speed, runCallbacks, internal);\n    }\n\n    /* eslint no-unused-vars: \"off\" */\n    function slideToClosest(speed, runCallbacks, internal, threshold) {\n      if (speed === void 0) speed = this.params.speed;\n      if (runCallbacks === void 0) runCallbacks = true;\n      if (threshold === void 0) threshold = 0.5;\n      var swiper = this;\n      var index = swiper.activeIndex;\n      var skip = Math.min(swiper.params.slidesPerGroupSkip, index);\n      var snapIndex = skip + Math.floor((index - skip) / swiper.params.slidesPerGroup);\n      var translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;\n      if (translate >= swiper.snapGrid[snapIndex]) {\n        // The current translate is on or after the current snap index, so the choice\n        // is between the current index and the one after it.\n        var currentSnap = swiper.snapGrid[snapIndex];\n        var nextSnap = swiper.snapGrid[snapIndex + 1];\n        if (translate - currentSnap > (nextSnap - currentSnap) * threshold) {\n          index += swiper.params.slidesPerGroup;\n        }\n      } else {\n        // The current translate is before the current snap index, so the choice\n        // is between the current index and the one before it.\n        var prevSnap = swiper.snapGrid[snapIndex - 1];\n        var currentSnap$1 = swiper.snapGrid[snapIndex];\n        if (translate - prevSnap <= (currentSnap$1 - prevSnap) * threshold) {\n          index -= swiper.params.slidesPerGroup;\n        }\n      }\n      index = Math.max(index, 0);\n      index = Math.min(index, swiper.slidesGrid.length - 1);\n      return swiper.slideTo(index, speed, runCallbacks, internal);\n    }\n    function slideToClickedSlide() {\n      var swiper = this;\n      var params = swiper.params;\n      var $wrapperEl = swiper.$wrapperEl;\n      var slidesPerView = params.slidesPerView === 'auto' ? swiper.slidesPerViewDynamic() : params.slidesPerView;\n      var slideToIndex = swiper.clickedIndex;\n      var realIndex;\n      if (params.loop) {\n        if (swiper.animating) {\n          return;\n        }\n        realIndex = parseInt($(swiper.clickedSlide).attr('data-swiper-slide-index'), 10);\n        if (params.centeredSlides) {\n          if (slideToIndex < swiper.loopedSlides - slidesPerView / 2 || slideToIndex > swiper.slides.length - swiper.loopedSlides + slidesPerView / 2) {\n            swiper.loopFix();\n            slideToIndex = $wrapperEl.children(\".\" + params.slideClass + \"[data-swiper-slide-index=\\\"\" + realIndex + \"\\\"]:not(.\" + params.slideDuplicateClass + \")\").eq(0).index();\n            Utils.nextTick(function () {\n              swiper.slideTo(slideToIndex);\n            });\n          } else {\n            swiper.slideTo(slideToIndex);\n          }\n        } else if (slideToIndex > swiper.slides.length - slidesPerView) {\n          swiper.loopFix();\n          slideToIndex = $wrapperEl.children(\".\" + params.slideClass + \"[data-swiper-slide-index=\\\"\" + realIndex + \"\\\"]:not(.\" + params.slideDuplicateClass + \")\").eq(0).index();\n          Utils.nextTick(function () {\n            swiper.slideTo(slideToIndex);\n          });\n        } else {\n          swiper.slideTo(slideToIndex);\n        }\n      } else {\n        swiper.slideTo(slideToIndex);\n      }\n    }\n    var slide = {\n      slideTo: slideTo,\n      slideToLoop: slideToLoop,\n      slideNext: slideNext,\n      slidePrev: slidePrev,\n      slideReset: slideReset,\n      slideToClosest: slideToClosest,\n      slideToClickedSlide: slideToClickedSlide\n    };\n    function loopCreate() {\n      var swiper = this;\n      var params = swiper.params;\n      var $wrapperEl = swiper.$wrapperEl;\n      // Remove duplicated slides\n      $wrapperEl.children(\".\" + params.slideClass + \".\" + params.slideDuplicateClass).remove();\n      var slides = $wrapperEl.children(\".\" + params.slideClass);\n      if (params.loopFillGroupWithBlank) {\n        var blankSlidesNum = params.slidesPerGroup - slides.length % params.slidesPerGroup;\n        if (blankSlidesNum !== params.slidesPerGroup) {\n          for (var i = 0; i < blankSlidesNum; i += 1) {\n            var blankNode = $(doc.createElement('div')).addClass(params.slideClass + \" \" + params.slideBlankClass);\n            $wrapperEl.append(blankNode);\n          }\n          slides = $wrapperEl.children(\".\" + params.slideClass);\n        }\n      }\n      if (params.slidesPerView === 'auto' && !params.loopedSlides) {\n        params.loopedSlides = slides.length;\n      }\n      swiper.loopedSlides = Math.ceil(parseFloat(params.loopedSlides || params.slidesPerView, 10));\n      swiper.loopedSlides += params.loopAdditionalSlides;\n      if (swiper.loopedSlides > slides.length) {\n        swiper.loopedSlides = slides.length;\n      }\n      var prependSlides = [];\n      var appendSlides = [];\n      slides.each(function (index, el) {\n        var slide = $(el);\n        if (index < swiper.loopedSlides) {\n          appendSlides.push(el);\n        }\n        if (index < slides.length && index >= slides.length - swiper.loopedSlides) {\n          prependSlides.push(el);\n        }\n        slide.attr('data-swiper-slide-index', index);\n      });\n      for (var i$1 = 0; i$1 < appendSlides.length; i$1 += 1) {\n        $wrapperEl.append($(appendSlides[i$1].cloneNode(true)).addClass(params.slideDuplicateClass));\n      }\n      for (var i$2 = prependSlides.length - 1; i$2 >= 0; i$2 -= 1) {\n        $wrapperEl.prepend($(prependSlides[i$2].cloneNode(true)).addClass(params.slideDuplicateClass));\n      }\n    }\n    function loopFix() {\n      var swiper = this;\n      swiper.emit('beforeLoopFix');\n      var activeIndex = swiper.activeIndex;\n      var slides = swiper.slides;\n      var loopedSlides = swiper.loopedSlides;\n      var allowSlidePrev = swiper.allowSlidePrev;\n      var allowSlideNext = swiper.allowSlideNext;\n      var snapGrid = swiper.snapGrid;\n      var rtl = swiper.rtlTranslate;\n      var newIndex;\n      swiper.allowSlidePrev = true;\n      swiper.allowSlideNext = true;\n      var snapTranslate = -snapGrid[activeIndex];\n      var diff = snapTranslate - swiper.getTranslate();\n\n      // Fix For Negative Oversliding\n      if (activeIndex < loopedSlides) {\n        newIndex = slides.length - loopedSlides * 3 + activeIndex;\n        newIndex += loopedSlides;\n        var slideChanged = swiper.slideTo(newIndex, 0, false, true);\n        if (slideChanged && diff !== 0) {\n          swiper.setTranslate((rtl ? -swiper.translate : swiper.translate) - diff);\n        }\n      } else if (activeIndex >= slides.length - loopedSlides) {\n        // Fix For Positive Oversliding\n        newIndex = -slides.length + activeIndex + loopedSlides;\n        newIndex += loopedSlides;\n        var slideChanged$1 = swiper.slideTo(newIndex, 0, false, true);\n        if (slideChanged$1 && diff !== 0) {\n          swiper.setTranslate((rtl ? -swiper.translate : swiper.translate) - diff);\n        }\n      }\n      swiper.allowSlidePrev = allowSlidePrev;\n      swiper.allowSlideNext = allowSlideNext;\n      swiper.emit('loopFix');\n    }\n    function loopDestroy() {\n      var swiper = this;\n      var $wrapperEl = swiper.$wrapperEl;\n      var params = swiper.params;\n      var slides = swiper.slides;\n      $wrapperEl.children(\".\" + params.slideClass + \".\" + params.slideDuplicateClass + \",.\" + params.slideClass + \".\" + params.slideBlankClass).remove();\n      slides.removeAttr('data-swiper-slide-index');\n    }\n    var loop = {\n      loopCreate: loopCreate,\n      loopFix: loopFix,\n      loopDestroy: loopDestroy\n    };\n    function setGrabCursor(moving) {\n      var swiper = this;\n      if (Support.touch || !swiper.params.simulateTouch || swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) {\n        return;\n      }\n      var el = swiper.el;\n      el.style.cursor = 'move';\n      el.style.cursor = moving ? '-webkit-grabbing' : '-webkit-grab';\n      el.style.cursor = moving ? '-moz-grabbin' : '-moz-grab';\n      el.style.cursor = moving ? 'grabbing' : 'grab';\n    }\n    function unsetGrabCursor() {\n      var swiper = this;\n      if (Support.touch || swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) {\n        return;\n      }\n      swiper.el.style.cursor = '';\n    }\n    var grabCursor = {\n      setGrabCursor: setGrabCursor,\n      unsetGrabCursor: unsetGrabCursor\n    };\n    function appendSlide(slides) {\n      var swiper = this;\n      var $wrapperEl = swiper.$wrapperEl;\n      var params = swiper.params;\n      if (params.loop) {\n        swiper.loopDestroy();\n      }\n      if (_typeof(slides) === 'object' && 'length' in slides) {\n        for (var i = 0; i < slides.length; i += 1) {\n          if (slides[i]) {\n            $wrapperEl.append(slides[i]);\n          }\n        }\n      } else {\n        $wrapperEl.append(slides);\n      }\n      if (params.loop) {\n        swiper.loopCreate();\n      }\n      if (!(params.observer && Support.observer)) {\n        swiper.update();\n      }\n    }\n    function prependSlide(slides) {\n      var swiper = this;\n      var params = swiper.params;\n      var $wrapperEl = swiper.$wrapperEl;\n      var activeIndex = swiper.activeIndex;\n      if (params.loop) {\n        swiper.loopDestroy();\n      }\n      var newActiveIndex = activeIndex + 1;\n      if (_typeof(slides) === 'object' && 'length' in slides) {\n        for (var i = 0; i < slides.length; i += 1) {\n          if (slides[i]) {\n            $wrapperEl.prepend(slides[i]);\n          }\n        }\n        newActiveIndex = activeIndex + slides.length;\n      } else {\n        $wrapperEl.prepend(slides);\n      }\n      if (params.loop) {\n        swiper.loopCreate();\n      }\n      if (!(params.observer && Support.observer)) {\n        swiper.update();\n      }\n      swiper.slideTo(newActiveIndex, 0, false);\n    }\n    function addSlide(index, slides) {\n      var swiper = this;\n      var $wrapperEl = swiper.$wrapperEl;\n      var params = swiper.params;\n      var activeIndex = swiper.activeIndex;\n      var activeIndexBuffer = activeIndex;\n      if (params.loop) {\n        activeIndexBuffer -= swiper.loopedSlides;\n        swiper.loopDestroy();\n        swiper.slides = $wrapperEl.children(\".\" + params.slideClass);\n      }\n      var baseLength = swiper.slides.length;\n      if (index <= 0) {\n        swiper.prependSlide(slides);\n        return;\n      }\n      if (index >= baseLength) {\n        swiper.appendSlide(slides);\n        return;\n      }\n      var newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + 1 : activeIndexBuffer;\n      var slidesBuffer = [];\n      for (var i = baseLength - 1; i >= index; i -= 1) {\n        var currentSlide = swiper.slides.eq(i);\n        currentSlide.remove();\n        slidesBuffer.unshift(currentSlide);\n      }\n      if (_typeof(slides) === 'object' && 'length' in slides) {\n        for (var i$1 = 0; i$1 < slides.length; i$1 += 1) {\n          if (slides[i$1]) {\n            $wrapperEl.append(slides[i$1]);\n          }\n        }\n        newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + slides.length : activeIndexBuffer;\n      } else {\n        $wrapperEl.append(slides);\n      }\n      for (var i$2 = 0; i$2 < slidesBuffer.length; i$2 += 1) {\n        $wrapperEl.append(slidesBuffer[i$2]);\n      }\n      if (params.loop) {\n        swiper.loopCreate();\n      }\n      if (!(params.observer && Support.observer)) {\n        swiper.update();\n      }\n      if (params.loop) {\n        swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);\n      } else {\n        swiper.slideTo(newActiveIndex, 0, false);\n      }\n    }\n    function removeSlide(slidesIndexes) {\n      var swiper = this;\n      var params = swiper.params;\n      var $wrapperEl = swiper.$wrapperEl;\n      var activeIndex = swiper.activeIndex;\n      var activeIndexBuffer = activeIndex;\n      if (params.loop) {\n        activeIndexBuffer -= swiper.loopedSlides;\n        swiper.loopDestroy();\n        swiper.slides = $wrapperEl.children(\".\" + params.slideClass);\n      }\n      var newActiveIndex = activeIndexBuffer;\n      var indexToRemove;\n      if (_typeof(slidesIndexes) === 'object' && 'length' in slidesIndexes) {\n        for (var i = 0; i < slidesIndexes.length; i += 1) {\n          indexToRemove = slidesIndexes[i];\n          if (swiper.slides[indexToRemove]) {\n            swiper.slides.eq(indexToRemove).remove();\n          }\n          if (indexToRemove < newActiveIndex) {\n            newActiveIndex -= 1;\n          }\n        }\n        newActiveIndex = Math.max(newActiveIndex, 0);\n      } else {\n        indexToRemove = slidesIndexes;\n        if (swiper.slides[indexToRemove]) {\n          swiper.slides.eq(indexToRemove).remove();\n        }\n        if (indexToRemove < newActiveIndex) {\n          newActiveIndex -= 1;\n        }\n        newActiveIndex = Math.max(newActiveIndex, 0);\n      }\n      if (params.loop) {\n        swiper.loopCreate();\n      }\n      if (!(params.observer && Support.observer)) {\n        swiper.update();\n      }\n      if (params.loop) {\n        swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);\n      } else {\n        swiper.slideTo(newActiveIndex, 0, false);\n      }\n    }\n    function removeAllSlides() {\n      var swiper = this;\n      var slidesIndexes = [];\n      for (var i = 0; i < swiper.slides.length; i += 1) {\n        slidesIndexes.push(i);\n      }\n      swiper.removeSlide(slidesIndexes);\n    }\n    var manipulation = {\n      appendSlide: appendSlide,\n      prependSlide: prependSlide,\n      addSlide: addSlide,\n      removeSlide: removeSlide,\n      removeAllSlides: removeAllSlides\n    };\n    var Device = function Device() {\n      var platform = win.navigator.platform;\n      var ua = win.navigator.userAgent;\n      var device = {\n        ios: false,\n        android: false,\n        androidChrome: false,\n        desktop: false,\n        iphone: false,\n        ipod: false,\n        ipad: false,\n        edge: false,\n        ie: false,\n        firefox: false,\n        macos: false,\n        windows: false,\n        cordova: !!(win.cordova || win.phonegap),\n        phonegap: !!(win.cordova || win.phonegap),\n        electron: false\n      };\n      var screenWidth = win.screen.width;\n      var screenHeight = win.screen.height;\n      var android = ua.match(/(Android);?[\\s\\/]+([\\d.]+)?/); // eslint-disable-line\n      var ipad = ua.match(/(iPad).*OS\\s([\\d_]+)/);\n      var ipod = ua.match(/(iPod)(.*OS\\s([\\d_]+))?/);\n      var iphone = !ipad && ua.match(/(iPhone\\sOS|iOS)\\s([\\d_]+)/);\n      var ie = ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;\n      var edge = ua.indexOf('Edge/') >= 0;\n      var firefox = ua.indexOf('Gecko/') >= 0 && ua.indexOf('Firefox/') >= 0;\n      var windows = platform === 'Win32';\n      var electron = ua.toLowerCase().indexOf('electron') >= 0;\n      var macos = platform === 'MacIntel';\n\n      // iPadOs 13 fix\n      if (!ipad && macos && Support.touch && (screenWidth === 1024 && screenHeight === 1366 // Pro 12.9\n      || screenWidth === 834 && screenHeight === 1194 // Pro 11\n      || screenWidth === 834 && screenHeight === 1112 // Pro 10.5\n      || screenWidth === 768 && screenHeight === 1024 // other\n      )) {\n        ipad = ua.match(/(Version)\\/([\\d.]+)/);\n        macos = false;\n      }\n      device.ie = ie;\n      device.edge = edge;\n      device.firefox = firefox;\n\n      // Android\n      if (android && !windows) {\n        device.os = 'android';\n        device.osVersion = android[2];\n        device.android = true;\n        device.androidChrome = ua.toLowerCase().indexOf('chrome') >= 0;\n      }\n      if (ipad || iphone || ipod) {\n        device.os = 'ios';\n        device.ios = true;\n      }\n      // iOS\n      if (iphone && !ipod) {\n        device.osVersion = iphone[2].replace(/_/g, '.');\n        device.iphone = true;\n      }\n      if (ipad) {\n        device.osVersion = ipad[2].replace(/_/g, '.');\n        device.ipad = true;\n      }\n      if (ipod) {\n        device.osVersion = ipod[3] ? ipod[3].replace(/_/g, '.') : null;\n        device.ipod = true;\n      }\n      // iOS 8+ changed UA\n      if (device.ios && device.osVersion && ua.indexOf('Version/') >= 0) {\n        if (device.osVersion.split('.')[0] === '10') {\n          device.osVersion = ua.toLowerCase().split('version/')[1].split(' ')[0];\n        }\n      }\n\n      // Webview\n      device.webView = !!((iphone || ipad || ipod) && (ua.match(/.*AppleWebKit(?!.*Safari)/i) || win.navigator.standalone)) || win.matchMedia && win.matchMedia('(display-mode: standalone)').matches;\n      device.webview = device.webView;\n      device.standalone = device.webView;\n\n      // Desktop\n      device.desktop = !(device.ios || device.android) || electron;\n      if (device.desktop) {\n        device.electron = electron;\n        device.macos = macos;\n        device.windows = windows;\n        if (device.macos) {\n          device.os = 'macos';\n        }\n        if (device.windows) {\n          device.os = 'windows';\n        }\n      }\n\n      // Pixel Ratio\n      device.pixelRatio = win.devicePixelRatio || 1;\n\n      // Export object\n      return device;\n    }();\n    function onTouchStart(event) {\n      var swiper = this;\n      var data = swiper.touchEventsData;\n      var params = swiper.params;\n      var touches = swiper.touches;\n      if (swiper.animating && params.preventInteractionOnTransition) {\n        return;\n      }\n      var e = event;\n      if (e.originalEvent) {\n        e = e.originalEvent;\n      }\n      var $targetEl = $(e.target);\n      if (params.touchEventsTarget === 'wrapper') {\n        if (!$targetEl.closest(swiper.wrapperEl).length) {\n          return;\n        }\n      }\n      data.isTouchEvent = e.type === 'touchstart';\n      if (!data.isTouchEvent && 'which' in e && e.which === 3) {\n        return;\n      }\n      if (!data.isTouchEvent && 'button' in e && e.button > 0) {\n        return;\n      }\n      if (data.isTouched && data.isMoved) {\n        return;\n      }\n      if (params.noSwiping && $targetEl.closest(params.noSwipingSelector ? params.noSwipingSelector : \".\" + params.noSwipingClass)[0]) {\n        swiper.allowClick = true;\n        return;\n      }\n      if (params.swipeHandler) {\n        if (!$targetEl.closest(params.swipeHandler)[0]) {\n          return;\n        }\n      }\n      touches.currentX = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;\n      touches.currentY = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;\n      var startX = touches.currentX;\n      var startY = touches.currentY;\n\n      // Do NOT start if iOS edge swipe is detected. Otherwise iOS app (UIWebView) cannot swipe-to-go-back anymore\n\n      var edgeSwipeDetection = params.edgeSwipeDetection || params.iOSEdgeSwipeDetection;\n      var edgeSwipeThreshold = params.edgeSwipeThreshold || params.iOSEdgeSwipeThreshold;\n      if (edgeSwipeDetection && (startX <= edgeSwipeThreshold || startX >= win.screen.width - edgeSwipeThreshold)) {\n        return;\n      }\n      Utils.extend(data, {\n        isTouched: true,\n        isMoved: false,\n        allowTouchCallbacks: true,\n        isScrolling: undefined,\n        startMoving: undefined\n      });\n      touches.startX = startX;\n      touches.startY = startY;\n      data.touchStartTime = Utils.now();\n      swiper.allowClick = true;\n      swiper.updateSize();\n      swiper.swipeDirection = undefined;\n      if (params.threshold > 0) {\n        data.allowThresholdMove = false;\n      }\n      if (e.type !== 'touchstart') {\n        var preventDefault = true;\n        if ($targetEl.is(data.formElements)) {\n          preventDefault = false;\n        }\n        if (doc.activeElement && $(doc.activeElement).is(data.formElements) && doc.activeElement !== $targetEl[0]) {\n          doc.activeElement.blur();\n        }\n        var shouldPreventDefault = preventDefault && swiper.allowTouchMove && params.touchStartPreventDefault;\n        if (params.touchStartForcePreventDefault || shouldPreventDefault) {\n          e.preventDefault();\n        }\n      }\n      swiper.emit('touchStart', e);\n    }\n    function onTouchMove(event) {\n      var swiper = this;\n      var data = swiper.touchEventsData;\n      var params = swiper.params;\n      var touches = swiper.touches;\n      var rtl = swiper.rtlTranslate;\n      var e = event;\n      if (e.originalEvent) {\n        e = e.originalEvent;\n      }\n      if (!data.isTouched) {\n        if (data.startMoving && data.isScrolling) {\n          swiper.emit('touchMoveOpposite', e);\n        }\n        return;\n      }\n      if (data.isTouchEvent && e.type === 'mousemove') {\n        return;\n      }\n      var targetTouch = e.type === 'touchmove' && e.targetTouches && (e.targetTouches[0] || e.changedTouches[0]);\n      var pageX = e.type === 'touchmove' ? targetTouch.pageX : e.pageX;\n      var pageY = e.type === 'touchmove' ? targetTouch.pageY : e.pageY;\n      if (e.preventedByNestedSwiper) {\n        touches.startX = pageX;\n        touches.startY = pageY;\n        return;\n      }\n      if (!swiper.allowTouchMove) {\n        // isMoved = true;\n        swiper.allowClick = false;\n        if (data.isTouched) {\n          Utils.extend(touches, {\n            startX: pageX,\n            startY: pageY,\n            currentX: pageX,\n            currentY: pageY\n          });\n          data.touchStartTime = Utils.now();\n        }\n        return;\n      }\n      if (data.isTouchEvent && params.touchReleaseOnEdges && !params.loop) {\n        if (swiper.isVertical()) {\n          // Vertical\n          if (pageY < touches.startY && swiper.translate <= swiper.maxTranslate() || pageY > touches.startY && swiper.translate >= swiper.minTranslate()) {\n            data.isTouched = false;\n            data.isMoved = false;\n            return;\n          }\n        } else if (pageX < touches.startX && swiper.translate <= swiper.maxTranslate() || pageX > touches.startX && swiper.translate >= swiper.minTranslate()) {\n          return;\n        }\n      }\n      if (data.isTouchEvent && doc.activeElement) {\n        if (e.target === doc.activeElement && $(e.target).is(data.formElements)) {\n          data.isMoved = true;\n          swiper.allowClick = false;\n          return;\n        }\n      }\n      if (data.allowTouchCallbacks) {\n        swiper.emit('touchMove', e);\n      }\n      if (e.targetTouches && e.targetTouches.length > 1) {\n        return;\n      }\n      touches.currentX = pageX;\n      touches.currentY = pageY;\n      var diffX = touches.currentX - touches.startX;\n      var diffY = touches.currentY - touches.startY;\n      if (swiper.params.threshold && Math.sqrt(Math.pow(diffX, 2) + Math.pow(diffY, 2)) < swiper.params.threshold) {\n        return;\n      }\n      if (typeof data.isScrolling === 'undefined') {\n        var touchAngle;\n        if (swiper.isHorizontal() && touches.currentY === touches.startY || swiper.isVertical() && touches.currentX === touches.startX) {\n          data.isScrolling = false;\n        } else {\n          // eslint-disable-next-line\n          if (diffX * diffX + diffY * diffY >= 25) {\n            touchAngle = Math.atan2(Math.abs(diffY), Math.abs(diffX)) * 180 / Math.PI;\n            data.isScrolling = swiper.isHorizontal() ? touchAngle > params.touchAngle : 90 - touchAngle > params.touchAngle;\n          }\n        }\n      }\n      if (data.isScrolling) {\n        swiper.emit('touchMoveOpposite', e);\n      }\n      if (typeof data.startMoving === 'undefined') {\n        if (touches.currentX !== touches.startX || touches.currentY !== touches.startY) {\n          data.startMoving = true;\n        }\n      }\n      if (data.isScrolling) {\n        data.isTouched = false;\n        return;\n      }\n      if (!data.startMoving) {\n        return;\n      }\n      swiper.allowClick = false;\n      if (!params.cssMode) {\n        e.preventDefault();\n      }\n      if (params.touchMoveStopPropagation && !params.nested) {\n        e.stopPropagation();\n      }\n      if (!data.isMoved) {\n        if (params.loop) {\n          swiper.loopFix();\n        }\n        data.startTranslate = swiper.getTranslate();\n        swiper.setTransition(0);\n        if (swiper.animating) {\n          swiper.$wrapperEl.trigger('webkitTransitionEnd transitionend');\n        }\n        data.allowMomentumBounce = false;\n        // Grab Cursor\n        if (params.grabCursor && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {\n          swiper.setGrabCursor(true);\n        }\n        swiper.emit('sliderFirstMove', e);\n      }\n      swiper.emit('sliderMove', e);\n      data.isMoved = true;\n      var diff = swiper.isHorizontal() ? diffX : diffY;\n      touches.diff = diff;\n      diff *= params.touchRatio;\n      if (rtl) {\n        diff = -diff;\n      }\n      swiper.swipeDirection = diff > 0 ? 'prev' : 'next';\n      data.currentTranslate = diff + data.startTranslate;\n      var disableParentSwiper = true;\n      var resistanceRatio = params.resistanceRatio;\n      if (params.touchReleaseOnEdges) {\n        resistanceRatio = 0;\n      }\n      if (diff > 0 && data.currentTranslate > swiper.minTranslate()) {\n        disableParentSwiper = false;\n        if (params.resistance) {\n          data.currentTranslate = swiper.minTranslate() - 1 + Math.pow(-swiper.minTranslate() + data.startTranslate + diff, resistanceRatio);\n        }\n      } else if (diff < 0 && data.currentTranslate < swiper.maxTranslate()) {\n        disableParentSwiper = false;\n        if (params.resistance) {\n          data.currentTranslate = swiper.maxTranslate() + 1 - Math.pow(swiper.maxTranslate() - data.startTranslate - diff, resistanceRatio);\n        }\n      }\n      if (disableParentSwiper) {\n        e.preventedByNestedSwiper = true;\n      }\n\n      // Directions locks\n      if (!swiper.allowSlideNext && swiper.swipeDirection === 'next' && data.currentTranslate < data.startTranslate) {\n        data.currentTranslate = data.startTranslate;\n      }\n      if (!swiper.allowSlidePrev && swiper.swipeDirection === 'prev' && data.currentTranslate > data.startTranslate) {\n        data.currentTranslate = data.startTranslate;\n      }\n\n      // Threshold\n      if (params.threshold > 0) {\n        if (Math.abs(diff) > params.threshold || data.allowThresholdMove) {\n          if (!data.allowThresholdMove) {\n            data.allowThresholdMove = true;\n            touches.startX = touches.currentX;\n            touches.startY = touches.currentY;\n            data.currentTranslate = data.startTranslate;\n            touches.diff = swiper.isHorizontal() ? touches.currentX - touches.startX : touches.currentY - touches.startY;\n            return;\n          }\n        } else {\n          data.currentTranslate = data.startTranslate;\n          return;\n        }\n      }\n      if (!params.followFinger || params.cssMode) {\n        return;\n      }\n\n      // Update active index in free mode\n      if (params.freeMode || params.watchSlidesProgress || params.watchSlidesVisibility) {\n        swiper.updateActiveIndex();\n        swiper.updateSlidesClasses();\n      }\n      if (params.freeMode) {\n        // Velocity\n        if (data.velocities.length === 0) {\n          data.velocities.push({\n            position: touches[swiper.isHorizontal() ? 'startX' : 'startY'],\n            time: data.touchStartTime\n          });\n        }\n        data.velocities.push({\n          position: touches[swiper.isHorizontal() ? 'currentX' : 'currentY'],\n          time: Utils.now()\n        });\n      }\n      // Update progress\n      swiper.updateProgress(data.currentTranslate);\n      // Update translate\n      swiper.setTranslate(data.currentTranslate);\n    }\n    function onTouchEnd(event) {\n      var swiper = this;\n      var data = swiper.touchEventsData;\n      var params = swiper.params;\n      var touches = swiper.touches;\n      var rtl = swiper.rtlTranslate;\n      var $wrapperEl = swiper.$wrapperEl;\n      var slidesGrid = swiper.slidesGrid;\n      var snapGrid = swiper.snapGrid;\n      var e = event;\n      if (e.originalEvent) {\n        e = e.originalEvent;\n      }\n      if (data.allowTouchCallbacks) {\n        swiper.emit('touchEnd', e);\n      }\n      data.allowTouchCallbacks = false;\n      if (!data.isTouched) {\n        if (data.isMoved && params.grabCursor) {\n          swiper.setGrabCursor(false);\n        }\n        data.isMoved = false;\n        data.startMoving = false;\n        return;\n      }\n      // Return Grab Cursor\n      if (params.grabCursor && data.isMoved && data.isTouched && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {\n        swiper.setGrabCursor(false);\n      }\n\n      // Time diff\n      var touchEndTime = Utils.now();\n      var timeDiff = touchEndTime - data.touchStartTime;\n\n      // Tap, doubleTap, Click\n      if (swiper.allowClick) {\n        swiper.updateClickedSlide(e);\n        swiper.emit('tap click', e);\n        if (timeDiff < 300 && touchEndTime - data.lastClickTime < 300) {\n          swiper.emit('doubleTap doubleClick', e);\n        }\n      }\n      data.lastClickTime = Utils.now();\n      Utils.nextTick(function () {\n        if (!swiper.destroyed) {\n          swiper.allowClick = true;\n        }\n      });\n      if (!data.isTouched || !data.isMoved || !swiper.swipeDirection || touches.diff === 0 || data.currentTranslate === data.startTranslate) {\n        data.isTouched = false;\n        data.isMoved = false;\n        data.startMoving = false;\n        return;\n      }\n      data.isTouched = false;\n      data.isMoved = false;\n      data.startMoving = false;\n      var currentPos;\n      if (params.followFinger) {\n        currentPos = rtl ? swiper.translate : -swiper.translate;\n      } else {\n        currentPos = -data.currentTranslate;\n      }\n      if (params.cssMode) {\n        return;\n      }\n      if (params.freeMode) {\n        if (currentPos < -swiper.minTranslate()) {\n          swiper.slideTo(swiper.activeIndex);\n          return;\n        }\n        if (currentPos > -swiper.maxTranslate()) {\n          if (swiper.slides.length < snapGrid.length) {\n            swiper.slideTo(snapGrid.length - 1);\n          } else {\n            swiper.slideTo(swiper.slides.length - 1);\n          }\n          return;\n        }\n        if (params.freeModeMomentum) {\n          if (data.velocities.length > 1) {\n            var lastMoveEvent = data.velocities.pop();\n            var velocityEvent = data.velocities.pop();\n            var distance = lastMoveEvent.position - velocityEvent.position;\n            var time = lastMoveEvent.time - velocityEvent.time;\n            swiper.velocity = distance / time;\n            swiper.velocity /= 2;\n            if (Math.abs(swiper.velocity) < params.freeModeMinimumVelocity) {\n              swiper.velocity = 0;\n            }\n            // this implies that the user stopped moving a finger then released.\n            // There would be no events with distance zero, so the last event is stale.\n            if (time > 150 || Utils.now() - lastMoveEvent.time > 300) {\n              swiper.velocity = 0;\n            }\n          } else {\n            swiper.velocity = 0;\n          }\n          swiper.velocity *= params.freeModeMomentumVelocityRatio;\n          data.velocities.length = 0;\n          var momentumDuration = 1000 * params.freeModeMomentumRatio;\n          var momentumDistance = swiper.velocity * momentumDuration;\n          var newPosition = swiper.translate + momentumDistance;\n          if (rtl) {\n            newPosition = -newPosition;\n          }\n          var doBounce = false;\n          var afterBouncePosition;\n          var bounceAmount = Math.abs(swiper.velocity) * 20 * params.freeModeMomentumBounceRatio;\n          var needsLoopFix;\n          if (newPosition < swiper.maxTranslate()) {\n            if (params.freeModeMomentumBounce) {\n              if (newPosition + swiper.maxTranslate() < -bounceAmount) {\n                newPosition = swiper.maxTranslate() - bounceAmount;\n              }\n              afterBouncePosition = swiper.maxTranslate();\n              doBounce = true;\n              data.allowMomentumBounce = true;\n            } else {\n              newPosition = swiper.maxTranslate();\n            }\n            if (params.loop && params.centeredSlides) {\n              needsLoopFix = true;\n            }\n          } else if (newPosition > swiper.minTranslate()) {\n            if (params.freeModeMomentumBounce) {\n              if (newPosition - swiper.minTranslate() > bounceAmount) {\n                newPosition = swiper.minTranslate() + bounceAmount;\n              }\n              afterBouncePosition = swiper.minTranslate();\n              doBounce = true;\n              data.allowMomentumBounce = true;\n            } else {\n              newPosition = swiper.minTranslate();\n            }\n            if (params.loop && params.centeredSlides) {\n              needsLoopFix = true;\n            }\n          } else if (params.freeModeSticky) {\n            var nextSlide;\n            for (var j = 0; j < snapGrid.length; j += 1) {\n              if (snapGrid[j] > -newPosition) {\n                nextSlide = j;\n                break;\n              }\n            }\n            if (Math.abs(snapGrid[nextSlide] - newPosition) < Math.abs(snapGrid[nextSlide - 1] - newPosition) || swiper.swipeDirection === 'next') {\n              newPosition = snapGrid[nextSlide];\n            } else {\n              newPosition = snapGrid[nextSlide - 1];\n            }\n            newPosition = -newPosition;\n          }\n          if (needsLoopFix) {\n            swiper.once('transitionEnd', function () {\n              swiper.loopFix();\n            });\n          }\n          // Fix duration\n          if (swiper.velocity !== 0) {\n            if (rtl) {\n              momentumDuration = Math.abs((-newPosition - swiper.translate) / swiper.velocity);\n            } else {\n              momentumDuration = Math.abs((newPosition - swiper.translate) / swiper.velocity);\n            }\n            if (params.freeModeSticky) {\n              // If freeModeSticky is active and the user ends a swipe with a slow-velocity\n              // event, then durations can be 20+ seconds to slide one (or zero!) slides.\n              // It's easy to see this when simulating touch with mouse events. To fix this,\n              // limit single-slide swipes to the default slide duration. This also has the\n              // nice side effect of matching slide speed if the user stopped moving before\n              // lifting finger or mouse vs. moving slowly before lifting the finger/mouse.\n              // For faster swipes, also apply limits (albeit higher ones).\n              var moveDistance = Math.abs((rtl ? -newPosition : newPosition) - swiper.translate);\n              var currentSlideSize = swiper.slidesSizesGrid[swiper.activeIndex];\n              if (moveDistance < currentSlideSize) {\n                momentumDuration = params.speed;\n              } else if (moveDistance < 2 * currentSlideSize) {\n                momentumDuration = params.speed * 1.5;\n              } else {\n                momentumDuration = params.speed * 2.5;\n              }\n            }\n          } else if (params.freeModeSticky) {\n            swiper.slideToClosest();\n            return;\n          }\n          if (params.freeModeMomentumBounce && doBounce) {\n            swiper.updateProgress(afterBouncePosition);\n            swiper.setTransition(momentumDuration);\n            swiper.setTranslate(newPosition);\n            swiper.transitionStart(true, swiper.swipeDirection);\n            swiper.animating = true;\n            $wrapperEl.transitionEnd(function () {\n              if (!swiper || swiper.destroyed || !data.allowMomentumBounce) {\n                return;\n              }\n              swiper.emit('momentumBounce');\n              swiper.setTransition(params.speed);\n              swiper.setTranslate(afterBouncePosition);\n              $wrapperEl.transitionEnd(function () {\n                if (!swiper || swiper.destroyed) {\n                  return;\n                }\n                swiper.transitionEnd();\n              });\n            });\n          } else if (swiper.velocity) {\n            swiper.updateProgress(newPosition);\n            swiper.setTransition(momentumDuration);\n            swiper.setTranslate(newPosition);\n            swiper.transitionStart(true, swiper.swipeDirection);\n            if (!swiper.animating) {\n              swiper.animating = true;\n              $wrapperEl.transitionEnd(function () {\n                if (!swiper || swiper.destroyed) {\n                  return;\n                }\n                swiper.transitionEnd();\n              });\n            }\n          } else {\n            swiper.updateProgress(newPosition);\n          }\n          swiper.updateActiveIndex();\n          swiper.updateSlidesClasses();\n        } else if (params.freeModeSticky) {\n          swiper.slideToClosest();\n          return;\n        }\n        if (!params.freeModeMomentum || timeDiff >= params.longSwipesMs) {\n          swiper.updateProgress();\n          swiper.updateActiveIndex();\n          swiper.updateSlidesClasses();\n        }\n        return;\n      }\n\n      // Find current slide\n      var stopIndex = 0;\n      var groupSize = swiper.slidesSizesGrid[0];\n      for (var i = 0; i < slidesGrid.length; i += i < params.slidesPerGroupSkip ? 1 : params.slidesPerGroup) {\n        var increment$1 = i < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;\n        if (typeof slidesGrid[i + increment$1] !== 'undefined') {\n          if (currentPos >= slidesGrid[i] && currentPos < slidesGrid[i + increment$1]) {\n            stopIndex = i;\n            groupSize = slidesGrid[i + increment$1] - slidesGrid[i];\n          }\n        } else if (currentPos >= slidesGrid[i]) {\n          stopIndex = i;\n          groupSize = slidesGrid[slidesGrid.length - 1] - slidesGrid[slidesGrid.length - 2];\n        }\n      }\n\n      // Find current slide size\n      var ratio = (currentPos - slidesGrid[stopIndex]) / groupSize;\n      var increment = stopIndex < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;\n      if (timeDiff > params.longSwipesMs) {\n        // Long touches\n        if (!params.longSwipes) {\n          swiper.slideTo(swiper.activeIndex);\n          return;\n        }\n        if (swiper.swipeDirection === 'next') {\n          if (ratio >= params.longSwipesRatio) {\n            swiper.slideTo(stopIndex + increment);\n          } else {\n            swiper.slideTo(stopIndex);\n          }\n        }\n        if (swiper.swipeDirection === 'prev') {\n          if (ratio > 1 - params.longSwipesRatio) {\n            swiper.slideTo(stopIndex + increment);\n          } else {\n            swiper.slideTo(stopIndex);\n          }\n        }\n      } else {\n        // Short swipes\n        if (!params.shortSwipes) {\n          swiper.slideTo(swiper.activeIndex);\n          return;\n        }\n        var isNavButtonTarget = swiper.navigation && (e.target === swiper.navigation.nextEl || e.target === swiper.navigation.prevEl);\n        if (!isNavButtonTarget) {\n          if (swiper.swipeDirection === 'next') {\n            swiper.slideTo(stopIndex + increment);\n          }\n          if (swiper.swipeDirection === 'prev') {\n            swiper.slideTo(stopIndex);\n          }\n        } else if (e.target === swiper.navigation.nextEl) {\n          swiper.slideTo(stopIndex + increment);\n        } else {\n          swiper.slideTo(stopIndex);\n        }\n      }\n    }\n    function onResize() {\n      var swiper = this;\n      var params = swiper.params;\n      var el = swiper.el;\n      if (el && el.offsetWidth === 0) {\n        return;\n      }\n\n      // Breakpoints\n      if (params.breakpoints) {\n        swiper.setBreakpoint();\n      }\n\n      // Save locks\n      var allowSlideNext = swiper.allowSlideNext;\n      var allowSlidePrev = swiper.allowSlidePrev;\n      var snapGrid = swiper.snapGrid;\n\n      // Disable locks on resize\n      swiper.allowSlideNext = true;\n      swiper.allowSlidePrev = true;\n      swiper.updateSize();\n      swiper.updateSlides();\n      swiper.updateSlidesClasses();\n      if ((params.slidesPerView === 'auto' || params.slidesPerView > 1) && swiper.isEnd && !swiper.params.centeredSlides) {\n        swiper.slideTo(swiper.slides.length - 1, 0, false, true);\n      } else {\n        swiper.slideTo(swiper.activeIndex, 0, false, true);\n      }\n      if (swiper.autoplay && swiper.autoplay.running && swiper.autoplay.paused) {\n        swiper.autoplay.run();\n      }\n      // Return locks after resize\n      swiper.allowSlidePrev = allowSlidePrev;\n      swiper.allowSlideNext = allowSlideNext;\n      if (swiper.params.watchOverflow && snapGrid !== swiper.snapGrid) {\n        swiper.checkOverflow();\n      }\n    }\n    function onClick(e) {\n      var swiper = this;\n      if (!swiper.allowClick) {\n        if (swiper.params.preventClicks) {\n          e.preventDefault();\n        }\n        if (swiper.params.preventClicksPropagation && swiper.animating) {\n          e.stopPropagation();\n          e.stopImmediatePropagation();\n        }\n      }\n    }\n    function onScroll() {\n      var swiper = this;\n      var wrapperEl = swiper.wrapperEl;\n      swiper.previousTranslate = swiper.translate;\n      swiper.translate = swiper.isHorizontal() ? -wrapperEl.scrollLeft : -wrapperEl.scrollTop;\n      // eslint-disable-next-line\n      if (swiper.translate === -0) {\n        swiper.translate = 0;\n      }\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n      var newProgress;\n      var translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\n      if (translatesDiff === 0) {\n        newProgress = 0;\n      } else {\n        newProgress = (swiper.translate - swiper.minTranslate()) / translatesDiff;\n      }\n      if (newProgress !== swiper.progress) {\n        swiper.updateProgress(swiper.translate);\n      }\n      swiper.emit('setTranslate', swiper.translate, false);\n    }\n    var dummyEventAttached = false;\n    function dummyEventListener() {}\n    function attachEvents() {\n      var swiper = this;\n      var params = swiper.params;\n      var touchEvents = swiper.touchEvents;\n      var el = swiper.el;\n      var wrapperEl = swiper.wrapperEl;\n      swiper.onTouchStart = onTouchStart.bind(swiper);\n      swiper.onTouchMove = onTouchMove.bind(swiper);\n      swiper.onTouchEnd = onTouchEnd.bind(swiper);\n      if (params.cssMode) {\n        swiper.onScroll = onScroll.bind(swiper);\n      }\n      swiper.onClick = onClick.bind(swiper);\n      var capture = !!params.nested;\n\n      // Touch Events\n      if (!Support.touch && Support.pointerEvents) {\n        el.addEventListener(touchEvents.start, swiper.onTouchStart, false);\n        doc.addEventListener(touchEvents.move, swiper.onTouchMove, capture);\n        doc.addEventListener(touchEvents.end, swiper.onTouchEnd, false);\n      } else {\n        if (Support.touch) {\n          var passiveListener = touchEvents.start === 'touchstart' && Support.passiveListener && params.passiveListeners ? {\n            passive: true,\n            capture: false\n          } : false;\n          el.addEventListener(touchEvents.start, swiper.onTouchStart, passiveListener);\n          el.addEventListener(touchEvents.move, swiper.onTouchMove, Support.passiveListener ? {\n            passive: false,\n            capture: capture\n          } : capture);\n          el.addEventListener(touchEvents.end, swiper.onTouchEnd, passiveListener);\n          if (touchEvents.cancel) {\n            el.addEventListener(touchEvents.cancel, swiper.onTouchEnd, passiveListener);\n          }\n          if (!dummyEventAttached) {\n            doc.addEventListener('touchstart', dummyEventListener);\n            dummyEventAttached = true;\n          }\n        }\n        if (params.simulateTouch && !Device.ios && !Device.android || params.simulateTouch && !Support.touch && Device.ios) {\n          el.addEventListener('mousedown', swiper.onTouchStart, false);\n          doc.addEventListener('mousemove', swiper.onTouchMove, capture);\n          doc.addEventListener('mouseup', swiper.onTouchEnd, false);\n        }\n      }\n      // Prevent Links Clicks\n      if (params.preventClicks || params.preventClicksPropagation) {\n        el.addEventListener('click', swiper.onClick, true);\n      }\n      if (params.cssMode) {\n        wrapperEl.addEventListener('scroll', swiper.onScroll);\n      }\n\n      // Resize handler\n      if (params.updateOnWindowResize) {\n        swiper.on(Device.ios || Device.android ? 'resize orientationchange observerUpdate' : 'resize observerUpdate', onResize, true);\n      } else {\n        swiper.on('observerUpdate', onResize, true);\n      }\n    }\n    function detachEvents() {\n      var swiper = this;\n      var params = swiper.params;\n      var touchEvents = swiper.touchEvents;\n      var el = swiper.el;\n      var wrapperEl = swiper.wrapperEl;\n      var capture = !!params.nested;\n\n      // Touch Events\n      if (!Support.touch && Support.pointerEvents) {\n        el.removeEventListener(touchEvents.start, swiper.onTouchStart, false);\n        doc.removeEventListener(touchEvents.move, swiper.onTouchMove, capture);\n        doc.removeEventListener(touchEvents.end, swiper.onTouchEnd, false);\n      } else {\n        if (Support.touch) {\n          var passiveListener = touchEvents.start === 'onTouchStart' && Support.passiveListener && params.passiveListeners ? {\n            passive: true,\n            capture: false\n          } : false;\n          el.removeEventListener(touchEvents.start, swiper.onTouchStart, passiveListener);\n          el.removeEventListener(touchEvents.move, swiper.onTouchMove, capture);\n          el.removeEventListener(touchEvents.end, swiper.onTouchEnd, passiveListener);\n          if (touchEvents.cancel) {\n            el.removeEventListener(touchEvents.cancel, swiper.onTouchEnd, passiveListener);\n          }\n        }\n        if (params.simulateTouch && !Device.ios && !Device.android || params.simulateTouch && !Support.touch && Device.ios) {\n          el.removeEventListener('mousedown', swiper.onTouchStart, false);\n          doc.removeEventListener('mousemove', swiper.onTouchMove, capture);\n          doc.removeEventListener('mouseup', swiper.onTouchEnd, false);\n        }\n      }\n      // Prevent Links Clicks\n      if (params.preventClicks || params.preventClicksPropagation) {\n        el.removeEventListener('click', swiper.onClick, true);\n      }\n      if (params.cssMode) {\n        wrapperEl.removeEventListener('scroll', swiper.onScroll);\n      }\n\n      // Resize handler\n      swiper.off(Device.ios || Device.android ? 'resize orientationchange observerUpdate' : 'resize observerUpdate', onResize);\n    }\n    var events = {\n      attachEvents: attachEvents,\n      detachEvents: detachEvents\n    };\n    function setBreakpoint() {\n      var swiper = this;\n      var activeIndex = swiper.activeIndex;\n      var initialized = swiper.initialized;\n      var loopedSlides = swiper.loopedSlides;\n      if (loopedSlides === void 0) loopedSlides = 0;\n      var params = swiper.params;\n      var $el = swiper.$el;\n      var breakpoints = params.breakpoints;\n      if (!breakpoints || breakpoints && Object.keys(breakpoints).length === 0) {\n        return;\n      }\n\n      // Get breakpoint for window width and update parameters\n      var breakpoint = swiper.getBreakpoint(breakpoints);\n      if (breakpoint && swiper.currentBreakpoint !== breakpoint) {\n        var breakpointOnlyParams = breakpoint in breakpoints ? breakpoints[breakpoint] : undefined;\n        if (breakpointOnlyParams) {\n          ['slidesPerView', 'spaceBetween', 'slidesPerGroup', 'slidesPerGroupSkip', 'slidesPerColumn'].forEach(function (param) {\n            var paramValue = breakpointOnlyParams[param];\n            if (typeof paramValue === 'undefined') {\n              return;\n            }\n            if (param === 'slidesPerView' && (paramValue === 'AUTO' || paramValue === 'auto')) {\n              breakpointOnlyParams[param] = 'auto';\n            } else if (param === 'slidesPerView') {\n              breakpointOnlyParams[param] = parseFloat(paramValue);\n            } else {\n              breakpointOnlyParams[param] = parseInt(paramValue, 10);\n            }\n          });\n        }\n        var breakpointParams = breakpointOnlyParams || swiper.originalParams;\n        var wasMultiRow = params.slidesPerColumn > 1;\n        var isMultiRow = breakpointParams.slidesPerColumn > 1;\n        if (wasMultiRow && !isMultiRow) {\n          $el.removeClass(params.containerModifierClass + \"multirow \" + params.containerModifierClass + \"multirow-column\");\n        } else if (!wasMultiRow && isMultiRow) {\n          $el.addClass(params.containerModifierClass + \"multirow\");\n          if (breakpointParams.slidesPerColumnFill === 'column') {\n            $el.addClass(params.containerModifierClass + \"multirow-column\");\n          }\n        }\n        var directionChanged = breakpointParams.direction && breakpointParams.direction !== params.direction;\n        var needsReLoop = params.loop && (breakpointParams.slidesPerView !== params.slidesPerView || directionChanged);\n        if (directionChanged && initialized) {\n          swiper.changeDirection();\n        }\n        Utils.extend(swiper.params, breakpointParams);\n        Utils.extend(swiper, {\n          allowTouchMove: swiper.params.allowTouchMove,\n          allowSlideNext: swiper.params.allowSlideNext,\n          allowSlidePrev: swiper.params.allowSlidePrev\n        });\n        swiper.currentBreakpoint = breakpoint;\n        if (needsReLoop && initialized) {\n          swiper.loopDestroy();\n          swiper.loopCreate();\n          swiper.updateSlides();\n          swiper.slideTo(activeIndex - loopedSlides + swiper.loopedSlides, 0, false);\n        }\n        swiper.emit('breakpoint', breakpointParams);\n      }\n    }\n    function getBreakpoint(breakpoints) {\n      // Get breakpoint for window width\n      if (!breakpoints) {\n        return undefined;\n      }\n      var breakpoint = false;\n      var points = Object.keys(breakpoints).map(function (point) {\n        if (typeof point === 'string' && point.indexOf('@') === 0) {\n          var minRatio = parseFloat(point.substr(1));\n          var value = win.innerHeight * minRatio;\n          return {\n            value: value,\n            point: point\n          };\n        }\n        return {\n          value: point,\n          point: point\n        };\n      });\n      points.sort(function (a, b) {\n        return parseInt(a.value, 10) - parseInt(b.value, 10);\n      });\n      for (var i = 0; i < points.length; i += 1) {\n        var ref = points[i];\n        var point = ref.point;\n        var value = ref.value;\n        if (value <= win.innerWidth) {\n          breakpoint = point;\n        }\n      }\n      return breakpoint || 'max';\n    }\n    var breakpoints = {\n      setBreakpoint: setBreakpoint,\n      getBreakpoint: getBreakpoint\n    };\n    function addClasses() {\n      var swiper = this;\n      var classNames = swiper.classNames;\n      var params = swiper.params;\n      var rtl = swiper.rtl;\n      var $el = swiper.$el;\n      var suffixes = [];\n      suffixes.push('initialized');\n      suffixes.push(params.direction);\n      if (params.freeMode) {\n        suffixes.push('free-mode');\n      }\n      if (params.autoHeight) {\n        suffixes.push('autoheight');\n      }\n      if (rtl) {\n        suffixes.push('rtl');\n      }\n      if (params.slidesPerColumn > 1) {\n        suffixes.push('multirow');\n        if (params.slidesPerColumnFill === 'column') {\n          suffixes.push('multirow-column');\n        }\n      }\n      if (Device.android) {\n        suffixes.push('android');\n      }\n      if (Device.ios) {\n        suffixes.push('ios');\n      }\n      if (params.cssMode) {\n        suffixes.push('css-mode');\n      }\n      suffixes.forEach(function (suffix) {\n        classNames.push(params.containerModifierClass + suffix);\n      });\n      $el.addClass(classNames.join(' '));\n    }\n    function removeClasses() {\n      var swiper = this;\n      var $el = swiper.$el;\n      var classNames = swiper.classNames;\n      $el.removeClass(classNames.join(' '));\n    }\n    var classes = {\n      addClasses: addClasses,\n      removeClasses: removeClasses\n    };\n    function loadImage(imageEl, src, srcset, sizes, checkForComplete, callback) {\n      var image;\n      function onReady() {\n        if (callback) {\n          callback();\n        }\n      }\n      if (!imageEl.complete || !checkForComplete) {\n        if (src) {\n          image = new win.Image();\n          image.onload = onReady;\n          image.onerror = onReady;\n          if (sizes) {\n            image.sizes = sizes;\n          }\n          if (srcset) {\n            image.srcset = srcset;\n          }\n          if (src) {\n            image.src = src;\n          }\n        } else {\n          onReady();\n        }\n      } else {\n        // image already loaded...\n        onReady();\n      }\n    }\n    function preloadImages() {\n      var swiper = this;\n      swiper.imagesToLoad = swiper.$el.find('img');\n      function onReady() {\n        if (typeof swiper === 'undefined' || swiper === null || !swiper || swiper.destroyed) {\n          return;\n        }\n        if (swiper.imagesLoaded !== undefined) {\n          swiper.imagesLoaded += 1;\n        }\n        if (swiper.imagesLoaded === swiper.imagesToLoad.length) {\n          if (swiper.params.updateOnImagesReady) {\n            swiper.update();\n          }\n          swiper.emit('imagesReady');\n        }\n      }\n      for (var i = 0; i < swiper.imagesToLoad.length; i += 1) {\n        var imageEl = swiper.imagesToLoad[i];\n        swiper.loadImage(imageEl, imageEl.currentSrc || imageEl.getAttribute('src'), imageEl.srcset || imageEl.getAttribute('srcset'), imageEl.sizes || imageEl.getAttribute('sizes'), true, onReady);\n      }\n    }\n    var images = {\n      loadImage: loadImage,\n      preloadImages: preloadImages\n    };\n    function checkOverflow() {\n      var swiper = this;\n      var params = swiper.params;\n      var wasLocked = swiper.isLocked;\n      var lastSlidePosition = swiper.slides.length > 0 && params.slidesOffsetBefore + params.spaceBetween * (swiper.slides.length - 1) + swiper.slides[0].offsetWidth * swiper.slides.length;\n      if (params.slidesOffsetBefore && params.slidesOffsetAfter && lastSlidePosition) {\n        swiper.isLocked = lastSlidePosition <= swiper.size;\n      } else {\n        swiper.isLocked = swiper.snapGrid.length === 1;\n      }\n      swiper.allowSlideNext = !swiper.isLocked;\n      swiper.allowSlidePrev = !swiper.isLocked;\n\n      // events\n      if (wasLocked !== swiper.isLocked) {\n        swiper.emit(swiper.isLocked ? 'lock' : 'unlock');\n      }\n      if (wasLocked && wasLocked !== swiper.isLocked) {\n        swiper.isEnd = false;\n        swiper.navigation.update();\n      }\n    }\n    var checkOverflow$1 = {\n      checkOverflow: checkOverflow\n    };\n    var defaults = {\n      init: true,\n      direction: 'horizontal',\n      touchEventsTarget: 'container',\n      initialSlide: 0,\n      speed: 300,\n      cssMode: false,\n      updateOnWindowResize: true,\n      //\n      preventInteractionOnTransition: false,\n      // To support iOS's swipe-to-go-back gesture (when being used in-app, with UIWebView).\n      edgeSwipeDetection: false,\n      edgeSwipeThreshold: 20,\n      // Free mode\n      freeMode: false,\n      freeModeMomentum: true,\n      freeModeMomentumRatio: 1,\n      freeModeMomentumBounce: true,\n      freeModeMomentumBounceRatio: 1,\n      freeModeMomentumVelocityRatio: 1,\n      freeModeSticky: false,\n      freeModeMinimumVelocity: 0.02,\n      // Autoheight\n      autoHeight: false,\n      // Set wrapper width\n      setWrapperSize: false,\n      // Virtual Translate\n      virtualTranslate: false,\n      // Effects\n      effect: 'slide',\n      // 'slide' or 'fade' or 'cube' or 'coverflow' or 'flip'\n\n      // Breakpoints\n      breakpoints: undefined,\n      // Slides grid\n      spaceBetween: 0,\n      slidesPerView: 1,\n      slidesPerColumn: 1,\n      slidesPerColumnFill: 'column',\n      slidesPerGroup: 1,\n      slidesPerGroupSkip: 0,\n      centeredSlides: false,\n      centeredSlidesBounds: false,\n      slidesOffsetBefore: 0,\n      // in px\n      slidesOffsetAfter: 0,\n      // in px\n      normalizeSlideIndex: true,\n      centerInsufficientSlides: false,\n      // Disable swiper and hide navigation when container not overflow\n      watchOverflow: false,\n      // Round length\n      roundLengths: false,\n      // Touches\n      touchRatio: 1,\n      touchAngle: 45,\n      simulateTouch: true,\n      shortSwipes: true,\n      longSwipes: true,\n      longSwipesRatio: 0.5,\n      longSwipesMs: 300,\n      followFinger: true,\n      allowTouchMove: true,\n      threshold: 0,\n      touchMoveStopPropagation: false,\n      touchStartPreventDefault: true,\n      touchStartForcePreventDefault: false,\n      touchReleaseOnEdges: false,\n      // Unique Navigation Elements\n      uniqueNavElements: true,\n      // Resistance\n      resistance: true,\n      resistanceRatio: 0.85,\n      // Progress\n      watchSlidesProgress: false,\n      watchSlidesVisibility: false,\n      // Cursor\n      grabCursor: false,\n      // Clicks\n      preventClicks: true,\n      preventClicksPropagation: true,\n      slideToClickedSlide: false,\n      // Images\n      preloadImages: true,\n      updateOnImagesReady: true,\n      // loop\n      loop: false,\n      loopAdditionalSlides: 0,\n      loopedSlides: null,\n      loopFillGroupWithBlank: false,\n      // Swiping/no swiping\n      allowSlidePrev: true,\n      allowSlideNext: true,\n      swipeHandler: null,\n      // '.swipe-handler',\n      noSwiping: true,\n      noSwipingClass: 'swiper-no-swiping',\n      noSwipingSelector: null,\n      // Passive Listeners\n      passiveListeners: true,\n      // NS\n      containerModifierClass: 'swiper-container-',\n      // NEW\n      slideClass: 'swiper-slide',\n      slideBlankClass: 'swiper-slide-invisible-blank',\n      slideActiveClass: 'swiper-slide-active',\n      slideDuplicateActiveClass: 'swiper-slide-duplicate-active',\n      slideVisibleClass: 'swiper-slide-visible',\n      slideDuplicateClass: 'swiper-slide-duplicate',\n      slideNextClass: 'swiper-slide-next',\n      slideDuplicateNextClass: 'swiper-slide-duplicate-next',\n      slidePrevClass: 'swiper-slide-prev',\n      slideDuplicatePrevClass: 'swiper-slide-duplicate-prev',\n      wrapperClass: 'swiper-wrapper',\n      // Callbacks\n      runCallbacksOnInit: true\n    };\n\n    /* eslint no-param-reassign: \"off\" */\n\n    var prototypes = {\n      update: update,\n      translate: translate,\n      transition: transition$1,\n      slide: slide,\n      loop: loop,\n      grabCursor: grabCursor,\n      manipulation: manipulation,\n      events: events,\n      breakpoints: breakpoints,\n      checkOverflow: checkOverflow$1,\n      classes: classes,\n      images: images\n    };\n    var extendedDefaults = {};\n    var Swiper = /*@__PURE__*/function (SwiperClass) {\n      function Swiper() {\n        var assign;\n        var args = [],\n          len = arguments.length;\n        while (len--) args[len] = arguments[len];\n        var el;\n        var params;\n        if (args.length === 1 && args[0].constructor && args[0].constructor === Object) {\n          params = args[0];\n        } else {\n          assign = args, el = assign[0], params = assign[1];\n        }\n        if (!params) {\n          params = {};\n        }\n        params = Utils.extend({}, params);\n        if (el && !params.el) {\n          params.el = el;\n        }\n        SwiperClass.call(this, params);\n        Object.keys(prototypes).forEach(function (prototypeGroup) {\n          Object.keys(prototypes[prototypeGroup]).forEach(function (protoMethod) {\n            if (!Swiper.prototype[protoMethod]) {\n              Swiper.prototype[protoMethod] = prototypes[prototypeGroup][protoMethod];\n            }\n          });\n        });\n\n        // Swiper Instance\n        var swiper = this;\n        if (typeof swiper.modules === 'undefined') {\n          swiper.modules = {};\n        }\n        Object.keys(swiper.modules).forEach(function (moduleName) {\n          var module = swiper.modules[moduleName];\n          if (module.params) {\n            var moduleParamName = Object.keys(module.params)[0];\n            var moduleParams = module.params[moduleParamName];\n            if (_typeof(moduleParams) !== 'object' || moduleParams === null) {\n              return;\n            }\n            if (!(moduleParamName in params && 'enabled' in moduleParams)) {\n              return;\n            }\n            if (params[moduleParamName] === true) {\n              params[moduleParamName] = {\n                enabled: true\n              };\n            }\n            if (_typeof(params[moduleParamName]) === 'object' && !('enabled' in params[moduleParamName])) {\n              params[moduleParamName].enabled = true;\n            }\n            if (!params[moduleParamName]) {\n              params[moduleParamName] = {\n                enabled: false\n              };\n            }\n          }\n        });\n\n        // Extend defaults with modules params\n        var swiperParams = Utils.extend({}, defaults);\n        swiper.useModulesParams(swiperParams);\n\n        // Extend defaults with passed params\n        swiper.params = Utils.extend({}, swiperParams, extendedDefaults, params);\n        swiper.originalParams = Utils.extend({}, swiper.params);\n        swiper.passedParams = Utils.extend({}, params);\n\n        // Save Dom lib\n        swiper.$ = $;\n\n        // Find el\n        var $el = $(swiper.params.el);\n        el = $el[0];\n        if (!el) {\n          return undefined;\n        }\n        if ($el.length > 1) {\n          var swipers = [];\n          $el.each(function (index, containerEl) {\n            var newParams = Utils.extend({}, params, {\n              el: containerEl\n            });\n            swipers.push(new Swiper(newParams));\n          });\n          return swipers;\n        }\n        el.swiper = swiper;\n        $el.data('swiper', swiper);\n\n        // Find Wrapper\n        var $wrapperEl;\n        if (el && el.shadowRoot && el.shadowRoot.querySelector) {\n          $wrapperEl = $(el.shadowRoot.querySelector(\".\" + swiper.params.wrapperClass));\n          // Children needs to return slot items\n          $wrapperEl.children = function (options) {\n            return $el.children(options);\n          };\n        } else {\n          $wrapperEl = $el.children(\".\" + swiper.params.wrapperClass);\n        }\n        // Extend Swiper\n        Utils.extend(swiper, {\n          $el: $el,\n          el: el,\n          $wrapperEl: $wrapperEl,\n          wrapperEl: $wrapperEl[0],\n          // Classes\n          classNames: [],\n          // Slides\n          slides: $(),\n          slidesGrid: [],\n          snapGrid: [],\n          slidesSizesGrid: [],\n          // isDirection\n          isHorizontal: function isHorizontal() {\n            return swiper.params.direction === 'horizontal';\n          },\n          isVertical: function isVertical() {\n            return swiper.params.direction === 'vertical';\n          },\n          // RTL\n          rtl: el.dir.toLowerCase() === 'rtl' || $el.css('direction') === 'rtl',\n          rtlTranslate: swiper.params.direction === 'horizontal' && (el.dir.toLowerCase() === 'rtl' || $el.css('direction') === 'rtl'),\n          wrongRTL: $wrapperEl.css('display') === '-webkit-box',\n          // Indexes\n          activeIndex: 0,\n          realIndex: 0,\n          //\n          isBeginning: true,\n          isEnd: false,\n          // Props\n          translate: 0,\n          previousTranslate: 0,\n          progress: 0,\n          velocity: 0,\n          animating: false,\n          // Locks\n          allowSlideNext: swiper.params.allowSlideNext,\n          allowSlidePrev: swiper.params.allowSlidePrev,\n          // Touch Events\n          touchEvents: function touchEvents() {\n            var touch = ['touchstart', 'touchmove', 'touchend', 'touchcancel'];\n            var desktop = ['mousedown', 'mousemove', 'mouseup'];\n            if (Support.pointerEvents) {\n              desktop = ['pointerdown', 'pointermove', 'pointerup'];\n            }\n            swiper.touchEventsTouch = {\n              start: touch[0],\n              move: touch[1],\n              end: touch[2],\n              cancel: touch[3]\n            };\n            swiper.touchEventsDesktop = {\n              start: desktop[0],\n              move: desktop[1],\n              end: desktop[2]\n            };\n            return Support.touch || !swiper.params.simulateTouch ? swiper.touchEventsTouch : swiper.touchEventsDesktop;\n          }(),\n          touchEventsData: {\n            isTouched: undefined,\n            isMoved: undefined,\n            allowTouchCallbacks: undefined,\n            touchStartTime: undefined,\n            isScrolling: undefined,\n            currentTranslate: undefined,\n            startTranslate: undefined,\n            allowThresholdMove: undefined,\n            // Form elements to match\n            formElements: 'input, select, option, textarea, button, video, label',\n            // Last click time\n            lastClickTime: Utils.now(),\n            clickTimeout: undefined,\n            // Velocities\n            velocities: [],\n            allowMomentumBounce: undefined,\n            isTouchEvent: undefined,\n            startMoving: undefined\n          },\n          // Clicks\n          allowClick: true,\n          // Touches\n          allowTouchMove: swiper.params.allowTouchMove,\n          touches: {\n            startX: 0,\n            startY: 0,\n            currentX: 0,\n            currentY: 0,\n            diff: 0\n          },\n          // Images\n          imagesToLoad: [],\n          imagesLoaded: 0\n        });\n\n        // Install Modules\n        swiper.useModules();\n\n        // Init\n        if (swiper.params.init) {\n          swiper.init();\n        }\n\n        // Return app instance\n        return swiper;\n      }\n      if (SwiperClass) Swiper.__proto__ = SwiperClass;\n      Swiper.prototype = Object.create(SwiperClass && SwiperClass.prototype);\n      Swiper.prototype.constructor = Swiper;\n      var staticAccessors = {\n        extendedDefaults: {\n          configurable: true\n        },\n        defaults: {\n          configurable: true\n        },\n        Class: {\n          configurable: true\n        },\n        $: {\n          configurable: true\n        }\n      };\n      Swiper.prototype.slidesPerViewDynamic = function slidesPerViewDynamic() {\n        var swiper = this;\n        var params = swiper.params;\n        var slides = swiper.slides;\n        var slidesGrid = swiper.slidesGrid;\n        var swiperSize = swiper.size;\n        var activeIndex = swiper.activeIndex;\n        var spv = 1;\n        if (params.centeredSlides) {\n          var slideSize = slides[activeIndex].swiperSlideSize;\n          var breakLoop;\n          for (var i = activeIndex + 1; i < slides.length; i += 1) {\n            if (slides[i] && !breakLoop) {\n              slideSize += slides[i].swiperSlideSize;\n              spv += 1;\n              if (slideSize > swiperSize) {\n                breakLoop = true;\n              }\n            }\n          }\n          for (var i$1 = activeIndex - 1; i$1 >= 0; i$1 -= 1) {\n            if (slides[i$1] && !breakLoop) {\n              slideSize += slides[i$1].swiperSlideSize;\n              spv += 1;\n              if (slideSize > swiperSize) {\n                breakLoop = true;\n              }\n            }\n          }\n        } else {\n          for (var i$2 = activeIndex + 1; i$2 < slides.length; i$2 += 1) {\n            if (slidesGrid[i$2] - slidesGrid[activeIndex] < swiperSize) {\n              spv += 1;\n            }\n          }\n        }\n        return spv;\n      };\n      Swiper.prototype.update = function update() {\n        var swiper = this;\n        if (!swiper || swiper.destroyed) {\n          return;\n        }\n        var snapGrid = swiper.snapGrid;\n        var params = swiper.params;\n        // Breakpoints\n        if (params.breakpoints) {\n          swiper.setBreakpoint();\n        }\n        swiper.updateSize();\n        swiper.updateSlides();\n        swiper.updateProgress();\n        swiper.updateSlidesClasses();\n        function setTranslate() {\n          var translateValue = swiper.rtlTranslate ? swiper.translate * -1 : swiper.translate;\n          var newTranslate = Math.min(Math.max(translateValue, swiper.maxTranslate()), swiper.minTranslate());\n          swiper.setTranslate(newTranslate);\n          swiper.updateActiveIndex();\n          swiper.updateSlidesClasses();\n        }\n        var translated;\n        if (swiper.params.freeMode) {\n          setTranslate();\n          if (swiper.params.autoHeight) {\n            swiper.updateAutoHeight();\n          }\n        } else {\n          if ((swiper.params.slidesPerView === 'auto' || swiper.params.slidesPerView > 1) && swiper.isEnd && !swiper.params.centeredSlides) {\n            translated = swiper.slideTo(swiper.slides.length - 1, 0, false, true);\n          } else {\n            translated = swiper.slideTo(swiper.activeIndex, 0, false, true);\n          }\n          if (!translated) {\n            setTranslate();\n          }\n        }\n        if (params.watchOverflow && snapGrid !== swiper.snapGrid) {\n          swiper.checkOverflow();\n        }\n        swiper.emit('update');\n      };\n      Swiper.prototype.changeDirection = function changeDirection(newDirection, needUpdate) {\n        if (needUpdate === void 0) needUpdate = true;\n        var swiper = this;\n        var currentDirection = swiper.params.direction;\n        if (!newDirection) {\n          // eslint-disable-next-line\n          newDirection = currentDirection === 'horizontal' ? 'vertical' : 'horizontal';\n        }\n        if (newDirection === currentDirection || newDirection !== 'horizontal' && newDirection !== 'vertical') {\n          return swiper;\n        }\n        swiper.$el.removeClass(\"\" + swiper.params.containerModifierClass + currentDirection).addClass(\"\" + swiper.params.containerModifierClass + newDirection);\n        swiper.params.direction = newDirection;\n        swiper.slides.each(function (slideIndex, slideEl) {\n          if (newDirection === 'vertical') {\n            slideEl.style.width = '';\n          } else {\n            slideEl.style.height = '';\n          }\n        });\n        swiper.emit('changeDirection');\n        if (needUpdate) {\n          swiper.update();\n        }\n        return swiper;\n      };\n      Swiper.prototype.init = function init() {\n        var swiper = this;\n        if (swiper.initialized) {\n          return;\n        }\n        swiper.emit('beforeInit');\n\n        // Set breakpoint\n        if (swiper.params.breakpoints) {\n          swiper.setBreakpoint();\n        }\n\n        // Add Classes\n        swiper.addClasses();\n\n        // Create loop\n        if (swiper.params.loop) {\n          swiper.loopCreate();\n        }\n\n        // Update size\n        swiper.updateSize();\n\n        // Update slides\n        swiper.updateSlides();\n        if (swiper.params.watchOverflow) {\n          swiper.checkOverflow();\n        }\n\n        // Set Grab Cursor\n        if (swiper.params.grabCursor) {\n          swiper.setGrabCursor();\n        }\n        if (swiper.params.preloadImages) {\n          swiper.preloadImages();\n        }\n\n        // Slide To Initial Slide\n        if (swiper.params.loop) {\n          swiper.slideTo(swiper.params.initialSlide + swiper.loopedSlides, 0, swiper.params.runCallbacksOnInit);\n        } else {\n          swiper.slideTo(swiper.params.initialSlide, 0, swiper.params.runCallbacksOnInit);\n        }\n\n        // Attach events\n        swiper.attachEvents();\n\n        // Init Flag\n        swiper.initialized = true;\n\n        // Emit\n        swiper.emit('init');\n      };\n      Swiper.prototype.destroy = function destroy(deleteInstance, cleanStyles) {\n        if (deleteInstance === void 0) deleteInstance = true;\n        if (cleanStyles === void 0) cleanStyles = true;\n        var swiper = this;\n        var params = swiper.params;\n        var $el = swiper.$el;\n        var $wrapperEl = swiper.$wrapperEl;\n        var slides = swiper.slides;\n        if (typeof swiper.params === 'undefined' || swiper.destroyed) {\n          return null;\n        }\n        swiper.emit('beforeDestroy');\n\n        // Init Flag\n        swiper.initialized = false;\n\n        // Detach events\n        swiper.detachEvents();\n\n        // Destroy loop\n        if (params.loop) {\n          swiper.loopDestroy();\n        }\n\n        // Cleanup styles\n        if (cleanStyles) {\n          swiper.removeClasses();\n          $el.removeAttr('style');\n          $wrapperEl.removeAttr('style');\n          if (slides && slides.length) {\n            slides.removeClass([params.slideVisibleClass, params.slideActiveClass, params.slideNextClass, params.slidePrevClass].join(' ')).removeAttr('style').removeAttr('data-swiper-slide-index');\n          }\n        }\n        swiper.emit('destroy');\n\n        // Detach emitter events\n        Object.keys(swiper.eventsListeners).forEach(function (eventName) {\n          swiper.off(eventName);\n        });\n        if (deleteInstance !== false) {\n          swiper.$el[0].swiper = null;\n          swiper.$el.data('swiper', null);\n          Utils.deleteProps(swiper);\n        }\n        swiper.destroyed = true;\n        return null;\n      };\n      Swiper.extendDefaults = function extendDefaults(newDefaults) {\n        Utils.extend(extendedDefaults, newDefaults);\n      };\n      staticAccessors.extendedDefaults.get = function () {\n        return extendedDefaults;\n      };\n      staticAccessors.defaults.get = function () {\n        return defaults;\n      };\n      staticAccessors.Class.get = function () {\n        return SwiperClass;\n      };\n      staticAccessors.$.get = function () {\n        return $;\n      };\n      Object.defineProperties(Swiper, staticAccessors);\n      return Swiper;\n    }(SwiperClass);\n    var Device$1 = {\n      name: 'device',\n      proto: {\n        device: Device\n      },\n      static: {\n        device: Device\n      }\n    };\n    var Support$1 = {\n      name: 'support',\n      proto: {\n        support: Support\n      },\n      static: {\n        support: Support\n      }\n    };\n    var Browser = function Browser() {\n      function isSafari() {\n        var ua = win.navigator.userAgent.toLowerCase();\n        return ua.indexOf('safari') >= 0 && ua.indexOf('chrome') < 0 && ua.indexOf('android') < 0;\n      }\n      return {\n        isEdge: !!win.navigator.userAgent.match(/Edge/g),\n        isSafari: isSafari(),\n        isUiWebView: /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(win.navigator.userAgent)\n      };\n    }();\n    var Browser$1 = {\n      name: 'browser',\n      proto: {\n        browser: Browser\n      },\n      static: {\n        browser: Browser\n      }\n    };\n    var Resize = {\n      name: 'resize',\n      create: function create() {\n        var swiper = this;\n        Utils.extend(swiper, {\n          resize: {\n            resizeHandler: function resizeHandler() {\n              if (!swiper || swiper.destroyed || !swiper.initialized) {\n                return;\n              }\n              swiper.emit('beforeResize');\n              swiper.emit('resize');\n            },\n            orientationChangeHandler: function orientationChangeHandler() {\n              if (!swiper || swiper.destroyed || !swiper.initialized) {\n                return;\n              }\n              swiper.emit('orientationchange');\n            }\n          }\n        });\n      },\n      on: {\n        init: function init() {\n          var swiper = this;\n          // Emit resize\n          win.addEventListener('resize', swiper.resize.resizeHandler);\n\n          // Emit orientationchange\n          win.addEventListener('orientationchange', swiper.resize.orientationChangeHandler);\n        },\n        destroy: function destroy() {\n          var swiper = this;\n          win.removeEventListener('resize', swiper.resize.resizeHandler);\n          win.removeEventListener('orientationchange', swiper.resize.orientationChangeHandler);\n        }\n      }\n    };\n    var Observer = {\n      func: win.MutationObserver || win.WebkitMutationObserver,\n      attach: function attach(target, options) {\n        if (options === void 0) options = {};\n        var swiper = this;\n        var ObserverFunc = Observer.func;\n        var observer = new ObserverFunc(function (mutations) {\n          // The observerUpdate event should only be triggered\n          // once despite the number of mutations.  Additional\n          // triggers are redundant and are very costly\n          if (mutations.length === 1) {\n            swiper.emit('observerUpdate', mutations[0]);\n            return;\n          }\n          var observerUpdate = function observerUpdate() {\n            swiper.emit('observerUpdate', mutations[0]);\n          };\n          if (win.requestAnimationFrame) {\n            win.requestAnimationFrame(observerUpdate);\n          } else {\n            win.setTimeout(observerUpdate, 0);\n          }\n        });\n        observer.observe(target, {\n          attributes: typeof options.attributes === 'undefined' ? true : options.attributes,\n          childList: typeof options.childList === 'undefined' ? true : options.childList,\n          characterData: typeof options.characterData === 'undefined' ? true : options.characterData\n        });\n        swiper.observer.observers.push(observer);\n      },\n      init: function init() {\n        var swiper = this;\n        if (!Support.observer || !swiper.params.observer) {\n          return;\n        }\n        if (swiper.params.observeParents) {\n          var containerParents = swiper.$el.parents();\n          for (var i = 0; i < containerParents.length; i += 1) {\n            swiper.observer.attach(containerParents[i]);\n          }\n        }\n        // Observe container\n        swiper.observer.attach(swiper.$el[0], {\n          childList: swiper.params.observeSlideChildren\n        });\n\n        // Observe wrapper\n        swiper.observer.attach(swiper.$wrapperEl[0], {\n          attributes: false\n        });\n      },\n      destroy: function destroy() {\n        var swiper = this;\n        swiper.observer.observers.forEach(function (observer) {\n          observer.disconnect();\n        });\n        swiper.observer.observers = [];\n      }\n    };\n    var Observer$1 = {\n      name: 'observer',\n      params: {\n        observer: false,\n        observeParents: false,\n        observeSlideChildren: false\n      },\n      create: function create() {\n        var swiper = this;\n        Utils.extend(swiper, {\n          observer: {\n            init: Observer.init.bind(swiper),\n            attach: Observer.attach.bind(swiper),\n            destroy: Observer.destroy.bind(swiper),\n            observers: []\n          }\n        });\n      },\n      on: {\n        init: function init() {\n          var swiper = this;\n          swiper.observer.init();\n        },\n        destroy: function destroy() {\n          var swiper = this;\n          swiper.observer.destroy();\n        }\n      }\n    };\n    var Virtual = {\n      update: function update(force) {\n        var swiper = this;\n        var ref = swiper.params;\n        var slidesPerView = ref.slidesPerView;\n        var slidesPerGroup = ref.slidesPerGroup;\n        var centeredSlides = ref.centeredSlides;\n        var ref$1 = swiper.params.virtual;\n        var addSlidesBefore = ref$1.addSlidesBefore;\n        var addSlidesAfter = ref$1.addSlidesAfter;\n        var ref$2 = swiper.virtual;\n        var previousFrom = ref$2.from;\n        var previousTo = ref$2.to;\n        var slides = ref$2.slides;\n        var previousSlidesGrid = ref$2.slidesGrid;\n        var renderSlide = ref$2.renderSlide;\n        var previousOffset = ref$2.offset;\n        swiper.updateActiveIndex();\n        var activeIndex = swiper.activeIndex || 0;\n        var offsetProp;\n        if (swiper.rtlTranslate) {\n          offsetProp = 'right';\n        } else {\n          offsetProp = swiper.isHorizontal() ? 'left' : 'top';\n        }\n        var slidesAfter;\n        var slidesBefore;\n        if (centeredSlides) {\n          slidesAfter = Math.floor(slidesPerView / 2) + slidesPerGroup + addSlidesBefore;\n          slidesBefore = Math.floor(slidesPerView / 2) + slidesPerGroup + addSlidesAfter;\n        } else {\n          slidesAfter = slidesPerView + (slidesPerGroup - 1) + addSlidesBefore;\n          slidesBefore = slidesPerGroup + addSlidesAfter;\n        }\n        var from = Math.max((activeIndex || 0) - slidesBefore, 0);\n        var to = Math.min((activeIndex || 0) + slidesAfter, slides.length - 1);\n        var offset = (swiper.slidesGrid[from] || 0) - (swiper.slidesGrid[0] || 0);\n        Utils.extend(swiper.virtual, {\n          from: from,\n          to: to,\n          offset: offset,\n          slidesGrid: swiper.slidesGrid\n        });\n        function onRendered() {\n          swiper.updateSlides();\n          swiper.updateProgress();\n          swiper.updateSlidesClasses();\n          if (swiper.lazy && swiper.params.lazy.enabled) {\n            swiper.lazy.load();\n          }\n        }\n        if (previousFrom === from && previousTo === to && !force) {\n          if (swiper.slidesGrid !== previousSlidesGrid && offset !== previousOffset) {\n            swiper.slides.css(offsetProp, offset + \"px\");\n          }\n          swiper.updateProgress();\n          return;\n        }\n        if (swiper.params.virtual.renderExternal) {\n          swiper.params.virtual.renderExternal.call(swiper, {\n            offset: offset,\n            from: from,\n            to: to,\n            slides: function getSlides() {\n              var slidesToRender = [];\n              for (var i = from; i <= to; i += 1) {\n                slidesToRender.push(slides[i]);\n              }\n              return slidesToRender;\n            }()\n          });\n          onRendered();\n          return;\n        }\n        var prependIndexes = [];\n        var appendIndexes = [];\n        if (force) {\n          swiper.$wrapperEl.find(\".\" + swiper.params.slideClass).remove();\n        } else {\n          for (var i = previousFrom; i <= previousTo; i += 1) {\n            if (i < from || i > to) {\n              swiper.$wrapperEl.find(\".\" + swiper.params.slideClass + \"[data-swiper-slide-index=\\\"\" + i + \"\\\"]\").remove();\n            }\n          }\n        }\n        for (var i$1 = 0; i$1 < slides.length; i$1 += 1) {\n          if (i$1 >= from && i$1 <= to) {\n            if (typeof previousTo === 'undefined' || force) {\n              appendIndexes.push(i$1);\n            } else {\n              if (i$1 > previousTo) {\n                appendIndexes.push(i$1);\n              }\n              if (i$1 < previousFrom) {\n                prependIndexes.push(i$1);\n              }\n            }\n          }\n        }\n        appendIndexes.forEach(function (index) {\n          swiper.$wrapperEl.append(renderSlide(slides[index], index));\n        });\n        prependIndexes.sort(function (a, b) {\n          return b - a;\n        }).forEach(function (index) {\n          swiper.$wrapperEl.prepend(renderSlide(slides[index], index));\n        });\n        swiper.$wrapperEl.children('.swiper-slide').css(offsetProp, offset + \"px\");\n        onRendered();\n      },\n      renderSlide: function renderSlide(slide, index) {\n        var swiper = this;\n        var params = swiper.params.virtual;\n        if (params.cache && swiper.virtual.cache[index]) {\n          return swiper.virtual.cache[index];\n        }\n        var $slideEl = params.renderSlide ? $(params.renderSlide.call(swiper, slide, index)) : $(\"<div class=\\\"\" + swiper.params.slideClass + \"\\\" data-swiper-slide-index=\\\"\" + index + \"\\\">\" + slide + \"</div>\");\n        if (!$slideEl.attr('data-swiper-slide-index')) {\n          $slideEl.attr('data-swiper-slide-index', index);\n        }\n        if (params.cache) {\n          swiper.virtual.cache[index] = $slideEl;\n        }\n        return $slideEl;\n      },\n      appendSlide: function appendSlide(slides) {\n        var swiper = this;\n        if (_typeof(slides) === 'object' && 'length' in slides) {\n          for (var i = 0; i < slides.length; i += 1) {\n            if (slides[i]) {\n              swiper.virtual.slides.push(slides[i]);\n            }\n          }\n        } else {\n          swiper.virtual.slides.push(slides);\n        }\n        swiper.virtual.update(true);\n      },\n      prependSlide: function prependSlide(slides) {\n        var swiper = this;\n        var activeIndex = swiper.activeIndex;\n        var newActiveIndex = activeIndex + 1;\n        var numberOfNewSlides = 1;\n        if (Array.isArray(slides)) {\n          for (var i = 0; i < slides.length; i += 1) {\n            if (slides[i]) {\n              swiper.virtual.slides.unshift(slides[i]);\n            }\n          }\n          newActiveIndex = activeIndex + slides.length;\n          numberOfNewSlides = slides.length;\n        } else {\n          swiper.virtual.slides.unshift(slides);\n        }\n        if (swiper.params.virtual.cache) {\n          var cache = swiper.virtual.cache;\n          var newCache = {};\n          Object.keys(cache).forEach(function (cachedIndex) {\n            var $cachedEl = cache[cachedIndex];\n            var cachedElIndex = $cachedEl.attr('data-swiper-slide-index');\n            if (cachedElIndex) {\n              $cachedEl.attr('data-swiper-slide-index', parseInt(cachedElIndex, 10) + 1);\n            }\n            newCache[parseInt(cachedIndex, 10) + numberOfNewSlides] = $cachedEl;\n          });\n          swiper.virtual.cache = newCache;\n        }\n        swiper.virtual.update(true);\n        swiper.slideTo(newActiveIndex, 0);\n      },\n      removeSlide: function removeSlide(slidesIndexes) {\n        var swiper = this;\n        if (typeof slidesIndexes === 'undefined' || slidesIndexes === null) {\n          return;\n        }\n        var activeIndex = swiper.activeIndex;\n        if (Array.isArray(slidesIndexes)) {\n          for (var i = slidesIndexes.length - 1; i >= 0; i -= 1) {\n            swiper.virtual.slides.splice(slidesIndexes[i], 1);\n            if (swiper.params.virtual.cache) {\n              delete swiper.virtual.cache[slidesIndexes[i]];\n            }\n            if (slidesIndexes[i] < activeIndex) {\n              activeIndex -= 1;\n            }\n            activeIndex = Math.max(activeIndex, 0);\n          }\n        } else {\n          swiper.virtual.slides.splice(slidesIndexes, 1);\n          if (swiper.params.virtual.cache) {\n            delete swiper.virtual.cache[slidesIndexes];\n          }\n          if (slidesIndexes < activeIndex) {\n            activeIndex -= 1;\n          }\n          activeIndex = Math.max(activeIndex, 0);\n        }\n        swiper.virtual.update(true);\n        swiper.slideTo(activeIndex, 0);\n      },\n      removeAllSlides: function removeAllSlides() {\n        var swiper = this;\n        swiper.virtual.slides = [];\n        if (swiper.params.virtual.cache) {\n          swiper.virtual.cache = {};\n        }\n        swiper.virtual.update(true);\n        swiper.slideTo(0, 0);\n      }\n    };\n    var Virtual$1 = {\n      name: 'virtual',\n      params: {\n        virtual: {\n          enabled: false,\n          slides: [],\n          cache: true,\n          renderSlide: null,\n          renderExternal: null,\n          addSlidesBefore: 0,\n          addSlidesAfter: 0\n        }\n      },\n      create: function create() {\n        var swiper = this;\n        Utils.extend(swiper, {\n          virtual: {\n            update: Virtual.update.bind(swiper),\n            appendSlide: Virtual.appendSlide.bind(swiper),\n            prependSlide: Virtual.prependSlide.bind(swiper),\n            removeSlide: Virtual.removeSlide.bind(swiper),\n            removeAllSlides: Virtual.removeAllSlides.bind(swiper),\n            renderSlide: Virtual.renderSlide.bind(swiper),\n            slides: swiper.params.virtual.slides,\n            cache: {}\n          }\n        });\n      },\n      on: {\n        beforeInit: function beforeInit() {\n          var swiper = this;\n          if (!swiper.params.virtual.enabled) {\n            return;\n          }\n          swiper.classNames.push(swiper.params.containerModifierClass + \"virtual\");\n          var overwriteParams = {\n            watchSlidesProgress: true\n          };\n          Utils.extend(swiper.params, overwriteParams);\n          Utils.extend(swiper.originalParams, overwriteParams);\n          if (!swiper.params.initialSlide) {\n            swiper.virtual.update();\n          }\n        },\n        setTranslate: function setTranslate() {\n          var swiper = this;\n          if (!swiper.params.virtual.enabled) {\n            return;\n          }\n          swiper.virtual.update();\n        }\n      }\n    };\n    var Keyboard = {\n      handle: function handle(event) {\n        var swiper = this;\n        var rtl = swiper.rtlTranslate;\n        var e = event;\n        if (e.originalEvent) {\n          e = e.originalEvent;\n        } // jquery fix\n        var kc = e.keyCode || e.charCode;\n        // Directions locks\n        if (!swiper.allowSlideNext && (swiper.isHorizontal() && kc === 39 || swiper.isVertical() && kc === 40 || kc === 34)) {\n          return false;\n        }\n        if (!swiper.allowSlidePrev && (swiper.isHorizontal() && kc === 37 || swiper.isVertical() && kc === 38 || kc === 33)) {\n          return false;\n        }\n        if (e.shiftKey || e.altKey || e.ctrlKey || e.metaKey) {\n          return undefined;\n        }\n        if (doc.activeElement && doc.activeElement.nodeName && (doc.activeElement.nodeName.toLowerCase() === 'input' || doc.activeElement.nodeName.toLowerCase() === 'textarea')) {\n          return undefined;\n        }\n        if (swiper.params.keyboard.onlyInViewport && (kc === 33 || kc === 34 || kc === 37 || kc === 39 || kc === 38 || kc === 40)) {\n          var inView = false;\n          // Check that swiper should be inside of visible area of window\n          if (swiper.$el.parents(\".\" + swiper.params.slideClass).length > 0 && swiper.$el.parents(\".\" + swiper.params.slideActiveClass).length === 0) {\n            return undefined;\n          }\n          var windowWidth = win.innerWidth;\n          var windowHeight = win.innerHeight;\n          var swiperOffset = swiper.$el.offset();\n          if (rtl) {\n            swiperOffset.left -= swiper.$el[0].scrollLeft;\n          }\n          var swiperCoord = [[swiperOffset.left, swiperOffset.top], [swiperOffset.left + swiper.width, swiperOffset.top], [swiperOffset.left, swiperOffset.top + swiper.height], [swiperOffset.left + swiper.width, swiperOffset.top + swiper.height]];\n          for (var i = 0; i < swiperCoord.length; i += 1) {\n            var point = swiperCoord[i];\n            if (point[0] >= 0 && point[0] <= windowWidth && point[1] >= 0 && point[1] <= windowHeight) {\n              inView = true;\n            }\n          }\n          if (!inView) {\n            return undefined;\n          }\n        }\n        if (swiper.isHorizontal()) {\n          if (kc === 33 || kc === 34 || kc === 37 || kc === 39) {\n            if (e.preventDefault) {\n              e.preventDefault();\n            } else {\n              e.returnValue = false;\n            }\n          }\n          if ((kc === 34 || kc === 39) && !rtl || (kc === 33 || kc === 37) && rtl) {\n            swiper.slideNext();\n          }\n          if ((kc === 33 || kc === 37) && !rtl || (kc === 34 || kc === 39) && rtl) {\n            swiper.slidePrev();\n          }\n        } else {\n          if (kc === 33 || kc === 34 || kc === 38 || kc === 40) {\n            if (e.preventDefault) {\n              e.preventDefault();\n            } else {\n              e.returnValue = false;\n            }\n          }\n          if (kc === 34 || kc === 40) {\n            swiper.slideNext();\n          }\n          if (kc === 33 || kc === 38) {\n            swiper.slidePrev();\n          }\n        }\n        swiper.emit('keyPress', kc);\n        return undefined;\n      },\n      enable: function enable() {\n        var swiper = this;\n        if (swiper.keyboard.enabled) {\n          return;\n        }\n        $(doc).on('keydown', swiper.keyboard.handle);\n        swiper.keyboard.enabled = true;\n      },\n      disable: function disable() {\n        var swiper = this;\n        if (!swiper.keyboard.enabled) {\n          return;\n        }\n        $(doc).off('keydown', swiper.keyboard.handle);\n        swiper.keyboard.enabled = false;\n      }\n    };\n    var Keyboard$1 = {\n      name: 'keyboard',\n      params: {\n        keyboard: {\n          enabled: false,\n          onlyInViewport: true\n        }\n      },\n      create: function create() {\n        var swiper = this;\n        Utils.extend(swiper, {\n          keyboard: {\n            enabled: false,\n            enable: Keyboard.enable.bind(swiper),\n            disable: Keyboard.disable.bind(swiper),\n            handle: Keyboard.handle.bind(swiper)\n          }\n        });\n      },\n      on: {\n        init: function init() {\n          var swiper = this;\n          if (swiper.params.keyboard.enabled) {\n            swiper.keyboard.enable();\n          }\n        },\n        destroy: function destroy() {\n          var swiper = this;\n          if (swiper.keyboard.enabled) {\n            swiper.keyboard.disable();\n          }\n        }\n      }\n    };\n    function isEventSupported() {\n      var eventName = 'onwheel';\n      var isSupported = (eventName in doc);\n      if (!isSupported) {\n        var element = doc.createElement('div');\n        element.setAttribute(eventName, 'return;');\n        isSupported = typeof element[eventName] === 'function';\n      }\n      if (!isSupported && doc.implementation && doc.implementation.hasFeature\n      // always returns true in newer browsers as per the standard.\n      // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature\n      && doc.implementation.hasFeature('', '') !== true) {\n        // This is the only way to test support for the `wheel` event in IE9+.\n        isSupported = doc.implementation.hasFeature('Events.wheel', '3.0');\n      }\n      return isSupported;\n    }\n    var Mousewheel = {\n      lastScrollTime: Utils.now(),\n      lastEventBeforeSnap: undefined,\n      recentWheelEvents: [],\n      event: function event() {\n        if (win.navigator.userAgent.indexOf('firefox') > -1) {\n          return 'DOMMouseScroll';\n        }\n        return isEventSupported() ? 'wheel' : 'mousewheel';\n      },\n      normalize: function normalize(e) {\n        // Reasonable defaults\n        var PIXEL_STEP = 10;\n        var LINE_HEIGHT = 40;\n        var PAGE_HEIGHT = 800;\n        var sX = 0;\n        var sY = 0; // spinX, spinY\n        var pX = 0;\n        var pY = 0; // pixelX, pixelY\n\n        // Legacy\n        if ('detail' in e) {\n          sY = e.detail;\n        }\n        if ('wheelDelta' in e) {\n          sY = -e.wheelDelta / 120;\n        }\n        if ('wheelDeltaY' in e) {\n          sY = -e.wheelDeltaY / 120;\n        }\n        if ('wheelDeltaX' in e) {\n          sX = -e.wheelDeltaX / 120;\n        }\n\n        // side scrolling on FF with DOMMouseScroll\n        if ('axis' in e && e.axis === e.HORIZONTAL_AXIS) {\n          sX = sY;\n          sY = 0;\n        }\n        pX = sX * PIXEL_STEP;\n        pY = sY * PIXEL_STEP;\n        if ('deltaY' in e) {\n          pY = e.deltaY;\n        }\n        if ('deltaX' in e) {\n          pX = e.deltaX;\n        }\n        if (e.shiftKey && !pX) {\n          // if user scrolls with shift he wants horizontal scroll\n          pX = pY;\n          pY = 0;\n        }\n        if ((pX || pY) && e.deltaMode) {\n          if (e.deltaMode === 1) {\n            // delta in LINE units\n            pX *= LINE_HEIGHT;\n            pY *= LINE_HEIGHT;\n          } else {\n            // delta in PAGE units\n            pX *= PAGE_HEIGHT;\n            pY *= PAGE_HEIGHT;\n          }\n        }\n\n        // Fall-back if spin cannot be determined\n        if (pX && !sX) {\n          sX = pX < 1 ? -1 : 1;\n        }\n        if (pY && !sY) {\n          sY = pY < 1 ? -1 : 1;\n        }\n        return {\n          spinX: sX,\n          spinY: sY,\n          pixelX: pX,\n          pixelY: pY\n        };\n      },\n      handleMouseEnter: function handleMouseEnter() {\n        var swiper = this;\n        swiper.mouseEntered = true;\n      },\n      handleMouseLeave: function handleMouseLeave() {\n        var swiper = this;\n        swiper.mouseEntered = false;\n      },\n      handle: function handle(event) {\n        var e = event;\n        var swiper = this;\n        var params = swiper.params.mousewheel;\n        if (swiper.params.cssMode) {\n          e.preventDefault();\n        }\n        var target = swiper.$el;\n        if (swiper.params.mousewheel.eventsTarged !== 'container') {\n          target = $(swiper.params.mousewheel.eventsTarged);\n        }\n        if (!swiper.mouseEntered && !target[0].contains(e.target) && !params.releaseOnEdges) {\n          return true;\n        }\n        if (e.originalEvent) {\n          e = e.originalEvent;\n        } // jquery fix\n        var delta = 0;\n        var rtlFactor = swiper.rtlTranslate ? -1 : 1;\n        var data = Mousewheel.normalize(e);\n        if (params.forceToAxis) {\n          if (swiper.isHorizontal()) {\n            if (Math.abs(data.pixelX) > Math.abs(data.pixelY)) {\n              delta = data.pixelX * rtlFactor;\n            } else {\n              return true;\n            }\n          } else if (Math.abs(data.pixelY) > Math.abs(data.pixelX)) {\n            delta = data.pixelY;\n          } else {\n            return true;\n          }\n        } else {\n          delta = Math.abs(data.pixelX) > Math.abs(data.pixelY) ? -data.pixelX * rtlFactor : -data.pixelY;\n        }\n        if (delta === 0) {\n          return true;\n        }\n        if (params.invert) {\n          delta = -delta;\n        }\n        if (!swiper.params.freeMode) {\n          // Register the new event in a variable which stores the relevant data\n          var newEvent = {\n            time: Utils.now(),\n            delta: Math.abs(delta),\n            direction: Math.sign(delta),\n            raw: event\n          };\n\n          // Keep the most recent events\n          var recentWheelEvents = swiper.mousewheel.recentWheelEvents;\n          if (recentWheelEvents.length >= 2) {\n            recentWheelEvents.shift(); // only store the last N events\n          }\n\n          var prevEvent = recentWheelEvents.length ? recentWheelEvents[recentWheelEvents.length - 1] : undefined;\n          recentWheelEvents.push(newEvent);\n\n          // If there is at least one previous recorded event:\n          //   If direction has changed or\n          //   if the scroll is quicker than the previous one:\n          //     Animate the slider.\n          // Else (this is the first time the wheel is moved):\n          //     Animate the slider.\n          if (prevEvent) {\n            if (newEvent.direction !== prevEvent.direction || newEvent.delta > prevEvent.delta) {\n              swiper.mousewheel.animateSlider(newEvent);\n            }\n          } else {\n            swiper.mousewheel.animateSlider(newEvent);\n          }\n\n          // If it's time to release the scroll:\n          //   Return now so you don't hit the preventDefault.\n          if (swiper.mousewheel.releaseScroll(newEvent)) {\n            return true;\n          }\n        } else {\n          // Freemode or scrollContainer:\n\n          // If we recently snapped after a momentum scroll, then ignore wheel events\n          // to give time for the deceleration to finish. Stop ignoring after 500 msecs\n          // or if it's a new scroll (larger delta or inverse sign as last event before\n          // an end-of-momentum snap).\n          var newEvent$1 = {\n            time: Utils.now(),\n            delta: Math.abs(delta),\n            direction: Math.sign(delta)\n          };\n          var ref = swiper.mousewheel;\n          var lastEventBeforeSnap = ref.lastEventBeforeSnap;\n          var ignoreWheelEvents = lastEventBeforeSnap && newEvent$1.time < lastEventBeforeSnap.time + 500 && newEvent$1.delta <= lastEventBeforeSnap.delta && newEvent$1.direction === lastEventBeforeSnap.direction;\n          if (!ignoreWheelEvents) {\n            swiper.mousewheel.lastEventBeforeSnap = undefined;\n            if (swiper.params.loop) {\n              swiper.loopFix();\n            }\n            var position = swiper.getTranslate() + delta * params.sensitivity;\n            var wasBeginning = swiper.isBeginning;\n            var wasEnd = swiper.isEnd;\n            if (position >= swiper.minTranslate()) {\n              position = swiper.minTranslate();\n            }\n            if (position <= swiper.maxTranslate()) {\n              position = swiper.maxTranslate();\n            }\n            swiper.setTransition(0);\n            swiper.setTranslate(position);\n            swiper.updateProgress();\n            swiper.updateActiveIndex();\n            swiper.updateSlidesClasses();\n            if (!wasBeginning && swiper.isBeginning || !wasEnd && swiper.isEnd) {\n              swiper.updateSlidesClasses();\n            }\n            if (swiper.params.freeModeSticky) {\n              // When wheel scrolling starts with sticky (aka snap) enabled, then detect\n              // the end of a momentum scroll by storing recent (N=15?) wheel events.\n              // 1. do all N events have decreasing or same (absolute value) delta?\n              // 2. did all N events arrive in the last M (M=500?) msecs?\n              // 3. does the earliest event have an (absolute value) delta that's\n              //    at least P (P=1?) larger than the most recent event's delta?\n              // 4. does the latest event have a delta that's smaller than Q (Q=6?) pixels?\n              // If 1-4 are \"yes\" then we're near the end of a momuntum scroll deceleration.\n              // Snap immediately and ignore remaining wheel events in this scroll.\n              // See comment above for \"remaining wheel events in this scroll\" determination.\n              // If 1-4 aren't satisfied, then wait to snap until 500ms after the last event.\n              clearTimeout(swiper.mousewheel.timeout);\n              swiper.mousewheel.timeout = undefined;\n              var recentWheelEvents$1 = swiper.mousewheel.recentWheelEvents;\n              if (recentWheelEvents$1.length >= 15) {\n                recentWheelEvents$1.shift(); // only store the last N events\n              }\n\n              var prevEvent$1 = recentWheelEvents$1.length ? recentWheelEvents$1[recentWheelEvents$1.length - 1] : undefined;\n              var firstEvent = recentWheelEvents$1[0];\n              recentWheelEvents$1.push(newEvent$1);\n              if (prevEvent$1 && (newEvent$1.delta > prevEvent$1.delta || newEvent$1.direction !== prevEvent$1.direction)) {\n                // Increasing or reverse-sign delta means the user started scrolling again. Clear the wheel event log.\n                recentWheelEvents$1.splice(0);\n              } else if (recentWheelEvents$1.length >= 15 && newEvent$1.time - firstEvent.time < 500 && firstEvent.delta - newEvent$1.delta >= 1 && newEvent$1.delta <= 6) {\n                // We're at the end of the deceleration of a momentum scroll, so there's no need\n                // to wait for more events. Snap ASAP on the next tick.\n                // Also, because there's some remaining momentum we'll bias the snap in the\n                // direction of the ongoing scroll because it's better UX for the scroll to snap\n                // in the same direction as the scroll instead of reversing to snap.  Therefore,\n                // if it's already scrolled more than 20% in the current direction, keep going.\n                var snapToThreshold = delta > 0 ? 0.8 : 0.2;\n                swiper.mousewheel.lastEventBeforeSnap = newEvent$1;\n                recentWheelEvents$1.splice(0);\n                swiper.mousewheel.timeout = Utils.nextTick(function () {\n                  swiper.slideToClosest(swiper.params.speed, true, undefined, snapToThreshold);\n                }, 0); // no delay; move on next tick\n              }\n\n              if (!swiper.mousewheel.timeout) {\n                // if we get here, then we haven't detected the end of a momentum scroll, so\n                // we'll consider a scroll \"complete\" when there haven't been any wheel events\n                // for 500ms.\n                swiper.mousewheel.timeout = Utils.nextTick(function () {\n                  var snapToThreshold = 0.5;\n                  swiper.mousewheel.lastEventBeforeSnap = newEvent$1;\n                  recentWheelEvents$1.splice(0);\n                  swiper.slideToClosest(swiper.params.speed, true, undefined, snapToThreshold);\n                }, 500);\n              }\n            }\n\n            // Emit event\n            if (!ignoreWheelEvents) {\n              swiper.emit('scroll', e);\n            }\n\n            // Stop autoplay\n            if (swiper.params.autoplay && swiper.params.autoplayDisableOnInteraction) {\n              swiper.autoplay.stop();\n            }\n            // Return page scroll on edge positions\n            if (position === swiper.minTranslate() || position === swiper.maxTranslate()) {\n              return true;\n            }\n          }\n        }\n        if (e.preventDefault) {\n          e.preventDefault();\n        } else {\n          e.returnValue = false;\n        }\n        return false;\n      },\n      animateSlider: function animateSlider(newEvent) {\n        var swiper = this;\n        // If the movement is NOT big enough and\n        // if the last time the user scrolled was too close to the current one (avoid continuously triggering the slider):\n        //   Don't go any further (avoid insignificant scroll movement).\n        if (newEvent.delta >= 6 && Utils.now() - swiper.mousewheel.lastScrollTime < 60) {\n          // Return false as a default\n          return true;\n        }\n        // If user is scrolling towards the end:\n        //   If the slider hasn't hit the latest slide or\n        //   if the slider is a loop and\n        //   if the slider isn't moving right now:\n        //     Go to next slide and\n        //     emit a scroll event.\n        // Else (the user is scrolling towards the beginning) and\n        // if the slider hasn't hit the first slide or\n        // if the slider is a loop and\n        // if the slider isn't moving right now:\n        //   Go to prev slide and\n        //   emit a scroll event.\n        if (newEvent.direction < 0) {\n          if ((!swiper.isEnd || swiper.params.loop) && !swiper.animating) {\n            swiper.slideNext();\n            swiper.emit('scroll', newEvent.raw);\n          }\n        } else if ((!swiper.isBeginning || swiper.params.loop) && !swiper.animating) {\n          swiper.slidePrev();\n          swiper.emit('scroll', newEvent.raw);\n        }\n        // If you got here is because an animation has been triggered so store the current time\n        swiper.mousewheel.lastScrollTime = new win.Date().getTime();\n        // Return false as a default\n        return false;\n      },\n      releaseScroll: function releaseScroll(newEvent) {\n        var swiper = this;\n        var params = swiper.params.mousewheel;\n        if (newEvent.direction < 0) {\n          if (swiper.isEnd && !swiper.params.loop && params.releaseOnEdges) {\n            // Return true to animate scroll on edges\n            return true;\n          }\n        } else if (swiper.isBeginning && !swiper.params.loop && params.releaseOnEdges) {\n          // Return true to animate scroll on edges\n          return true;\n        }\n        return false;\n      },\n      enable: function enable() {\n        var swiper = this;\n        var event = Mousewheel.event();\n        if (swiper.params.cssMode) {\n          swiper.wrapperEl.removeEventListener(event, swiper.mousewheel.handle);\n          return true;\n        }\n        if (!event) {\n          return false;\n        }\n        if (swiper.mousewheel.enabled) {\n          return false;\n        }\n        var target = swiper.$el;\n        if (swiper.params.mousewheel.eventsTarged !== 'container') {\n          target = $(swiper.params.mousewheel.eventsTarged);\n        }\n        target.on('mouseenter', swiper.mousewheel.handleMouseEnter);\n        target.on('mouseleave', swiper.mousewheel.handleMouseLeave);\n        target.on(event, swiper.mousewheel.handle);\n        swiper.mousewheel.enabled = true;\n        return true;\n      },\n      disable: function disable() {\n        var swiper = this;\n        var event = Mousewheel.event();\n        if (swiper.params.cssMode) {\n          swiper.wrapperEl.addEventListener(event, swiper.mousewheel.handle);\n          return true;\n        }\n        if (!event) {\n          return false;\n        }\n        if (!swiper.mousewheel.enabled) {\n          return false;\n        }\n        var target = swiper.$el;\n        if (swiper.params.mousewheel.eventsTarged !== 'container') {\n          target = $(swiper.params.mousewheel.eventsTarged);\n        }\n        target.off(event, swiper.mousewheel.handle);\n        swiper.mousewheel.enabled = false;\n        return true;\n      }\n    };\n    var Mousewheel$1 = {\n      name: 'mousewheel',\n      params: {\n        mousewheel: {\n          enabled: false,\n          releaseOnEdges: false,\n          invert: false,\n          forceToAxis: false,\n          sensitivity: 1,\n          eventsTarged: 'container'\n        }\n      },\n      create: function create() {\n        var swiper = this;\n        Utils.extend(swiper, {\n          mousewheel: {\n            enabled: false,\n            enable: Mousewheel.enable.bind(swiper),\n            disable: Mousewheel.disable.bind(swiper),\n            handle: Mousewheel.handle.bind(swiper),\n            handleMouseEnter: Mousewheel.handleMouseEnter.bind(swiper),\n            handleMouseLeave: Mousewheel.handleMouseLeave.bind(swiper),\n            animateSlider: Mousewheel.animateSlider.bind(swiper),\n            releaseScroll: Mousewheel.releaseScroll.bind(swiper),\n            lastScrollTime: Utils.now(),\n            lastEventBeforeSnap: undefined,\n            recentWheelEvents: []\n          }\n        });\n      },\n      on: {\n        init: function init() {\n          var swiper = this;\n          if (!swiper.params.mousewheel.enabled && swiper.params.cssMode) {\n            swiper.mousewheel.disable();\n          }\n          if (swiper.params.mousewheel.enabled) {\n            swiper.mousewheel.enable();\n          }\n        },\n        destroy: function destroy() {\n          var swiper = this;\n          if (swiper.params.cssMode) {\n            swiper.mousewheel.enable();\n          }\n          if (swiper.mousewheel.enabled) {\n            swiper.mousewheel.disable();\n          }\n        }\n      }\n    };\n    var Navigation = {\n      update: function update() {\n        // Update Navigation Buttons\n        var swiper = this;\n        var params = swiper.params.navigation;\n        if (swiper.params.loop) {\n          return;\n        }\n        var ref = swiper.navigation;\n        var $nextEl = ref.$nextEl;\n        var $prevEl = ref.$prevEl;\n        if ($prevEl && $prevEl.length > 0) {\n          if (swiper.isBeginning) {\n            $prevEl.addClass(params.disabledClass);\n          } else {\n            $prevEl.removeClass(params.disabledClass);\n          }\n          $prevEl[swiper.params.watchOverflow && swiper.isLocked ? 'addClass' : 'removeClass'](params.lockClass);\n        }\n        if ($nextEl && $nextEl.length > 0) {\n          if (swiper.isEnd) {\n            $nextEl.addClass(params.disabledClass);\n          } else {\n            $nextEl.removeClass(params.disabledClass);\n          }\n          $nextEl[swiper.params.watchOverflow && swiper.isLocked ? 'addClass' : 'removeClass'](params.lockClass);\n        }\n      },\n      onPrevClick: function onPrevClick(e) {\n        var swiper = this;\n        e.preventDefault();\n        if (swiper.isBeginning && !swiper.params.loop) {\n          return;\n        }\n        swiper.slidePrev();\n      },\n      onNextClick: function onNextClick(e) {\n        var swiper = this;\n        e.preventDefault();\n        if (swiper.isEnd && !swiper.params.loop) {\n          return;\n        }\n        swiper.slideNext();\n      },\n      init: function init() {\n        var swiper = this;\n        var params = swiper.params.navigation;\n        if (!(params.nextEl || params.prevEl)) {\n          return;\n        }\n        var $nextEl;\n        var $prevEl;\n        if (params.nextEl) {\n          $nextEl = $(params.nextEl);\n          if (swiper.params.uniqueNavElements && typeof params.nextEl === 'string' && $nextEl.length > 1 && swiper.$el.find(params.nextEl).length === 1) {\n            $nextEl = swiper.$el.find(params.nextEl);\n          }\n        }\n        if (params.prevEl) {\n          $prevEl = $(params.prevEl);\n          if (swiper.params.uniqueNavElements && typeof params.prevEl === 'string' && $prevEl.length > 1 && swiper.$el.find(params.prevEl).length === 1) {\n            $prevEl = swiper.$el.find(params.prevEl);\n          }\n        }\n        if ($nextEl && $nextEl.length > 0) {\n          $nextEl.on('click', swiper.navigation.onNextClick);\n        }\n        if ($prevEl && $prevEl.length > 0) {\n          $prevEl.on('click', swiper.navigation.onPrevClick);\n        }\n        Utils.extend(swiper.navigation, {\n          $nextEl: $nextEl,\n          nextEl: $nextEl && $nextEl[0],\n          $prevEl: $prevEl,\n          prevEl: $prevEl && $prevEl[0]\n        });\n      },\n      destroy: function destroy() {\n        var swiper = this;\n        var ref = swiper.navigation;\n        var $nextEl = ref.$nextEl;\n        var $prevEl = ref.$prevEl;\n        if ($nextEl && $nextEl.length) {\n          $nextEl.off('click', swiper.navigation.onNextClick);\n          $nextEl.removeClass(swiper.params.navigation.disabledClass);\n        }\n        if ($prevEl && $prevEl.length) {\n          $prevEl.off('click', swiper.navigation.onPrevClick);\n          $prevEl.removeClass(swiper.params.navigation.disabledClass);\n        }\n      }\n    };\n    var Navigation$1 = {\n      name: 'navigation',\n      params: {\n        navigation: {\n          nextEl: null,\n          prevEl: null,\n          hideOnClick: false,\n          disabledClass: 'swiper-button-disabled',\n          hiddenClass: 'swiper-button-hidden',\n          lockClass: 'swiper-button-lock'\n        }\n      },\n      create: function create() {\n        var swiper = this;\n        Utils.extend(swiper, {\n          navigation: {\n            init: Navigation.init.bind(swiper),\n            update: Navigation.update.bind(swiper),\n            destroy: Navigation.destroy.bind(swiper),\n            onNextClick: Navigation.onNextClick.bind(swiper),\n            onPrevClick: Navigation.onPrevClick.bind(swiper)\n          }\n        });\n      },\n      on: {\n        init: function init() {\n          var swiper = this;\n          swiper.navigation.init();\n          swiper.navigation.update();\n        },\n        toEdge: function toEdge() {\n          var swiper = this;\n          swiper.navigation.update();\n        },\n        fromEdge: function fromEdge() {\n          var swiper = this;\n          swiper.navigation.update();\n        },\n        destroy: function destroy() {\n          var swiper = this;\n          swiper.navigation.destroy();\n        },\n        click: function click(e) {\n          var swiper = this;\n          var ref = swiper.navigation;\n          var $nextEl = ref.$nextEl;\n          var $prevEl = ref.$prevEl;\n          if (swiper.params.navigation.hideOnClick && !$(e.target).is($prevEl) && !$(e.target).is($nextEl)) {\n            var isHidden;\n            if ($nextEl) {\n              isHidden = $nextEl.hasClass(swiper.params.navigation.hiddenClass);\n            } else if ($prevEl) {\n              isHidden = $prevEl.hasClass(swiper.params.navigation.hiddenClass);\n            }\n            if (isHidden === true) {\n              swiper.emit('navigationShow', swiper);\n            } else {\n              swiper.emit('navigationHide', swiper);\n            }\n            if ($nextEl) {\n              $nextEl.toggleClass(swiper.params.navigation.hiddenClass);\n            }\n            if ($prevEl) {\n              $prevEl.toggleClass(swiper.params.navigation.hiddenClass);\n            }\n          }\n        }\n      }\n    };\n    var Pagination = {\n      update: function update() {\n        // Render || Update Pagination bullets/items\n        var swiper = this;\n        var rtl = swiper.rtl;\n        var params = swiper.params.pagination;\n        if (!params.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0) {\n          return;\n        }\n        var slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.slides.length;\n        var $el = swiper.pagination.$el;\n        // Current/Total\n        var current;\n        var total = swiper.params.loop ? Math.ceil((slidesLength - swiper.loopedSlides * 2) / swiper.params.slidesPerGroup) : swiper.snapGrid.length;\n        if (swiper.params.loop) {\n          current = Math.ceil((swiper.activeIndex - swiper.loopedSlides) / swiper.params.slidesPerGroup);\n          if (current > slidesLength - 1 - swiper.loopedSlides * 2) {\n            current -= slidesLength - swiper.loopedSlides * 2;\n          }\n          if (current > total - 1) {\n            current -= total;\n          }\n          if (current < 0 && swiper.params.paginationType !== 'bullets') {\n            current = total + current;\n          }\n        } else if (typeof swiper.snapIndex !== 'undefined') {\n          current = swiper.snapIndex;\n        } else {\n          current = swiper.activeIndex || 0;\n        }\n        // Types\n        if (params.type === 'bullets' && swiper.pagination.bullets && swiper.pagination.bullets.length > 0) {\n          var bullets = swiper.pagination.bullets;\n          var firstIndex;\n          var lastIndex;\n          var midIndex;\n          if (params.dynamicBullets) {\n            swiper.pagination.bulletSize = bullets.eq(0)[swiper.isHorizontal() ? 'outerWidth' : 'outerHeight'](true);\n            $el.css(swiper.isHorizontal() ? 'width' : 'height', swiper.pagination.bulletSize * (params.dynamicMainBullets + 4) + \"px\");\n            if (params.dynamicMainBullets > 1 && swiper.previousIndex !== undefined) {\n              swiper.pagination.dynamicBulletIndex += current - swiper.previousIndex;\n              if (swiper.pagination.dynamicBulletIndex > params.dynamicMainBullets - 1) {\n                swiper.pagination.dynamicBulletIndex = params.dynamicMainBullets - 1;\n              } else if (swiper.pagination.dynamicBulletIndex < 0) {\n                swiper.pagination.dynamicBulletIndex = 0;\n              }\n            }\n            firstIndex = current - swiper.pagination.dynamicBulletIndex;\n            lastIndex = firstIndex + (Math.min(bullets.length, params.dynamicMainBullets) - 1);\n            midIndex = (lastIndex + firstIndex) / 2;\n          }\n          bullets.removeClass(params.bulletActiveClass + \" \" + params.bulletActiveClass + \"-next \" + params.bulletActiveClass + \"-next-next \" + params.bulletActiveClass + \"-prev \" + params.bulletActiveClass + \"-prev-prev \" + params.bulletActiveClass + \"-main\");\n          if ($el.length > 1) {\n            bullets.each(function (index, bullet) {\n              var $bullet = $(bullet);\n              var bulletIndex = $bullet.index();\n              if (bulletIndex === current) {\n                $bullet.addClass(params.bulletActiveClass);\n              }\n              if (params.dynamicBullets) {\n                if (bulletIndex >= firstIndex && bulletIndex <= lastIndex) {\n                  $bullet.addClass(params.bulletActiveClass + \"-main\");\n                }\n                if (bulletIndex === firstIndex) {\n                  $bullet.prev().addClass(params.bulletActiveClass + \"-prev\").prev().addClass(params.bulletActiveClass + \"-prev-prev\");\n                }\n                if (bulletIndex === lastIndex) {\n                  $bullet.next().addClass(params.bulletActiveClass + \"-next\").next().addClass(params.bulletActiveClass + \"-next-next\");\n                }\n              }\n            });\n          } else {\n            var $bullet = bullets.eq(current);\n            var bulletIndex = $bullet.index();\n            $bullet.addClass(params.bulletActiveClass);\n            if (params.dynamicBullets) {\n              var $firstDisplayedBullet = bullets.eq(firstIndex);\n              var $lastDisplayedBullet = bullets.eq(lastIndex);\n              for (var i = firstIndex; i <= lastIndex; i += 1) {\n                bullets.eq(i).addClass(params.bulletActiveClass + \"-main\");\n              }\n              if (swiper.params.loop) {\n                if (bulletIndex >= bullets.length - params.dynamicMainBullets) {\n                  for (var i$1 = params.dynamicMainBullets; i$1 >= 0; i$1 -= 1) {\n                    bullets.eq(bullets.length - i$1).addClass(params.bulletActiveClass + \"-main\");\n                  }\n                  bullets.eq(bullets.length - params.dynamicMainBullets - 1).addClass(params.bulletActiveClass + \"-prev\");\n                } else {\n                  $firstDisplayedBullet.prev().addClass(params.bulletActiveClass + \"-prev\").prev().addClass(params.bulletActiveClass + \"-prev-prev\");\n                  $lastDisplayedBullet.next().addClass(params.bulletActiveClass + \"-next\").next().addClass(params.bulletActiveClass + \"-next-next\");\n                }\n              } else {\n                $firstDisplayedBullet.prev().addClass(params.bulletActiveClass + \"-prev\").prev().addClass(params.bulletActiveClass + \"-prev-prev\");\n                $lastDisplayedBullet.next().addClass(params.bulletActiveClass + \"-next\").next().addClass(params.bulletActiveClass + \"-next-next\");\n              }\n            }\n          }\n          if (params.dynamicBullets) {\n            var dynamicBulletsLength = Math.min(bullets.length, params.dynamicMainBullets + 4);\n            var bulletsOffset = (swiper.pagination.bulletSize * dynamicBulletsLength - swiper.pagination.bulletSize) / 2 - midIndex * swiper.pagination.bulletSize;\n            var offsetProp = rtl ? 'right' : 'left';\n            bullets.css(swiper.isHorizontal() ? offsetProp : 'top', bulletsOffset + \"px\");\n          }\n        }\n        if (params.type === 'fraction') {\n          $el.find(\".\" + params.currentClass).text(params.formatFractionCurrent(current + 1));\n          $el.find(\".\" + params.totalClass).text(params.formatFractionTotal(total));\n        }\n        if (params.type === 'progressbar') {\n          var progressbarDirection;\n          if (params.progressbarOpposite) {\n            progressbarDirection = swiper.isHorizontal() ? 'vertical' : 'horizontal';\n          } else {\n            progressbarDirection = swiper.isHorizontal() ? 'horizontal' : 'vertical';\n          }\n          var scale = (current + 1) / total;\n          var scaleX = 1;\n          var scaleY = 1;\n          if (progressbarDirection === 'horizontal') {\n            scaleX = scale;\n          } else {\n            scaleY = scale;\n          }\n          $el.find(\".\" + params.progressbarFillClass).transform(\"translate3d(0,0,0) scaleX(\" + scaleX + \") scaleY(\" + scaleY + \")\").transition(swiper.params.speed);\n        }\n        if (params.type === 'custom' && params.renderCustom) {\n          $el.html(params.renderCustom(swiper, current + 1, total));\n          swiper.emit('paginationRender', swiper, $el[0]);\n        } else {\n          swiper.emit('paginationUpdate', swiper, $el[0]);\n        }\n        $el[swiper.params.watchOverflow && swiper.isLocked ? 'addClass' : 'removeClass'](params.lockClass);\n      },\n      render: function render() {\n        // Render Container\n        var swiper = this;\n        var params = swiper.params.pagination;\n        if (!params.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0) {\n          return;\n        }\n        var slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.slides.length;\n        var $el = swiper.pagination.$el;\n        var paginationHTML = '';\n        if (params.type === 'bullets') {\n          var numberOfBullets = swiper.params.loop ? Math.ceil((slidesLength - swiper.loopedSlides * 2) / swiper.params.slidesPerGroup) : swiper.snapGrid.length;\n          for (var i = 0; i < numberOfBullets; i += 1) {\n            if (params.renderBullet) {\n              paginationHTML += params.renderBullet.call(swiper, i, params.bulletClass);\n            } else {\n              paginationHTML += \"<\" + params.bulletElement + \" class=\\\"\" + params.bulletClass + \"\\\"></\" + params.bulletElement + \">\";\n            }\n          }\n          $el.html(paginationHTML);\n          swiper.pagination.bullets = $el.find(\".\" + params.bulletClass);\n        }\n        if (params.type === 'fraction') {\n          if (params.renderFraction) {\n            paginationHTML = params.renderFraction.call(swiper, params.currentClass, params.totalClass);\n          } else {\n            paginationHTML = \"<span class=\\\"\" + params.currentClass + \"\\\"></span>\" + ' / ' + \"<span class=\\\"\" + params.totalClass + \"\\\"></span>\";\n          }\n          $el.html(paginationHTML);\n        }\n        if (params.type === 'progressbar') {\n          if (params.renderProgressbar) {\n            paginationHTML = params.renderProgressbar.call(swiper, params.progressbarFillClass);\n          } else {\n            paginationHTML = \"<span class=\\\"\" + params.progressbarFillClass + \"\\\"></span>\";\n          }\n          $el.html(paginationHTML);\n        }\n        if (params.type !== 'custom') {\n          swiper.emit('paginationRender', swiper.pagination.$el[0]);\n        }\n      },\n      init: function init() {\n        var swiper = this;\n        var params = swiper.params.pagination;\n        if (!params.el) {\n          return;\n        }\n        var $el = $(params.el);\n        if ($el.length === 0) {\n          return;\n        }\n        if (swiper.params.uniqueNavElements && typeof params.el === 'string' && $el.length > 1 && swiper.$el.find(params.el).length === 1) {\n          $el = swiper.$el.find(params.el);\n        }\n        if (params.type === 'bullets' && params.clickable) {\n          $el.addClass(params.clickableClass);\n        }\n        $el.addClass(params.modifierClass + params.type);\n        if (params.type === 'bullets' && params.dynamicBullets) {\n          $el.addClass(\"\" + params.modifierClass + params.type + \"-dynamic\");\n          swiper.pagination.dynamicBulletIndex = 0;\n          if (params.dynamicMainBullets < 1) {\n            params.dynamicMainBullets = 1;\n          }\n        }\n        if (params.type === 'progressbar' && params.progressbarOpposite) {\n          $el.addClass(params.progressbarOppositeClass);\n        }\n        if (params.clickable) {\n          $el.on('click', \".\" + params.bulletClass, function onClick(e) {\n            e.preventDefault();\n            var index = $(this).index() * swiper.params.slidesPerGroup;\n            if (swiper.params.loop) {\n              index += swiper.loopedSlides;\n            }\n            swiper.slideTo(index);\n          });\n        }\n        Utils.extend(swiper.pagination, {\n          $el: $el,\n          el: $el[0]\n        });\n      },\n      destroy: function destroy() {\n        var swiper = this;\n        var params = swiper.params.pagination;\n        if (!params.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0) {\n          return;\n        }\n        var $el = swiper.pagination.$el;\n        $el.removeClass(params.hiddenClass);\n        $el.removeClass(params.modifierClass + params.type);\n        if (swiper.pagination.bullets) {\n          swiper.pagination.bullets.removeClass(params.bulletActiveClass);\n        }\n        if (params.clickable) {\n          $el.off('click', \".\" + params.bulletClass);\n        }\n      }\n    };\n    var Pagination$1 = {\n      name: 'pagination',\n      params: {\n        pagination: {\n          el: null,\n          bulletElement: 'span',\n          clickable: false,\n          hideOnClick: false,\n          renderBullet: null,\n          renderProgressbar: null,\n          renderFraction: null,\n          renderCustom: null,\n          progressbarOpposite: false,\n          type: 'bullets',\n          // 'bullets' or 'progressbar' or 'fraction' or 'custom'\n          dynamicBullets: false,\n          dynamicMainBullets: 1,\n          formatFractionCurrent: function formatFractionCurrent(number) {\n            return number;\n          },\n          formatFractionTotal: function formatFractionTotal(number) {\n            return number;\n          },\n          bulletClass: 'swiper-pagination-bullet',\n          bulletActiveClass: 'swiper-pagination-bullet-active',\n          modifierClass: 'swiper-pagination-',\n          // NEW\n          currentClass: 'swiper-pagination-current',\n          totalClass: 'swiper-pagination-total',\n          hiddenClass: 'swiper-pagination-hidden',\n          progressbarFillClass: 'swiper-pagination-progressbar-fill',\n          progressbarOppositeClass: 'swiper-pagination-progressbar-opposite',\n          clickableClass: 'swiper-pagination-clickable',\n          // NEW\n          lockClass: 'swiper-pagination-lock'\n        }\n      },\n      create: function create() {\n        var swiper = this;\n        Utils.extend(swiper, {\n          pagination: {\n            init: Pagination.init.bind(swiper),\n            render: Pagination.render.bind(swiper),\n            update: Pagination.update.bind(swiper),\n            destroy: Pagination.destroy.bind(swiper),\n            dynamicBulletIndex: 0\n          }\n        });\n      },\n      on: {\n        init: function init() {\n          var swiper = this;\n          swiper.pagination.init();\n          swiper.pagination.render();\n          swiper.pagination.update();\n        },\n        activeIndexChange: function activeIndexChange() {\n          var swiper = this;\n          if (swiper.params.loop) {\n            swiper.pagination.update();\n          } else if (typeof swiper.snapIndex === 'undefined') {\n            swiper.pagination.update();\n          }\n        },\n        snapIndexChange: function snapIndexChange() {\n          var swiper = this;\n          if (!swiper.params.loop) {\n            swiper.pagination.update();\n          }\n        },\n        slidesLengthChange: function slidesLengthChange() {\n          var swiper = this;\n          if (swiper.params.loop) {\n            swiper.pagination.render();\n            swiper.pagination.update();\n          }\n        },\n        snapGridLengthChange: function snapGridLengthChange() {\n          var swiper = this;\n          if (!swiper.params.loop) {\n            swiper.pagination.render();\n            swiper.pagination.update();\n          }\n        },\n        destroy: function destroy() {\n          var swiper = this;\n          swiper.pagination.destroy();\n        },\n        click: function click(e) {\n          var swiper = this;\n          if (swiper.params.pagination.el && swiper.params.pagination.hideOnClick && swiper.pagination.$el.length > 0 && !$(e.target).hasClass(swiper.params.pagination.bulletClass)) {\n            var isHidden = swiper.pagination.$el.hasClass(swiper.params.pagination.hiddenClass);\n            if (isHidden === true) {\n              swiper.emit('paginationShow', swiper);\n            } else {\n              swiper.emit('paginationHide', swiper);\n            }\n            swiper.pagination.$el.toggleClass(swiper.params.pagination.hiddenClass);\n          }\n        }\n      }\n    };\n    var Scrollbar = {\n      setTranslate: function setTranslate() {\n        var swiper = this;\n        if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) {\n          return;\n        }\n        var scrollbar = swiper.scrollbar;\n        var rtl = swiper.rtlTranslate;\n        var progress = swiper.progress;\n        var dragSize = scrollbar.dragSize;\n        var trackSize = scrollbar.trackSize;\n        var $dragEl = scrollbar.$dragEl;\n        var $el = scrollbar.$el;\n        var params = swiper.params.scrollbar;\n        var newSize = dragSize;\n        var newPos = (trackSize - dragSize) * progress;\n        if (rtl) {\n          newPos = -newPos;\n          if (newPos > 0) {\n            newSize = dragSize - newPos;\n            newPos = 0;\n          } else if (-newPos + dragSize > trackSize) {\n            newSize = trackSize + newPos;\n          }\n        } else if (newPos < 0) {\n          newSize = dragSize + newPos;\n          newPos = 0;\n        } else if (newPos + dragSize > trackSize) {\n          newSize = trackSize - newPos;\n        }\n        if (swiper.isHorizontal()) {\n          $dragEl.transform(\"translate3d(\" + newPos + \"px, 0, 0)\");\n          $dragEl[0].style.width = newSize + \"px\";\n        } else {\n          $dragEl.transform(\"translate3d(0px, \" + newPos + \"px, 0)\");\n          $dragEl[0].style.height = newSize + \"px\";\n        }\n        if (params.hide) {\n          clearTimeout(swiper.scrollbar.timeout);\n          $el[0].style.opacity = 1;\n          swiper.scrollbar.timeout = setTimeout(function () {\n            $el[0].style.opacity = 0;\n            $el.transition(400);\n          }, 1000);\n        }\n      },\n      setTransition: function setTransition(duration) {\n        var swiper = this;\n        if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) {\n          return;\n        }\n        swiper.scrollbar.$dragEl.transition(duration);\n      },\n      updateSize: function updateSize() {\n        var swiper = this;\n        if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) {\n          return;\n        }\n        var scrollbar = swiper.scrollbar;\n        var $dragEl = scrollbar.$dragEl;\n        var $el = scrollbar.$el;\n        $dragEl[0].style.width = '';\n        $dragEl[0].style.height = '';\n        var trackSize = swiper.isHorizontal() ? $el[0].offsetWidth : $el[0].offsetHeight;\n        var divider = swiper.size / swiper.virtualSize;\n        var moveDivider = divider * (trackSize / swiper.size);\n        var dragSize;\n        if (swiper.params.scrollbar.dragSize === 'auto') {\n          dragSize = trackSize * divider;\n        } else {\n          dragSize = parseInt(swiper.params.scrollbar.dragSize, 10);\n        }\n        if (swiper.isHorizontal()) {\n          $dragEl[0].style.width = dragSize + \"px\";\n        } else {\n          $dragEl[0].style.height = dragSize + \"px\";\n        }\n        if (divider >= 1) {\n          $el[0].style.display = 'none';\n        } else {\n          $el[0].style.display = '';\n        }\n        if (swiper.params.scrollbar.hide) {\n          $el[0].style.opacity = 0;\n        }\n        Utils.extend(scrollbar, {\n          trackSize: trackSize,\n          divider: divider,\n          moveDivider: moveDivider,\n          dragSize: dragSize\n        });\n        scrollbar.$el[swiper.params.watchOverflow && swiper.isLocked ? 'addClass' : 'removeClass'](swiper.params.scrollbar.lockClass);\n      },\n      getPointerPosition: function getPointerPosition(e) {\n        var swiper = this;\n        if (swiper.isHorizontal()) {\n          return e.type === 'touchstart' || e.type === 'touchmove' ? e.targetTouches[0].clientX : e.clientX;\n        }\n        return e.type === 'touchstart' || e.type === 'touchmove' ? e.targetTouches[0].clientY : e.clientY;\n      },\n      setDragPosition: function setDragPosition(e) {\n        var swiper = this;\n        var scrollbar = swiper.scrollbar;\n        var rtl = swiper.rtlTranslate;\n        var $el = scrollbar.$el;\n        var dragSize = scrollbar.dragSize;\n        var trackSize = scrollbar.trackSize;\n        var dragStartPos = scrollbar.dragStartPos;\n        var positionRatio;\n        positionRatio = (scrollbar.getPointerPosition(e) - $el.offset()[swiper.isHorizontal() ? 'left' : 'top'] - (dragStartPos !== null ? dragStartPos : dragSize / 2)) / (trackSize - dragSize);\n        positionRatio = Math.max(Math.min(positionRatio, 1), 0);\n        if (rtl) {\n          positionRatio = 1 - positionRatio;\n        }\n        var position = swiper.minTranslate() + (swiper.maxTranslate() - swiper.minTranslate()) * positionRatio;\n        swiper.updateProgress(position);\n        swiper.setTranslate(position);\n        swiper.updateActiveIndex();\n        swiper.updateSlidesClasses();\n      },\n      onDragStart: function onDragStart(e) {\n        var swiper = this;\n        var params = swiper.params.scrollbar;\n        var scrollbar = swiper.scrollbar;\n        var $wrapperEl = swiper.$wrapperEl;\n        var $el = scrollbar.$el;\n        var $dragEl = scrollbar.$dragEl;\n        swiper.scrollbar.isTouched = true;\n        swiper.scrollbar.dragStartPos = e.target === $dragEl[0] || e.target === $dragEl ? scrollbar.getPointerPosition(e) - e.target.getBoundingClientRect()[swiper.isHorizontal() ? 'left' : 'top'] : null;\n        e.preventDefault();\n        e.stopPropagation();\n        $wrapperEl.transition(100);\n        $dragEl.transition(100);\n        scrollbar.setDragPosition(e);\n        clearTimeout(swiper.scrollbar.dragTimeout);\n        $el.transition(0);\n        if (params.hide) {\n          $el.css('opacity', 1);\n        }\n        if (swiper.params.cssMode) {\n          swiper.$wrapperEl.css('scroll-snap-type', 'none');\n        }\n        swiper.emit('scrollbarDragStart', e);\n      },\n      onDragMove: function onDragMove(e) {\n        var swiper = this;\n        var scrollbar = swiper.scrollbar;\n        var $wrapperEl = swiper.$wrapperEl;\n        var $el = scrollbar.$el;\n        var $dragEl = scrollbar.$dragEl;\n        if (!swiper.scrollbar.isTouched) {\n          return;\n        }\n        if (e.preventDefault) {\n          e.preventDefault();\n        } else {\n          e.returnValue = false;\n        }\n        scrollbar.setDragPosition(e);\n        $wrapperEl.transition(0);\n        $el.transition(0);\n        $dragEl.transition(0);\n        swiper.emit('scrollbarDragMove', e);\n      },\n      onDragEnd: function onDragEnd(e) {\n        var swiper = this;\n        var params = swiper.params.scrollbar;\n        var scrollbar = swiper.scrollbar;\n        var $wrapperEl = swiper.$wrapperEl;\n        var $el = scrollbar.$el;\n        if (!swiper.scrollbar.isTouched) {\n          return;\n        }\n        swiper.scrollbar.isTouched = false;\n        if (swiper.params.cssMode) {\n          swiper.$wrapperEl.css('scroll-snap-type', '');\n          $wrapperEl.transition('');\n        }\n        if (params.hide) {\n          clearTimeout(swiper.scrollbar.dragTimeout);\n          swiper.scrollbar.dragTimeout = Utils.nextTick(function () {\n            $el.css('opacity', 0);\n            $el.transition(400);\n          }, 1000);\n        }\n        swiper.emit('scrollbarDragEnd', e);\n        if (params.snapOnRelease) {\n          swiper.slideToClosest();\n        }\n      },\n      enableDraggable: function enableDraggable() {\n        var swiper = this;\n        if (!swiper.params.scrollbar.el) {\n          return;\n        }\n        var scrollbar = swiper.scrollbar;\n        var touchEventsTouch = swiper.touchEventsTouch;\n        var touchEventsDesktop = swiper.touchEventsDesktop;\n        var params = swiper.params;\n        var $el = scrollbar.$el;\n        var target = $el[0];\n        var activeListener = Support.passiveListener && params.passiveListeners ? {\n          passive: false,\n          capture: false\n        } : false;\n        var passiveListener = Support.passiveListener && params.passiveListeners ? {\n          passive: true,\n          capture: false\n        } : false;\n        if (!Support.touch) {\n          target.addEventListener(touchEventsDesktop.start, swiper.scrollbar.onDragStart, activeListener);\n          doc.addEventListener(touchEventsDesktop.move, swiper.scrollbar.onDragMove, activeListener);\n          doc.addEventListener(touchEventsDesktop.end, swiper.scrollbar.onDragEnd, passiveListener);\n        } else {\n          target.addEventListener(touchEventsTouch.start, swiper.scrollbar.onDragStart, activeListener);\n          target.addEventListener(touchEventsTouch.move, swiper.scrollbar.onDragMove, activeListener);\n          target.addEventListener(touchEventsTouch.end, swiper.scrollbar.onDragEnd, passiveListener);\n        }\n      },\n      disableDraggable: function disableDraggable() {\n        var swiper = this;\n        if (!swiper.params.scrollbar.el) {\n          return;\n        }\n        var scrollbar = swiper.scrollbar;\n        var touchEventsTouch = swiper.touchEventsTouch;\n        var touchEventsDesktop = swiper.touchEventsDesktop;\n        var params = swiper.params;\n        var $el = scrollbar.$el;\n        var target = $el[0];\n        var activeListener = Support.passiveListener && params.passiveListeners ? {\n          passive: false,\n          capture: false\n        } : false;\n        var passiveListener = Support.passiveListener && params.passiveListeners ? {\n          passive: true,\n          capture: false\n        } : false;\n        if (!Support.touch) {\n          target.removeEventListener(touchEventsDesktop.start, swiper.scrollbar.onDragStart, activeListener);\n          doc.removeEventListener(touchEventsDesktop.move, swiper.scrollbar.onDragMove, activeListener);\n          doc.removeEventListener(touchEventsDesktop.end, swiper.scrollbar.onDragEnd, passiveListener);\n        } else {\n          target.removeEventListener(touchEventsTouch.start, swiper.scrollbar.onDragStart, activeListener);\n          target.removeEventListener(touchEventsTouch.move, swiper.scrollbar.onDragMove, activeListener);\n          target.removeEventListener(touchEventsTouch.end, swiper.scrollbar.onDragEnd, passiveListener);\n        }\n      },\n      init: function init() {\n        var swiper = this;\n        if (!swiper.params.scrollbar.el) {\n          return;\n        }\n        var scrollbar = swiper.scrollbar;\n        var $swiperEl = swiper.$el;\n        var params = swiper.params.scrollbar;\n        var $el = $(params.el);\n        if (swiper.params.uniqueNavElements && typeof params.el === 'string' && $el.length > 1 && $swiperEl.find(params.el).length === 1) {\n          $el = $swiperEl.find(params.el);\n        }\n        var $dragEl = $el.find(\".\" + swiper.params.scrollbar.dragClass);\n        if ($dragEl.length === 0) {\n          $dragEl = $(\"<div class=\\\"\" + swiper.params.scrollbar.dragClass + \"\\\"></div>\");\n          $el.append($dragEl);\n        }\n        Utils.extend(scrollbar, {\n          $el: $el,\n          el: $el[0],\n          $dragEl: $dragEl,\n          dragEl: $dragEl[0]\n        });\n        if (params.draggable) {\n          scrollbar.enableDraggable();\n        }\n      },\n      destroy: function destroy() {\n        var swiper = this;\n        swiper.scrollbar.disableDraggable();\n      }\n    };\n    var Scrollbar$1 = {\n      name: 'scrollbar',\n      params: {\n        scrollbar: {\n          el: null,\n          dragSize: 'auto',\n          hide: false,\n          draggable: false,\n          snapOnRelease: true,\n          lockClass: 'swiper-scrollbar-lock',\n          dragClass: 'swiper-scrollbar-drag'\n        }\n      },\n      create: function create() {\n        var swiper = this;\n        Utils.extend(swiper, {\n          scrollbar: {\n            init: Scrollbar.init.bind(swiper),\n            destroy: Scrollbar.destroy.bind(swiper),\n            updateSize: Scrollbar.updateSize.bind(swiper),\n            setTranslate: Scrollbar.setTranslate.bind(swiper),\n            setTransition: Scrollbar.setTransition.bind(swiper),\n            enableDraggable: Scrollbar.enableDraggable.bind(swiper),\n            disableDraggable: Scrollbar.disableDraggable.bind(swiper),\n            setDragPosition: Scrollbar.setDragPosition.bind(swiper),\n            getPointerPosition: Scrollbar.getPointerPosition.bind(swiper),\n            onDragStart: Scrollbar.onDragStart.bind(swiper),\n            onDragMove: Scrollbar.onDragMove.bind(swiper),\n            onDragEnd: Scrollbar.onDragEnd.bind(swiper),\n            isTouched: false,\n            timeout: null,\n            dragTimeout: null\n          }\n        });\n      },\n      on: {\n        init: function init() {\n          var swiper = this;\n          swiper.scrollbar.init();\n          swiper.scrollbar.updateSize();\n          swiper.scrollbar.setTranslate();\n        },\n        update: function update() {\n          var swiper = this;\n          swiper.scrollbar.updateSize();\n        },\n        resize: function resize() {\n          var swiper = this;\n          swiper.scrollbar.updateSize();\n        },\n        observerUpdate: function observerUpdate() {\n          var swiper = this;\n          swiper.scrollbar.updateSize();\n        },\n        setTranslate: function setTranslate() {\n          var swiper = this;\n          swiper.scrollbar.setTranslate();\n        },\n        setTransition: function setTransition(duration) {\n          var swiper = this;\n          swiper.scrollbar.setTransition(duration);\n        },\n        destroy: function destroy() {\n          var swiper = this;\n          swiper.scrollbar.destroy();\n        }\n      }\n    };\n    var Parallax = {\n      setTransform: function setTransform(el, progress) {\n        var swiper = this;\n        var rtl = swiper.rtl;\n        var $el = $(el);\n        var rtlFactor = rtl ? -1 : 1;\n        var p = $el.attr('data-swiper-parallax') || '0';\n        var x = $el.attr('data-swiper-parallax-x');\n        var y = $el.attr('data-swiper-parallax-y');\n        var scale = $el.attr('data-swiper-parallax-scale');\n        var opacity = $el.attr('data-swiper-parallax-opacity');\n        if (x || y) {\n          x = x || '0';\n          y = y || '0';\n        } else if (swiper.isHorizontal()) {\n          x = p;\n          y = '0';\n        } else {\n          y = p;\n          x = '0';\n        }\n        if (x.indexOf('%') >= 0) {\n          x = parseInt(x, 10) * progress * rtlFactor + \"%\";\n        } else {\n          x = x * progress * rtlFactor + \"px\";\n        }\n        if (y.indexOf('%') >= 0) {\n          y = parseInt(y, 10) * progress + \"%\";\n        } else {\n          y = y * progress + \"px\";\n        }\n        if (typeof opacity !== 'undefined' && opacity !== null) {\n          var currentOpacity = opacity - (opacity - 1) * (1 - Math.abs(progress));\n          $el[0].style.opacity = currentOpacity;\n        }\n        if (typeof scale === 'undefined' || scale === null) {\n          $el.transform(\"translate3d(\" + x + \", \" + y + \", 0px)\");\n        } else {\n          var currentScale = scale - (scale - 1) * (1 - Math.abs(progress));\n          $el.transform(\"translate3d(\" + x + \", \" + y + \", 0px) scale(\" + currentScale + \")\");\n        }\n      },\n      setTranslate: function setTranslate() {\n        var swiper = this;\n        var $el = swiper.$el;\n        var slides = swiper.slides;\n        var progress = swiper.progress;\n        var snapGrid = swiper.snapGrid;\n        $el.children('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]').each(function (index, el) {\n          swiper.parallax.setTransform(el, progress);\n        });\n        slides.each(function (slideIndex, slideEl) {\n          var slideProgress = slideEl.progress;\n          if (swiper.params.slidesPerGroup > 1 && swiper.params.slidesPerView !== 'auto') {\n            slideProgress += Math.ceil(slideIndex / 2) - progress * (snapGrid.length - 1);\n          }\n          slideProgress = Math.min(Math.max(slideProgress, -1), 1);\n          $(slideEl).find('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]').each(function (index, el) {\n            swiper.parallax.setTransform(el, slideProgress);\n          });\n        });\n      },\n      setTransition: function setTransition(duration) {\n        if (duration === void 0) duration = this.params.speed;\n        var swiper = this;\n        var $el = swiper.$el;\n        $el.find('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]').each(function (index, parallaxEl) {\n          var $parallaxEl = $(parallaxEl);\n          var parallaxDuration = parseInt($parallaxEl.attr('data-swiper-parallax-duration'), 10) || duration;\n          if (duration === 0) {\n            parallaxDuration = 0;\n          }\n          $parallaxEl.transition(parallaxDuration);\n        });\n      }\n    };\n    var Parallax$1 = {\n      name: 'parallax',\n      params: {\n        parallax: {\n          enabled: false\n        }\n      },\n      create: function create() {\n        var swiper = this;\n        Utils.extend(swiper, {\n          parallax: {\n            setTransform: Parallax.setTransform.bind(swiper),\n            setTranslate: Parallax.setTranslate.bind(swiper),\n            setTransition: Parallax.setTransition.bind(swiper)\n          }\n        });\n      },\n      on: {\n        beforeInit: function beforeInit() {\n          var swiper = this;\n          if (!swiper.params.parallax.enabled) {\n            return;\n          }\n          swiper.params.watchSlidesProgress = true;\n          swiper.originalParams.watchSlidesProgress = true;\n        },\n        init: function init() {\n          var swiper = this;\n          if (!swiper.params.parallax.enabled) {\n            return;\n          }\n          swiper.parallax.setTranslate();\n        },\n        setTranslate: function setTranslate() {\n          var swiper = this;\n          if (!swiper.params.parallax.enabled) {\n            return;\n          }\n          swiper.parallax.setTranslate();\n        },\n        setTransition: function setTransition(duration) {\n          var swiper = this;\n          if (!swiper.params.parallax.enabled) {\n            return;\n          }\n          swiper.parallax.setTransition(duration);\n        }\n      }\n    };\n    var Zoom = {\n      // Calc Scale From Multi-touches\n      getDistanceBetweenTouches: function getDistanceBetweenTouches(e) {\n        if (e.targetTouches.length < 2) {\n          return 1;\n        }\n        var x1 = e.targetTouches[0].pageX;\n        var y1 = e.targetTouches[0].pageY;\n        var x2 = e.targetTouches[1].pageX;\n        var y2 = e.targetTouches[1].pageY;\n        var distance = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n        return distance;\n      },\n      // Events\n      onGestureStart: function onGestureStart(e) {\n        var swiper = this;\n        var params = swiper.params.zoom;\n        var zoom = swiper.zoom;\n        var gesture = zoom.gesture;\n        zoom.fakeGestureTouched = false;\n        zoom.fakeGestureMoved = false;\n        if (!Support.gestures) {\n          if (e.type !== 'touchstart' || e.type === 'touchstart' && e.targetTouches.length < 2) {\n            return;\n          }\n          zoom.fakeGestureTouched = true;\n          gesture.scaleStart = Zoom.getDistanceBetweenTouches(e);\n        }\n        if (!gesture.$slideEl || !gesture.$slideEl.length) {\n          gesture.$slideEl = $(e.target).closest(\".\" + swiper.params.slideClass);\n          if (gesture.$slideEl.length === 0) {\n            gesture.$slideEl = swiper.slides.eq(swiper.activeIndex);\n          }\n          gesture.$imageEl = gesture.$slideEl.find('img, svg, canvas, picture, .swiper-zoom-target');\n          gesture.$imageWrapEl = gesture.$imageEl.parent(\".\" + params.containerClass);\n          gesture.maxRatio = gesture.$imageWrapEl.attr('data-swiper-zoom') || params.maxRatio;\n          if (gesture.$imageWrapEl.length === 0) {\n            gesture.$imageEl = undefined;\n            return;\n          }\n        }\n        gesture.$imageEl.transition(0);\n        swiper.zoom.isScaling = true;\n      },\n      onGestureChange: function onGestureChange(e) {\n        var swiper = this;\n        var params = swiper.params.zoom;\n        var zoom = swiper.zoom;\n        var gesture = zoom.gesture;\n        if (!Support.gestures) {\n          if (e.type !== 'touchmove' || e.type === 'touchmove' && e.targetTouches.length < 2) {\n            return;\n          }\n          zoom.fakeGestureMoved = true;\n          gesture.scaleMove = Zoom.getDistanceBetweenTouches(e);\n        }\n        if (!gesture.$imageEl || gesture.$imageEl.length === 0) {\n          return;\n        }\n        if (Support.gestures) {\n          zoom.scale = e.scale * zoom.currentScale;\n        } else {\n          zoom.scale = gesture.scaleMove / gesture.scaleStart * zoom.currentScale;\n        }\n        if (zoom.scale > gesture.maxRatio) {\n          zoom.scale = gesture.maxRatio - 1 + Math.pow(zoom.scale - gesture.maxRatio + 1, 0.5);\n        }\n        if (zoom.scale < params.minRatio) {\n          zoom.scale = params.minRatio + 1 - Math.pow(params.minRatio - zoom.scale + 1, 0.5);\n        }\n        gesture.$imageEl.transform(\"translate3d(0,0,0) scale(\" + zoom.scale + \")\");\n      },\n      onGestureEnd: function onGestureEnd(e) {\n        var swiper = this;\n        var params = swiper.params.zoom;\n        var zoom = swiper.zoom;\n        var gesture = zoom.gesture;\n        if (!Support.gestures) {\n          if (!zoom.fakeGestureTouched || !zoom.fakeGestureMoved) {\n            return;\n          }\n          if (e.type !== 'touchend' || e.type === 'touchend' && e.changedTouches.length < 2 && !Device.android) {\n            return;\n          }\n          zoom.fakeGestureTouched = false;\n          zoom.fakeGestureMoved = false;\n        }\n        if (!gesture.$imageEl || gesture.$imageEl.length === 0) {\n          return;\n        }\n        zoom.scale = Math.max(Math.min(zoom.scale, gesture.maxRatio), params.minRatio);\n        gesture.$imageEl.transition(swiper.params.speed).transform(\"translate3d(0,0,0) scale(\" + zoom.scale + \")\");\n        zoom.currentScale = zoom.scale;\n        zoom.isScaling = false;\n        if (zoom.scale === 1) {\n          gesture.$slideEl = undefined;\n        }\n      },\n      onTouchStart: function onTouchStart(e) {\n        var swiper = this;\n        var zoom = swiper.zoom;\n        var gesture = zoom.gesture;\n        var image = zoom.image;\n        if (!gesture.$imageEl || gesture.$imageEl.length === 0) {\n          return;\n        }\n        if (image.isTouched) {\n          return;\n        }\n        if (Device.android) {\n          e.preventDefault();\n        }\n        image.isTouched = true;\n        image.touchesStart.x = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;\n        image.touchesStart.y = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;\n      },\n      onTouchMove: function onTouchMove(e) {\n        var swiper = this;\n        var zoom = swiper.zoom;\n        var gesture = zoom.gesture;\n        var image = zoom.image;\n        var velocity = zoom.velocity;\n        if (!gesture.$imageEl || gesture.$imageEl.length === 0) {\n          return;\n        }\n        swiper.allowClick = false;\n        if (!image.isTouched || !gesture.$slideEl) {\n          return;\n        }\n        if (!image.isMoved) {\n          image.width = gesture.$imageEl[0].offsetWidth;\n          image.height = gesture.$imageEl[0].offsetHeight;\n          image.startX = Utils.getTranslate(gesture.$imageWrapEl[0], 'x') || 0;\n          image.startY = Utils.getTranslate(gesture.$imageWrapEl[0], 'y') || 0;\n          gesture.slideWidth = gesture.$slideEl[0].offsetWidth;\n          gesture.slideHeight = gesture.$slideEl[0].offsetHeight;\n          gesture.$imageWrapEl.transition(0);\n          if (swiper.rtl) {\n            image.startX = -image.startX;\n            image.startY = -image.startY;\n          }\n        }\n        // Define if we need image drag\n        var scaledWidth = image.width * zoom.scale;\n        var scaledHeight = image.height * zoom.scale;\n        if (scaledWidth < gesture.slideWidth && scaledHeight < gesture.slideHeight) {\n          return;\n        }\n        image.minX = Math.min(gesture.slideWidth / 2 - scaledWidth / 2, 0);\n        image.maxX = -image.minX;\n        image.minY = Math.min(gesture.slideHeight / 2 - scaledHeight / 2, 0);\n        image.maxY = -image.minY;\n        image.touchesCurrent.x = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;\n        image.touchesCurrent.y = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;\n        if (!image.isMoved && !zoom.isScaling) {\n          if (swiper.isHorizontal() && (Math.floor(image.minX) === Math.floor(image.startX) && image.touchesCurrent.x < image.touchesStart.x || Math.floor(image.maxX) === Math.floor(image.startX) && image.touchesCurrent.x > image.touchesStart.x)) {\n            image.isTouched = false;\n            return;\n          }\n          if (!swiper.isHorizontal() && (Math.floor(image.minY) === Math.floor(image.startY) && image.touchesCurrent.y < image.touchesStart.y || Math.floor(image.maxY) === Math.floor(image.startY) && image.touchesCurrent.y > image.touchesStart.y)) {\n            image.isTouched = false;\n            return;\n          }\n        }\n        e.preventDefault();\n        e.stopPropagation();\n        image.isMoved = true;\n        image.currentX = image.touchesCurrent.x - image.touchesStart.x + image.startX;\n        image.currentY = image.touchesCurrent.y - image.touchesStart.y + image.startY;\n        if (image.currentX < image.minX) {\n          image.currentX = image.minX + 1 - Math.pow(image.minX - image.currentX + 1, 0.8);\n        }\n        if (image.currentX > image.maxX) {\n          image.currentX = image.maxX - 1 + Math.pow(image.currentX - image.maxX + 1, 0.8);\n        }\n        if (image.currentY < image.minY) {\n          image.currentY = image.minY + 1 - Math.pow(image.minY - image.currentY + 1, 0.8);\n        }\n        if (image.currentY > image.maxY) {\n          image.currentY = image.maxY - 1 + Math.pow(image.currentY - image.maxY + 1, 0.8);\n        }\n\n        // Velocity\n        if (!velocity.prevPositionX) {\n          velocity.prevPositionX = image.touchesCurrent.x;\n        }\n        if (!velocity.prevPositionY) {\n          velocity.prevPositionY = image.touchesCurrent.y;\n        }\n        if (!velocity.prevTime) {\n          velocity.prevTime = Date.now();\n        }\n        velocity.x = (image.touchesCurrent.x - velocity.prevPositionX) / (Date.now() - velocity.prevTime) / 2;\n        velocity.y = (image.touchesCurrent.y - velocity.prevPositionY) / (Date.now() - velocity.prevTime) / 2;\n        if (Math.abs(image.touchesCurrent.x - velocity.prevPositionX) < 2) {\n          velocity.x = 0;\n        }\n        if (Math.abs(image.touchesCurrent.y - velocity.prevPositionY) < 2) {\n          velocity.y = 0;\n        }\n        velocity.prevPositionX = image.touchesCurrent.x;\n        velocity.prevPositionY = image.touchesCurrent.y;\n        velocity.prevTime = Date.now();\n        gesture.$imageWrapEl.transform(\"translate3d(\" + image.currentX + \"px, \" + image.currentY + \"px,0)\");\n      },\n      onTouchEnd: function onTouchEnd() {\n        var swiper = this;\n        var zoom = swiper.zoom;\n        var gesture = zoom.gesture;\n        var image = zoom.image;\n        var velocity = zoom.velocity;\n        if (!gesture.$imageEl || gesture.$imageEl.length === 0) {\n          return;\n        }\n        if (!image.isTouched || !image.isMoved) {\n          image.isTouched = false;\n          image.isMoved = false;\n          return;\n        }\n        image.isTouched = false;\n        image.isMoved = false;\n        var momentumDurationX = 300;\n        var momentumDurationY = 300;\n        var momentumDistanceX = velocity.x * momentumDurationX;\n        var newPositionX = image.currentX + momentumDistanceX;\n        var momentumDistanceY = velocity.y * momentumDurationY;\n        var newPositionY = image.currentY + momentumDistanceY;\n\n        // Fix duration\n        if (velocity.x !== 0) {\n          momentumDurationX = Math.abs((newPositionX - image.currentX) / velocity.x);\n        }\n        if (velocity.y !== 0) {\n          momentumDurationY = Math.abs((newPositionY - image.currentY) / velocity.y);\n        }\n        var momentumDuration = Math.max(momentumDurationX, momentumDurationY);\n        image.currentX = newPositionX;\n        image.currentY = newPositionY;\n\n        // Define if we need image drag\n        var scaledWidth = image.width * zoom.scale;\n        var scaledHeight = image.height * zoom.scale;\n        image.minX = Math.min(gesture.slideWidth / 2 - scaledWidth / 2, 0);\n        image.maxX = -image.minX;\n        image.minY = Math.min(gesture.slideHeight / 2 - scaledHeight / 2, 0);\n        image.maxY = -image.minY;\n        image.currentX = Math.max(Math.min(image.currentX, image.maxX), image.minX);\n        image.currentY = Math.max(Math.min(image.currentY, image.maxY), image.minY);\n        gesture.$imageWrapEl.transition(momentumDuration).transform(\"translate3d(\" + image.currentX + \"px, \" + image.currentY + \"px,0)\");\n      },\n      onTransitionEnd: function onTransitionEnd() {\n        var swiper = this;\n        var zoom = swiper.zoom;\n        var gesture = zoom.gesture;\n        if (gesture.$slideEl && swiper.previousIndex !== swiper.activeIndex) {\n          gesture.$imageEl.transform('translate3d(0,0,0) scale(1)');\n          gesture.$imageWrapEl.transform('translate3d(0,0,0)');\n          zoom.scale = 1;\n          zoom.currentScale = 1;\n          gesture.$slideEl = undefined;\n          gesture.$imageEl = undefined;\n          gesture.$imageWrapEl = undefined;\n        }\n      },\n      // Toggle Zoom\n      toggle: function toggle(e) {\n        var swiper = this;\n        var zoom = swiper.zoom;\n        if (zoom.scale && zoom.scale !== 1) {\n          // Zoom Out\n          zoom.out();\n        } else {\n          // Zoom In\n          zoom.in(e);\n        }\n      },\n      in: function in$1(e) {\n        var swiper = this;\n        var zoom = swiper.zoom;\n        var params = swiper.params.zoom;\n        var gesture = zoom.gesture;\n        var image = zoom.image;\n        if (!gesture.$slideEl) {\n          gesture.$slideEl = swiper.slides.eq(swiper.activeIndex);\n          gesture.$imageEl = gesture.$slideEl.find('img, svg, canvas, picture, .swiper-zoom-target');\n          gesture.$imageWrapEl = gesture.$imageEl.parent(\".\" + params.containerClass);\n        }\n        if (!gesture.$imageEl || gesture.$imageEl.length === 0) {\n          return;\n        }\n        gesture.$slideEl.addClass(\"\" + params.zoomedSlideClass);\n        var touchX;\n        var touchY;\n        var offsetX;\n        var offsetY;\n        var diffX;\n        var diffY;\n        var translateX;\n        var translateY;\n        var imageWidth;\n        var imageHeight;\n        var scaledWidth;\n        var scaledHeight;\n        var translateMinX;\n        var translateMinY;\n        var translateMaxX;\n        var translateMaxY;\n        var slideWidth;\n        var slideHeight;\n        if (typeof image.touchesStart.x === 'undefined' && e) {\n          touchX = e.type === 'touchend' ? e.changedTouches[0].pageX : e.pageX;\n          touchY = e.type === 'touchend' ? e.changedTouches[0].pageY : e.pageY;\n        } else {\n          touchX = image.touchesStart.x;\n          touchY = image.touchesStart.y;\n        }\n        zoom.scale = gesture.$imageWrapEl.attr('data-swiper-zoom') || params.maxRatio;\n        zoom.currentScale = gesture.$imageWrapEl.attr('data-swiper-zoom') || params.maxRatio;\n        if (e) {\n          slideWidth = gesture.$slideEl[0].offsetWidth;\n          slideHeight = gesture.$slideEl[0].offsetHeight;\n          offsetX = gesture.$slideEl.offset().left;\n          offsetY = gesture.$slideEl.offset().top;\n          diffX = offsetX + slideWidth / 2 - touchX;\n          diffY = offsetY + slideHeight / 2 - touchY;\n          imageWidth = gesture.$imageEl[0].offsetWidth;\n          imageHeight = gesture.$imageEl[0].offsetHeight;\n          scaledWidth = imageWidth * zoom.scale;\n          scaledHeight = imageHeight * zoom.scale;\n          translateMinX = Math.min(slideWidth / 2 - scaledWidth / 2, 0);\n          translateMinY = Math.min(slideHeight / 2 - scaledHeight / 2, 0);\n          translateMaxX = -translateMinX;\n          translateMaxY = -translateMinY;\n          translateX = diffX * zoom.scale;\n          translateY = diffY * zoom.scale;\n          if (translateX < translateMinX) {\n            translateX = translateMinX;\n          }\n          if (translateX > translateMaxX) {\n            translateX = translateMaxX;\n          }\n          if (translateY < translateMinY) {\n            translateY = translateMinY;\n          }\n          if (translateY > translateMaxY) {\n            translateY = translateMaxY;\n          }\n        } else {\n          translateX = 0;\n          translateY = 0;\n        }\n        gesture.$imageWrapEl.transition(300).transform(\"translate3d(\" + translateX + \"px, \" + translateY + \"px,0)\");\n        gesture.$imageEl.transition(300).transform(\"translate3d(0,0,0) scale(\" + zoom.scale + \")\");\n      },\n      out: function out() {\n        var swiper = this;\n        var zoom = swiper.zoom;\n        var params = swiper.params.zoom;\n        var gesture = zoom.gesture;\n        if (!gesture.$slideEl) {\n          gesture.$slideEl = swiper.slides.eq(swiper.activeIndex);\n          gesture.$imageEl = gesture.$slideEl.find('img, svg, canvas, picture, .swiper-zoom-target');\n          gesture.$imageWrapEl = gesture.$imageEl.parent(\".\" + params.containerClass);\n        }\n        if (!gesture.$imageEl || gesture.$imageEl.length === 0) {\n          return;\n        }\n        zoom.scale = 1;\n        zoom.currentScale = 1;\n        gesture.$imageWrapEl.transition(300).transform('translate3d(0,0,0)');\n        gesture.$imageEl.transition(300).transform('translate3d(0,0,0) scale(1)');\n        gesture.$slideEl.removeClass(\"\" + params.zoomedSlideClass);\n        gesture.$slideEl = undefined;\n      },\n      // Attach/Detach Events\n      enable: function enable() {\n        var swiper = this;\n        var zoom = swiper.zoom;\n        if (zoom.enabled) {\n          return;\n        }\n        zoom.enabled = true;\n        var passiveListener = swiper.touchEvents.start === 'touchstart' && Support.passiveListener && swiper.params.passiveListeners ? {\n          passive: true,\n          capture: false\n        } : false;\n        var activeListenerWithCapture = Support.passiveListener ? {\n          passive: false,\n          capture: true\n        } : true;\n        var slideSelector = \".\" + swiper.params.slideClass;\n\n        // Scale image\n        if (Support.gestures) {\n          swiper.$wrapperEl.on('gesturestart', slideSelector, zoom.onGestureStart, passiveListener);\n          swiper.$wrapperEl.on('gesturechange', slideSelector, zoom.onGestureChange, passiveListener);\n          swiper.$wrapperEl.on('gestureend', slideSelector, zoom.onGestureEnd, passiveListener);\n        } else if (swiper.touchEvents.start === 'touchstart') {\n          swiper.$wrapperEl.on(swiper.touchEvents.start, slideSelector, zoom.onGestureStart, passiveListener);\n          swiper.$wrapperEl.on(swiper.touchEvents.move, slideSelector, zoom.onGestureChange, activeListenerWithCapture);\n          swiper.$wrapperEl.on(swiper.touchEvents.end, slideSelector, zoom.onGestureEnd, passiveListener);\n          if (swiper.touchEvents.cancel) {\n            swiper.$wrapperEl.on(swiper.touchEvents.cancel, slideSelector, zoom.onGestureEnd, passiveListener);\n          }\n        }\n\n        // Move image\n        swiper.$wrapperEl.on(swiper.touchEvents.move, \".\" + swiper.params.zoom.containerClass, zoom.onTouchMove, activeListenerWithCapture);\n      },\n      disable: function disable() {\n        var swiper = this;\n        var zoom = swiper.zoom;\n        if (!zoom.enabled) {\n          return;\n        }\n        swiper.zoom.enabled = false;\n        var passiveListener = swiper.touchEvents.start === 'touchstart' && Support.passiveListener && swiper.params.passiveListeners ? {\n          passive: true,\n          capture: false\n        } : false;\n        var activeListenerWithCapture = Support.passiveListener ? {\n          passive: false,\n          capture: true\n        } : true;\n        var slideSelector = \".\" + swiper.params.slideClass;\n\n        // Scale image\n        if (Support.gestures) {\n          swiper.$wrapperEl.off('gesturestart', slideSelector, zoom.onGestureStart, passiveListener);\n          swiper.$wrapperEl.off('gesturechange', slideSelector, zoom.onGestureChange, passiveListener);\n          swiper.$wrapperEl.off('gestureend', slideSelector, zoom.onGestureEnd, passiveListener);\n        } else if (swiper.touchEvents.start === 'touchstart') {\n          swiper.$wrapperEl.off(swiper.touchEvents.start, slideSelector, zoom.onGestureStart, passiveListener);\n          swiper.$wrapperEl.off(swiper.touchEvents.move, slideSelector, zoom.onGestureChange, activeListenerWithCapture);\n          swiper.$wrapperEl.off(swiper.touchEvents.end, slideSelector, zoom.onGestureEnd, passiveListener);\n          if (swiper.touchEvents.cancel) {\n            swiper.$wrapperEl.off(swiper.touchEvents.cancel, slideSelector, zoom.onGestureEnd, passiveListener);\n          }\n        }\n\n        // Move image\n        swiper.$wrapperEl.off(swiper.touchEvents.move, \".\" + swiper.params.zoom.containerClass, zoom.onTouchMove, activeListenerWithCapture);\n      }\n    };\n    var Zoom$1 = {\n      name: 'zoom',\n      params: {\n        zoom: {\n          enabled: false,\n          maxRatio: 3,\n          minRatio: 1,\n          toggle: true,\n          containerClass: 'swiper-zoom-container',\n          zoomedSlideClass: 'swiper-slide-zoomed'\n        }\n      },\n      create: function create() {\n        var swiper = this;\n        var zoom = {\n          enabled: false,\n          scale: 1,\n          currentScale: 1,\n          isScaling: false,\n          gesture: {\n            $slideEl: undefined,\n            slideWidth: undefined,\n            slideHeight: undefined,\n            $imageEl: undefined,\n            $imageWrapEl: undefined,\n            maxRatio: 3\n          },\n          image: {\n            isTouched: undefined,\n            isMoved: undefined,\n            currentX: undefined,\n            currentY: undefined,\n            minX: undefined,\n            minY: undefined,\n            maxX: undefined,\n            maxY: undefined,\n            width: undefined,\n            height: undefined,\n            startX: undefined,\n            startY: undefined,\n            touchesStart: {},\n            touchesCurrent: {}\n          },\n          velocity: {\n            x: undefined,\n            y: undefined,\n            prevPositionX: undefined,\n            prevPositionY: undefined,\n            prevTime: undefined\n          }\n        };\n        'onGestureStart onGestureChange onGestureEnd onTouchStart onTouchMove onTouchEnd onTransitionEnd toggle enable disable in out'.split(' ').forEach(function (methodName) {\n          zoom[methodName] = Zoom[methodName].bind(swiper);\n        });\n        Utils.extend(swiper, {\n          zoom: zoom\n        });\n        var scale = 1;\n        Object.defineProperty(swiper.zoom, 'scale', {\n          get: function get() {\n            return scale;\n          },\n          set: function set(value) {\n            if (scale !== value) {\n              var imageEl = swiper.zoom.gesture.$imageEl ? swiper.zoom.gesture.$imageEl[0] : undefined;\n              var slideEl = swiper.zoom.gesture.$slideEl ? swiper.zoom.gesture.$slideEl[0] : undefined;\n              swiper.emit('zoomChange', value, imageEl, slideEl);\n            }\n            scale = value;\n          }\n        });\n      },\n      on: {\n        init: function init() {\n          var swiper = this;\n          if (swiper.params.zoom.enabled) {\n            swiper.zoom.enable();\n          }\n        },\n        destroy: function destroy() {\n          var swiper = this;\n          swiper.zoom.disable();\n        },\n        touchStart: function touchStart(e) {\n          var swiper = this;\n          if (!swiper.zoom.enabled) {\n            return;\n          }\n          swiper.zoom.onTouchStart(e);\n        },\n        touchEnd: function touchEnd(e) {\n          var swiper = this;\n          if (!swiper.zoom.enabled) {\n            return;\n          }\n          swiper.zoom.onTouchEnd(e);\n        },\n        doubleTap: function doubleTap(e) {\n          var swiper = this;\n          if (swiper.params.zoom.enabled && swiper.zoom.enabled && swiper.params.zoom.toggle) {\n            swiper.zoom.toggle(e);\n          }\n        },\n        transitionEnd: function transitionEnd() {\n          var swiper = this;\n          if (swiper.zoom.enabled && swiper.params.zoom.enabled) {\n            swiper.zoom.onTransitionEnd();\n          }\n        },\n        slideChange: function slideChange() {\n          var swiper = this;\n          if (swiper.zoom.enabled && swiper.params.zoom.enabled && swiper.params.cssMode) {\n            swiper.zoom.onTransitionEnd();\n          }\n        }\n      }\n    };\n    var Lazy = {\n      loadInSlide: function loadInSlide(index, loadInDuplicate) {\n        if (loadInDuplicate === void 0) loadInDuplicate = true;\n        var swiper = this;\n        var params = swiper.params.lazy;\n        if (typeof index === 'undefined') {\n          return;\n        }\n        if (swiper.slides.length === 0) {\n          return;\n        }\n        var isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n        var $slideEl = isVirtual ? swiper.$wrapperEl.children(\".\" + swiper.params.slideClass + \"[data-swiper-slide-index=\\\"\" + index + \"\\\"]\") : swiper.slides.eq(index);\n        var $images = $slideEl.find(\".\" + params.elementClass + \":not(.\" + params.loadedClass + \"):not(.\" + params.loadingClass + \")\");\n        if ($slideEl.hasClass(params.elementClass) && !$slideEl.hasClass(params.loadedClass) && !$slideEl.hasClass(params.loadingClass)) {\n          $images = $images.add($slideEl[0]);\n        }\n        if ($images.length === 0) {\n          return;\n        }\n        $images.each(function (imageIndex, imageEl) {\n          var $imageEl = $(imageEl);\n          $imageEl.addClass(params.loadingClass);\n          var background = $imageEl.attr('data-background');\n          var src = $imageEl.attr('data-src');\n          var srcset = $imageEl.attr('data-srcset');\n          var sizes = $imageEl.attr('data-sizes');\n          swiper.loadImage($imageEl[0], src || background, srcset, sizes, false, function () {\n            if (typeof swiper === 'undefined' || swiper === null || !swiper || swiper && !swiper.params || swiper.destroyed) {\n              return;\n            }\n            if (background) {\n              $imageEl.css('background-image', \"url(\\\"\" + background + \"\\\")\");\n              $imageEl.removeAttr('data-background');\n            } else {\n              if (srcset) {\n                $imageEl.attr('srcset', srcset);\n                $imageEl.removeAttr('data-srcset');\n              }\n              if (sizes) {\n                $imageEl.attr('sizes', sizes);\n                $imageEl.removeAttr('data-sizes');\n              }\n              if (src) {\n                $imageEl.attr('src', src);\n                $imageEl.removeAttr('data-src');\n              }\n            }\n            $imageEl.addClass(params.loadedClass).removeClass(params.loadingClass);\n            $slideEl.find(\".\" + params.preloaderClass).remove();\n            if (swiper.params.loop && loadInDuplicate) {\n              var slideOriginalIndex = $slideEl.attr('data-swiper-slide-index');\n              if ($slideEl.hasClass(swiper.params.slideDuplicateClass)) {\n                var originalSlide = swiper.$wrapperEl.children(\"[data-swiper-slide-index=\\\"\" + slideOriginalIndex + \"\\\"]:not(.\" + swiper.params.slideDuplicateClass + \")\");\n                swiper.lazy.loadInSlide(originalSlide.index(), false);\n              } else {\n                var duplicatedSlide = swiper.$wrapperEl.children(\".\" + swiper.params.slideDuplicateClass + \"[data-swiper-slide-index=\\\"\" + slideOriginalIndex + \"\\\"]\");\n                swiper.lazy.loadInSlide(duplicatedSlide.index(), false);\n              }\n            }\n            swiper.emit('lazyImageReady', $slideEl[0], $imageEl[0]);\n            if (swiper.params.autoHeight) {\n              swiper.updateAutoHeight();\n            }\n          });\n          swiper.emit('lazyImageLoad', $slideEl[0], $imageEl[0]);\n        });\n      },\n      load: function load() {\n        var swiper = this;\n        var $wrapperEl = swiper.$wrapperEl;\n        var swiperParams = swiper.params;\n        var slides = swiper.slides;\n        var activeIndex = swiper.activeIndex;\n        var isVirtual = swiper.virtual && swiperParams.virtual.enabled;\n        var params = swiperParams.lazy;\n        var slidesPerView = swiperParams.slidesPerView;\n        if (slidesPerView === 'auto') {\n          slidesPerView = 0;\n        }\n        function slideExist(index) {\n          if (isVirtual) {\n            if ($wrapperEl.children(\".\" + swiperParams.slideClass + \"[data-swiper-slide-index=\\\"\" + index + \"\\\"]\").length) {\n              return true;\n            }\n          } else if (slides[index]) {\n            return true;\n          }\n          return false;\n        }\n        function slideIndex(slideEl) {\n          if (isVirtual) {\n            return $(slideEl).attr('data-swiper-slide-index');\n          }\n          return $(slideEl).index();\n        }\n        if (!swiper.lazy.initialImageLoaded) {\n          swiper.lazy.initialImageLoaded = true;\n        }\n        if (swiper.params.watchSlidesVisibility) {\n          $wrapperEl.children(\".\" + swiperParams.slideVisibleClass).each(function (elIndex, slideEl) {\n            var index = isVirtual ? $(slideEl).attr('data-swiper-slide-index') : $(slideEl).index();\n            swiper.lazy.loadInSlide(index);\n          });\n        } else if (slidesPerView > 1) {\n          for (var i = activeIndex; i < activeIndex + slidesPerView; i += 1) {\n            if (slideExist(i)) {\n              swiper.lazy.loadInSlide(i);\n            }\n          }\n        } else {\n          swiper.lazy.loadInSlide(activeIndex);\n        }\n        if (params.loadPrevNext) {\n          if (slidesPerView > 1 || params.loadPrevNextAmount && params.loadPrevNextAmount > 1) {\n            var amount = params.loadPrevNextAmount;\n            var spv = slidesPerView;\n            var maxIndex = Math.min(activeIndex + spv + Math.max(amount, spv), slides.length);\n            var minIndex = Math.max(activeIndex - Math.max(spv, amount), 0);\n            // Next Slides\n            for (var i$1 = activeIndex + slidesPerView; i$1 < maxIndex; i$1 += 1) {\n              if (slideExist(i$1)) {\n                swiper.lazy.loadInSlide(i$1);\n              }\n            }\n            // Prev Slides\n            for (var i$2 = minIndex; i$2 < activeIndex; i$2 += 1) {\n              if (slideExist(i$2)) {\n                swiper.lazy.loadInSlide(i$2);\n              }\n            }\n          } else {\n            var nextSlide = $wrapperEl.children(\".\" + swiperParams.slideNextClass);\n            if (nextSlide.length > 0) {\n              swiper.lazy.loadInSlide(slideIndex(nextSlide));\n            }\n            var prevSlide = $wrapperEl.children(\".\" + swiperParams.slidePrevClass);\n            if (prevSlide.length > 0) {\n              swiper.lazy.loadInSlide(slideIndex(prevSlide));\n            }\n          }\n        }\n      }\n    };\n    var Lazy$1 = {\n      name: 'lazy',\n      params: {\n        lazy: {\n          enabled: false,\n          loadPrevNext: false,\n          loadPrevNextAmount: 1,\n          loadOnTransitionStart: false,\n          elementClass: 'swiper-lazy',\n          loadingClass: 'swiper-lazy-loading',\n          loadedClass: 'swiper-lazy-loaded',\n          preloaderClass: 'swiper-lazy-preloader'\n        }\n      },\n      create: function create() {\n        var swiper = this;\n        Utils.extend(swiper, {\n          lazy: {\n            initialImageLoaded: false,\n            load: Lazy.load.bind(swiper),\n            loadInSlide: Lazy.loadInSlide.bind(swiper)\n          }\n        });\n      },\n      on: {\n        beforeInit: function beforeInit() {\n          var swiper = this;\n          if (swiper.params.lazy.enabled && swiper.params.preloadImages) {\n            swiper.params.preloadImages = false;\n          }\n        },\n        init: function init() {\n          var swiper = this;\n          if (swiper.params.lazy.enabled && !swiper.params.loop && swiper.params.initialSlide === 0) {\n            swiper.lazy.load();\n          }\n        },\n        scroll: function scroll() {\n          var swiper = this;\n          if (swiper.params.freeMode && !swiper.params.freeModeSticky) {\n            swiper.lazy.load();\n          }\n        },\n        resize: function resize() {\n          var swiper = this;\n          if (swiper.params.lazy.enabled) {\n            swiper.lazy.load();\n          }\n        },\n        scrollbarDragMove: function scrollbarDragMove() {\n          var swiper = this;\n          if (swiper.params.lazy.enabled) {\n            swiper.lazy.load();\n          }\n        },\n        transitionStart: function transitionStart() {\n          var swiper = this;\n          if (swiper.params.lazy.enabled) {\n            if (swiper.params.lazy.loadOnTransitionStart || !swiper.params.lazy.loadOnTransitionStart && !swiper.lazy.initialImageLoaded) {\n              swiper.lazy.load();\n            }\n          }\n        },\n        transitionEnd: function transitionEnd() {\n          var swiper = this;\n          if (swiper.params.lazy.enabled && !swiper.params.lazy.loadOnTransitionStart) {\n            swiper.lazy.load();\n          }\n        },\n        slideChange: function slideChange() {\n          var swiper = this;\n          if (swiper.params.lazy.enabled && swiper.params.cssMode) {\n            swiper.lazy.load();\n          }\n        }\n      }\n    };\n\n    /* eslint no-bitwise: [\"error\", { \"allow\": [\">>\"] }] */\n\n    var Controller = {\n      LinearSpline: function LinearSpline(x, y) {\n        var binarySearch = function search() {\n          var maxIndex;\n          var minIndex;\n          var guess;\n          return function (array, val) {\n            minIndex = -1;\n            maxIndex = array.length;\n            while (maxIndex - minIndex > 1) {\n              guess = maxIndex + minIndex >> 1;\n              if (array[guess] <= val) {\n                minIndex = guess;\n              } else {\n                maxIndex = guess;\n              }\n            }\n            return maxIndex;\n          };\n        }();\n        this.x = x;\n        this.y = y;\n        this.lastIndex = x.length - 1;\n        // Given an x value (x2), return the expected y2 value:\n        // (x1,y1) is the known point before given value,\n        // (x3,y3) is the known point after given value.\n        var i1;\n        var i3;\n        this.interpolate = function interpolate(x2) {\n          if (!x2) {\n            return 0;\n          }\n\n          // Get the indexes of x1 and x3 (the array indexes before and after given x2):\n          i3 = binarySearch(this.x, x2);\n          i1 = i3 - 1;\n\n          // We have our indexes i1 & i3, so we can calculate already:\n          // y2 := ((x2−x1) × (y3−y1)) ÷ (x3−x1) + y1\n          return (x2 - this.x[i1]) * (this.y[i3] - this.y[i1]) / (this.x[i3] - this.x[i1]) + this.y[i1];\n        };\n        return this;\n      },\n      // xxx: for now i will just save one spline function to to\n      getInterpolateFunction: function getInterpolateFunction(c) {\n        var swiper = this;\n        if (!swiper.controller.spline) {\n          swiper.controller.spline = swiper.params.loop ? new Controller.LinearSpline(swiper.slidesGrid, c.slidesGrid) : new Controller.LinearSpline(swiper.snapGrid, c.snapGrid);\n        }\n      },\n      setTranslate: function setTranslate(setTranslate$1, byController) {\n        var swiper = this;\n        var controlled = swiper.controller.control;\n        var multiplier;\n        var controlledTranslate;\n        function setControlledTranslate(c) {\n          // this will create an Interpolate function based on the snapGrids\n          // x is the Grid of the scrolled scroller and y will be the controlled scroller\n          // it makes sense to create this only once and recall it for the interpolation\n          // the function does a lot of value caching for performance\n          var translate = swiper.rtlTranslate ? -swiper.translate : swiper.translate;\n          if (swiper.params.controller.by === 'slide') {\n            swiper.controller.getInterpolateFunction(c);\n            // i am not sure why the values have to be multiplicated this way, tried to invert the snapGrid\n            // but it did not work out\n            controlledTranslate = -swiper.controller.spline.interpolate(-translate);\n          }\n          if (!controlledTranslate || swiper.params.controller.by === 'container') {\n            multiplier = (c.maxTranslate() - c.minTranslate()) / (swiper.maxTranslate() - swiper.minTranslate());\n            controlledTranslate = (translate - swiper.minTranslate()) * multiplier + c.minTranslate();\n          }\n          if (swiper.params.controller.inverse) {\n            controlledTranslate = c.maxTranslate() - controlledTranslate;\n          }\n          c.updateProgress(controlledTranslate);\n          c.setTranslate(controlledTranslate, swiper);\n          c.updateActiveIndex();\n          c.updateSlidesClasses();\n        }\n        if (Array.isArray(controlled)) {\n          for (var i = 0; i < controlled.length; i += 1) {\n            if (controlled[i] !== byController && controlled[i] instanceof Swiper) {\n              setControlledTranslate(controlled[i]);\n            }\n          }\n        } else if (controlled instanceof Swiper && byController !== controlled) {\n          setControlledTranslate(controlled);\n        }\n      },\n      setTransition: function setTransition(duration, byController) {\n        var swiper = this;\n        var controlled = swiper.controller.control;\n        var i;\n        function setControlledTransition(c) {\n          c.setTransition(duration, swiper);\n          if (duration !== 0) {\n            c.transitionStart();\n            if (c.params.autoHeight) {\n              Utils.nextTick(function () {\n                c.updateAutoHeight();\n              });\n            }\n            c.$wrapperEl.transitionEnd(function () {\n              if (!controlled) {\n                return;\n              }\n              if (c.params.loop && swiper.params.controller.by === 'slide') {\n                c.loopFix();\n              }\n              c.transitionEnd();\n            });\n          }\n        }\n        if (Array.isArray(controlled)) {\n          for (i = 0; i < controlled.length; i += 1) {\n            if (controlled[i] !== byController && controlled[i] instanceof Swiper) {\n              setControlledTransition(controlled[i]);\n            }\n          }\n        } else if (controlled instanceof Swiper && byController !== controlled) {\n          setControlledTransition(controlled);\n        }\n      }\n    };\n    var Controller$1 = {\n      name: 'controller',\n      params: {\n        controller: {\n          control: undefined,\n          inverse: false,\n          by: 'slide' // or 'container'\n        }\n      },\n\n      create: function create() {\n        var swiper = this;\n        Utils.extend(swiper, {\n          controller: {\n            control: swiper.params.controller.control,\n            getInterpolateFunction: Controller.getInterpolateFunction.bind(swiper),\n            setTranslate: Controller.setTranslate.bind(swiper),\n            setTransition: Controller.setTransition.bind(swiper)\n          }\n        });\n      },\n      on: {\n        update: function update() {\n          var swiper = this;\n          if (!swiper.controller.control) {\n            return;\n          }\n          if (swiper.controller.spline) {\n            swiper.controller.spline = undefined;\n            delete swiper.controller.spline;\n          }\n        },\n        resize: function resize() {\n          var swiper = this;\n          if (!swiper.controller.control) {\n            return;\n          }\n          if (swiper.controller.spline) {\n            swiper.controller.spline = undefined;\n            delete swiper.controller.spline;\n          }\n        },\n        observerUpdate: function observerUpdate() {\n          var swiper = this;\n          if (!swiper.controller.control) {\n            return;\n          }\n          if (swiper.controller.spline) {\n            swiper.controller.spline = undefined;\n            delete swiper.controller.spline;\n          }\n        },\n        setTranslate: function setTranslate(translate, byController) {\n          var swiper = this;\n          if (!swiper.controller.control) {\n            return;\n          }\n          swiper.controller.setTranslate(translate, byController);\n        },\n        setTransition: function setTransition(duration, byController) {\n          var swiper = this;\n          if (!swiper.controller.control) {\n            return;\n          }\n          swiper.controller.setTransition(duration, byController);\n        }\n      }\n    };\n    var a11y = {\n      makeElFocusable: function makeElFocusable($el) {\n        $el.attr('tabIndex', '0');\n        return $el;\n      },\n      addElRole: function addElRole($el, role) {\n        $el.attr('role', role);\n        return $el;\n      },\n      addElLabel: function addElLabel($el, label) {\n        $el.attr('aria-label', label);\n        return $el;\n      },\n      disableEl: function disableEl($el) {\n        $el.attr('aria-disabled', true);\n        return $el;\n      },\n      enableEl: function enableEl($el) {\n        $el.attr('aria-disabled', false);\n        return $el;\n      },\n      onEnterKey: function onEnterKey(e) {\n        var swiper = this;\n        var params = swiper.params.a11y;\n        if (e.keyCode !== 13) {\n          return;\n        }\n        var $targetEl = $(e.target);\n        if (swiper.navigation && swiper.navigation.$nextEl && $targetEl.is(swiper.navigation.$nextEl)) {\n          if (!(swiper.isEnd && !swiper.params.loop)) {\n            swiper.slideNext();\n          }\n          if (swiper.isEnd) {\n            swiper.a11y.notify(params.lastSlideMessage);\n          } else {\n            swiper.a11y.notify(params.nextSlideMessage);\n          }\n        }\n        if (swiper.navigation && swiper.navigation.$prevEl && $targetEl.is(swiper.navigation.$prevEl)) {\n          if (!(swiper.isBeginning && !swiper.params.loop)) {\n            swiper.slidePrev();\n          }\n          if (swiper.isBeginning) {\n            swiper.a11y.notify(params.firstSlideMessage);\n          } else {\n            swiper.a11y.notify(params.prevSlideMessage);\n          }\n        }\n        if (swiper.pagination && $targetEl.is(\".\" + swiper.params.pagination.bulletClass)) {\n          $targetEl[0].click();\n        }\n      },\n      notify: function notify(message) {\n        var swiper = this;\n        var notification = swiper.a11y.liveRegion;\n        if (notification.length === 0) {\n          return;\n        }\n        notification.html('');\n        notification.html(message);\n      },\n      updateNavigation: function updateNavigation() {\n        var swiper = this;\n        if (swiper.params.loop || !swiper.navigation) {\n          return;\n        }\n        var ref = swiper.navigation;\n        var $nextEl = ref.$nextEl;\n        var $prevEl = ref.$prevEl;\n        if ($prevEl && $prevEl.length > 0) {\n          if (swiper.isBeginning) {\n            swiper.a11y.disableEl($prevEl);\n          } else {\n            swiper.a11y.enableEl($prevEl);\n          }\n        }\n        if ($nextEl && $nextEl.length > 0) {\n          if (swiper.isEnd) {\n            swiper.a11y.disableEl($nextEl);\n          } else {\n            swiper.a11y.enableEl($nextEl);\n          }\n        }\n      },\n      updatePagination: function updatePagination() {\n        var swiper = this;\n        var params = swiper.params.a11y;\n        if (swiper.pagination && swiper.params.pagination.clickable && swiper.pagination.bullets && swiper.pagination.bullets.length) {\n          swiper.pagination.bullets.each(function (bulletIndex, bulletEl) {\n            var $bulletEl = $(bulletEl);\n            swiper.a11y.makeElFocusable($bulletEl);\n            swiper.a11y.addElRole($bulletEl, 'button');\n            swiper.a11y.addElLabel($bulletEl, params.paginationBulletMessage.replace(/{{index}}/, $bulletEl.index() + 1));\n          });\n        }\n      },\n      init: function init() {\n        var swiper = this;\n        swiper.$el.append(swiper.a11y.liveRegion);\n\n        // Navigation\n        var params = swiper.params.a11y;\n        var $nextEl;\n        var $prevEl;\n        if (swiper.navigation && swiper.navigation.$nextEl) {\n          $nextEl = swiper.navigation.$nextEl;\n        }\n        if (swiper.navigation && swiper.navigation.$prevEl) {\n          $prevEl = swiper.navigation.$prevEl;\n        }\n        if ($nextEl) {\n          swiper.a11y.makeElFocusable($nextEl);\n          swiper.a11y.addElRole($nextEl, 'button');\n          swiper.a11y.addElLabel($nextEl, params.nextSlideMessage);\n          $nextEl.on('keydown', swiper.a11y.onEnterKey);\n        }\n        if ($prevEl) {\n          swiper.a11y.makeElFocusable($prevEl);\n          swiper.a11y.addElRole($prevEl, 'button');\n          swiper.a11y.addElLabel($prevEl, params.prevSlideMessage);\n          $prevEl.on('keydown', swiper.a11y.onEnterKey);\n        }\n\n        // Pagination\n        if (swiper.pagination && swiper.params.pagination.clickable && swiper.pagination.bullets && swiper.pagination.bullets.length) {\n          swiper.pagination.$el.on('keydown', \".\" + swiper.params.pagination.bulletClass, swiper.a11y.onEnterKey);\n        }\n      },\n      destroy: function destroy() {\n        var swiper = this;\n        if (swiper.a11y.liveRegion && swiper.a11y.liveRegion.length > 0) {\n          swiper.a11y.liveRegion.remove();\n        }\n        var $nextEl;\n        var $prevEl;\n        if (swiper.navigation && swiper.navigation.$nextEl) {\n          $nextEl = swiper.navigation.$nextEl;\n        }\n        if (swiper.navigation && swiper.navigation.$prevEl) {\n          $prevEl = swiper.navigation.$prevEl;\n        }\n        if ($nextEl) {\n          $nextEl.off('keydown', swiper.a11y.onEnterKey);\n        }\n        if ($prevEl) {\n          $prevEl.off('keydown', swiper.a11y.onEnterKey);\n        }\n\n        // Pagination\n        if (swiper.pagination && swiper.params.pagination.clickable && swiper.pagination.bullets && swiper.pagination.bullets.length) {\n          swiper.pagination.$el.off('keydown', \".\" + swiper.params.pagination.bulletClass, swiper.a11y.onEnterKey);\n        }\n      }\n    };\n    var A11y = {\n      name: 'a11y',\n      params: {\n        a11y: {\n          enabled: true,\n          notificationClass: 'swiper-notification',\n          prevSlideMessage: 'Previous slide',\n          nextSlideMessage: 'Next slide',\n          firstSlideMessage: 'This is the first slide',\n          lastSlideMessage: 'This is the last slide',\n          paginationBulletMessage: 'Go to slide {{index}}'\n        }\n      },\n      create: function create() {\n        var swiper = this;\n        Utils.extend(swiper, {\n          a11y: {\n            liveRegion: $(\"<span class=\\\"\" + swiper.params.a11y.notificationClass + \"\\\" aria-live=\\\"assertive\\\" aria-atomic=\\\"true\\\"></span>\")\n          }\n        });\n        Object.keys(a11y).forEach(function (methodName) {\n          swiper.a11y[methodName] = a11y[methodName].bind(swiper);\n        });\n      },\n      on: {\n        init: function init() {\n          var swiper = this;\n          if (!swiper.params.a11y.enabled) {\n            return;\n          }\n          swiper.a11y.init();\n          swiper.a11y.updateNavigation();\n        },\n        toEdge: function toEdge() {\n          var swiper = this;\n          if (!swiper.params.a11y.enabled) {\n            return;\n          }\n          swiper.a11y.updateNavigation();\n        },\n        fromEdge: function fromEdge() {\n          var swiper = this;\n          if (!swiper.params.a11y.enabled) {\n            return;\n          }\n          swiper.a11y.updateNavigation();\n        },\n        paginationUpdate: function paginationUpdate() {\n          var swiper = this;\n          if (!swiper.params.a11y.enabled) {\n            return;\n          }\n          swiper.a11y.updatePagination();\n        },\n        destroy: function destroy() {\n          var swiper = this;\n          if (!swiper.params.a11y.enabled) {\n            return;\n          }\n          swiper.a11y.destroy();\n        }\n      }\n    };\n    var History = {\n      init: function init() {\n        var swiper = this;\n        if (!swiper.params.history) {\n          return;\n        }\n        if (!win.history || !win.history.pushState) {\n          swiper.params.history.enabled = false;\n          swiper.params.hashNavigation.enabled = true;\n          return;\n        }\n        var history = swiper.history;\n        history.initialized = true;\n        history.paths = History.getPathValues();\n        if (!history.paths.key && !history.paths.value) {\n          return;\n        }\n        history.scrollToSlide(0, history.paths.value, swiper.params.runCallbacksOnInit);\n        if (!swiper.params.history.replaceState) {\n          win.addEventListener('popstate', swiper.history.setHistoryPopState);\n        }\n      },\n      destroy: function destroy() {\n        var swiper = this;\n        if (!swiper.params.history.replaceState) {\n          win.removeEventListener('popstate', swiper.history.setHistoryPopState);\n        }\n      },\n      setHistoryPopState: function setHistoryPopState() {\n        var swiper = this;\n        swiper.history.paths = History.getPathValues();\n        swiper.history.scrollToSlide(swiper.params.speed, swiper.history.paths.value, false);\n      },\n      getPathValues: function getPathValues() {\n        var pathArray = win.location.pathname.slice(1).split('/').filter(function (part) {\n          return part !== '';\n        });\n        var total = pathArray.length;\n        var key = pathArray[total - 2];\n        var value = pathArray[total - 1];\n        return {\n          key: key,\n          value: value\n        };\n      },\n      setHistory: function setHistory(key, index) {\n        var swiper = this;\n        if (!swiper.history.initialized || !swiper.params.history.enabled) {\n          return;\n        }\n        var slide = swiper.slides.eq(index);\n        var value = History.slugify(slide.attr('data-history'));\n        if (!win.location.pathname.includes(key)) {\n          value = key + \"/\" + value;\n        }\n        var currentState = win.history.state;\n        if (currentState && currentState.value === value) {\n          return;\n        }\n        if (swiper.params.history.replaceState) {\n          win.history.replaceState({\n            value: value\n          }, null, value);\n        } else {\n          win.history.pushState({\n            value: value\n          }, null, value);\n        }\n      },\n      slugify: function slugify(text) {\n        return text.toString().replace(/\\s+/g, '-').replace(/[^\\w-]+/g, '').replace(/--+/g, '-').replace(/^-+/, '').replace(/-+$/, '');\n      },\n      scrollToSlide: function scrollToSlide(speed, value, runCallbacks) {\n        var swiper = this;\n        if (value) {\n          for (var i = 0, length = swiper.slides.length; i < length; i += 1) {\n            var slide = swiper.slides.eq(i);\n            var slideHistory = History.slugify(slide.attr('data-history'));\n            if (slideHistory === value && !slide.hasClass(swiper.params.slideDuplicateClass)) {\n              var index = slide.index();\n              swiper.slideTo(index, speed, runCallbacks);\n            }\n          }\n        } else {\n          swiper.slideTo(0, speed, runCallbacks);\n        }\n      }\n    };\n    var History$1 = {\n      name: 'history',\n      params: {\n        history: {\n          enabled: false,\n          replaceState: false,\n          key: 'slides'\n        }\n      },\n      create: function create() {\n        var swiper = this;\n        Utils.extend(swiper, {\n          history: {\n            init: History.init.bind(swiper),\n            setHistory: History.setHistory.bind(swiper),\n            setHistoryPopState: History.setHistoryPopState.bind(swiper),\n            scrollToSlide: History.scrollToSlide.bind(swiper),\n            destroy: History.destroy.bind(swiper)\n          }\n        });\n      },\n      on: {\n        init: function init() {\n          var swiper = this;\n          if (swiper.params.history.enabled) {\n            swiper.history.init();\n          }\n        },\n        destroy: function destroy() {\n          var swiper = this;\n          if (swiper.params.history.enabled) {\n            swiper.history.destroy();\n          }\n        },\n        transitionEnd: function transitionEnd() {\n          var swiper = this;\n          if (swiper.history.initialized) {\n            swiper.history.setHistory(swiper.params.history.key, swiper.activeIndex);\n          }\n        },\n        slideChange: function slideChange() {\n          var swiper = this;\n          if (swiper.history.initialized && swiper.params.cssMode) {\n            swiper.history.setHistory(swiper.params.history.key, swiper.activeIndex);\n          }\n        }\n      }\n    };\n    var HashNavigation = {\n      onHashCange: function onHashCange() {\n        var swiper = this;\n        var newHash = doc.location.hash.replace('#', '');\n        var activeSlideHash = swiper.slides.eq(swiper.activeIndex).attr('data-hash');\n        if (newHash !== activeSlideHash) {\n          var newIndex = swiper.$wrapperEl.children(\".\" + swiper.params.slideClass + \"[data-hash=\\\"\" + newHash + \"\\\"]\").index();\n          if (typeof newIndex === 'undefined') {\n            return;\n          }\n          swiper.slideTo(newIndex);\n        }\n      },\n      setHash: function setHash() {\n        var swiper = this;\n        if (!swiper.hashNavigation.initialized || !swiper.params.hashNavigation.enabled) {\n          return;\n        }\n        if (swiper.params.hashNavigation.replaceState && win.history && win.history.replaceState) {\n          win.history.replaceState(null, null, \"#\" + swiper.slides.eq(swiper.activeIndex).attr('data-hash') || false);\n        } else {\n          var slide = swiper.slides.eq(swiper.activeIndex);\n          var hash = slide.attr('data-hash') || slide.attr('data-history');\n          doc.location.hash = hash || '';\n        }\n      },\n      init: function init() {\n        var swiper = this;\n        if (!swiper.params.hashNavigation.enabled || swiper.params.history && swiper.params.history.enabled) {\n          return;\n        }\n        swiper.hashNavigation.initialized = true;\n        var hash = doc.location.hash.replace('#', '');\n        if (hash) {\n          var speed = 0;\n          for (var i = 0, length = swiper.slides.length; i < length; i += 1) {\n            var slide = swiper.slides.eq(i);\n            var slideHash = slide.attr('data-hash') || slide.attr('data-history');\n            if (slideHash === hash && !slide.hasClass(swiper.params.slideDuplicateClass)) {\n              var index = slide.index();\n              swiper.slideTo(index, speed, swiper.params.runCallbacksOnInit, true);\n            }\n          }\n        }\n        if (swiper.params.hashNavigation.watchState) {\n          $(win).on('hashchange', swiper.hashNavigation.onHashCange);\n        }\n      },\n      destroy: function destroy() {\n        var swiper = this;\n        if (swiper.params.hashNavigation.watchState) {\n          $(win).off('hashchange', swiper.hashNavigation.onHashCange);\n        }\n      }\n    };\n    var HashNavigation$1 = {\n      name: 'hash-navigation',\n      params: {\n        hashNavigation: {\n          enabled: false,\n          replaceState: false,\n          watchState: false\n        }\n      },\n      create: function create() {\n        var swiper = this;\n        Utils.extend(swiper, {\n          hashNavigation: {\n            initialized: false,\n            init: HashNavigation.init.bind(swiper),\n            destroy: HashNavigation.destroy.bind(swiper),\n            setHash: HashNavigation.setHash.bind(swiper),\n            onHashCange: HashNavigation.onHashCange.bind(swiper)\n          }\n        });\n      },\n      on: {\n        init: function init() {\n          var swiper = this;\n          if (swiper.params.hashNavigation.enabled) {\n            swiper.hashNavigation.init();\n          }\n        },\n        destroy: function destroy() {\n          var swiper = this;\n          if (swiper.params.hashNavigation.enabled) {\n            swiper.hashNavigation.destroy();\n          }\n        },\n        transitionEnd: function transitionEnd() {\n          var swiper = this;\n          if (swiper.hashNavigation.initialized) {\n            swiper.hashNavigation.setHash();\n          }\n        },\n        slideChange: function slideChange() {\n          var swiper = this;\n          if (swiper.hashNavigation.initialized && swiper.params.cssMode) {\n            swiper.hashNavigation.setHash();\n          }\n        }\n      }\n    };\n\n    /* eslint no-underscore-dangle: \"off\" */\n\n    var Autoplay = {\n      run: function run() {\n        var swiper = this;\n        var $activeSlideEl = swiper.slides.eq(swiper.activeIndex);\n        var delay = swiper.params.autoplay.delay;\n        if ($activeSlideEl.attr('data-swiper-autoplay')) {\n          delay = $activeSlideEl.attr('data-swiper-autoplay') || swiper.params.autoplay.delay;\n        }\n        clearTimeout(swiper.autoplay.timeout);\n        swiper.autoplay.timeout = Utils.nextTick(function () {\n          if (swiper.params.autoplay.reverseDirection) {\n            if (swiper.params.loop) {\n              swiper.loopFix();\n              swiper.slidePrev(swiper.params.speed, true, true);\n              swiper.emit('autoplay');\n            } else if (!swiper.isBeginning) {\n              swiper.slidePrev(swiper.params.speed, true, true);\n              swiper.emit('autoplay');\n            } else if (!swiper.params.autoplay.stopOnLastSlide) {\n              swiper.slideTo(swiper.slides.length - 1, swiper.params.speed, true, true);\n              swiper.emit('autoplay');\n            } else {\n              swiper.autoplay.stop();\n            }\n          } else if (swiper.params.loop) {\n            swiper.loopFix();\n            swiper.slideNext(swiper.params.speed, true, true);\n            swiper.emit('autoplay');\n          } else if (!swiper.isEnd) {\n            swiper.slideNext(swiper.params.speed, true, true);\n            swiper.emit('autoplay');\n          } else if (!swiper.params.autoplay.stopOnLastSlide) {\n            swiper.slideTo(0, swiper.params.speed, true, true);\n            swiper.emit('autoplay');\n          } else {\n            swiper.autoplay.stop();\n          }\n          if (swiper.params.cssMode && swiper.autoplay.running) {\n            swiper.autoplay.run();\n          }\n        }, delay);\n      },\n      start: function start() {\n        var swiper = this;\n        if (typeof swiper.autoplay.timeout !== 'undefined') {\n          return false;\n        }\n        if (swiper.autoplay.running) {\n          return false;\n        }\n        swiper.autoplay.running = true;\n        swiper.emit('autoplayStart');\n        swiper.autoplay.run();\n        return true;\n      },\n      stop: function stop() {\n        var swiper = this;\n        if (!swiper.autoplay.running) {\n          return false;\n        }\n        if (typeof swiper.autoplay.timeout === 'undefined') {\n          return false;\n        }\n        if (swiper.autoplay.timeout) {\n          clearTimeout(swiper.autoplay.timeout);\n          swiper.autoplay.timeout = undefined;\n        }\n        swiper.autoplay.running = false;\n        swiper.emit('autoplayStop');\n        return true;\n      },\n      pause: function pause(speed) {\n        var swiper = this;\n        if (!swiper.autoplay.running) {\n          return;\n        }\n        if (swiper.autoplay.paused) {\n          return;\n        }\n        if (swiper.autoplay.timeout) {\n          clearTimeout(swiper.autoplay.timeout);\n        }\n        swiper.autoplay.paused = true;\n        if (speed === 0 || !swiper.params.autoplay.waitForTransition) {\n          swiper.autoplay.paused = false;\n          swiper.autoplay.run();\n        } else {\n          swiper.$wrapperEl[0].addEventListener('transitionend', swiper.autoplay.onTransitionEnd);\n          swiper.$wrapperEl[0].addEventListener('webkitTransitionEnd', swiper.autoplay.onTransitionEnd);\n        }\n      }\n    };\n    var Autoplay$1 = {\n      name: 'autoplay',\n      params: {\n        autoplay: {\n          enabled: false,\n          delay: 3000,\n          waitForTransition: true,\n          disableOnInteraction: true,\n          stopOnLastSlide: false,\n          reverseDirection: false\n        }\n      },\n      create: function create() {\n        var swiper = this;\n        Utils.extend(swiper, {\n          autoplay: {\n            running: false,\n            paused: false,\n            run: Autoplay.run.bind(swiper),\n            start: Autoplay.start.bind(swiper),\n            stop: Autoplay.stop.bind(swiper),\n            pause: Autoplay.pause.bind(swiper),\n            onVisibilityChange: function onVisibilityChange() {\n              if (document.visibilityState === 'hidden' && swiper.autoplay.running) {\n                swiper.autoplay.pause();\n              }\n              if (document.visibilityState === 'visible' && swiper.autoplay.paused) {\n                swiper.autoplay.run();\n                swiper.autoplay.paused = false;\n              }\n            },\n            onTransitionEnd: function onTransitionEnd(e) {\n              if (!swiper || swiper.destroyed || !swiper.$wrapperEl) {\n                return;\n              }\n              if (e.target !== this) {\n                return;\n              }\n              swiper.$wrapperEl[0].removeEventListener('transitionend', swiper.autoplay.onTransitionEnd);\n              swiper.$wrapperEl[0].removeEventListener('webkitTransitionEnd', swiper.autoplay.onTransitionEnd);\n              swiper.autoplay.paused = false;\n              if (!swiper.autoplay.running) {\n                swiper.autoplay.stop();\n              } else {\n                swiper.autoplay.run();\n              }\n            }\n          }\n        });\n      },\n      on: {\n        init: function init() {\n          var swiper = this;\n          if (swiper.params.autoplay.enabled) {\n            swiper.autoplay.start();\n            document.addEventListener('visibilitychange', swiper.autoplay.onVisibilityChange);\n          }\n        },\n        beforeTransitionStart: function beforeTransitionStart(speed, internal) {\n          var swiper = this;\n          if (swiper.autoplay.running) {\n            if (internal || !swiper.params.autoplay.disableOnInteraction) {\n              swiper.autoplay.pause(speed);\n            } else {\n              swiper.autoplay.stop();\n            }\n          }\n        },\n        sliderFirstMove: function sliderFirstMove() {\n          var swiper = this;\n          if (swiper.autoplay.running) {\n            if (swiper.params.autoplay.disableOnInteraction) {\n              swiper.autoplay.stop();\n            } else {\n              swiper.autoplay.pause();\n            }\n          }\n        },\n        touchEnd: function touchEnd() {\n          var swiper = this;\n          if (swiper.params.cssMode && swiper.autoplay.paused && !swiper.params.autoplay.disableOnInteraction) {\n            swiper.autoplay.run();\n          }\n        },\n        destroy: function destroy() {\n          var swiper = this;\n          if (swiper.autoplay.running) {\n            swiper.autoplay.stop();\n          }\n          document.removeEventListener('visibilitychange', swiper.autoplay.onVisibilityChange);\n        }\n      }\n    };\n    var Fade = {\n      setTranslate: function setTranslate() {\n        var swiper = this;\n        var slides = swiper.slides;\n        for (var i = 0; i < slides.length; i += 1) {\n          var $slideEl = swiper.slides.eq(i);\n          var offset = $slideEl[0].swiperSlideOffset;\n          var tx = -offset;\n          if (!swiper.params.virtualTranslate) {\n            tx -= swiper.translate;\n          }\n          var ty = 0;\n          if (!swiper.isHorizontal()) {\n            ty = tx;\n            tx = 0;\n          }\n          var slideOpacity = swiper.params.fadeEffect.crossFade ? Math.max(1 - Math.abs($slideEl[0].progress), 0) : 1 + Math.min(Math.max($slideEl[0].progress, -1), 0);\n          $slideEl.css({\n            opacity: slideOpacity\n          }).transform(\"translate3d(\" + tx + \"px, \" + ty + \"px, 0px)\");\n        }\n      },\n      setTransition: function setTransition(duration) {\n        var swiper = this;\n        var slides = swiper.slides;\n        var $wrapperEl = swiper.$wrapperEl;\n        slides.transition(duration);\n        if (swiper.params.virtualTranslate && duration !== 0) {\n          var eventTriggered = false;\n          slides.transitionEnd(function () {\n            if (eventTriggered) {\n              return;\n            }\n            if (!swiper || swiper.destroyed) {\n              return;\n            }\n            eventTriggered = true;\n            swiper.animating = false;\n            var triggerEvents = ['webkitTransitionEnd', 'transitionend'];\n            for (var i = 0; i < triggerEvents.length; i += 1) {\n              $wrapperEl.trigger(triggerEvents[i]);\n            }\n          });\n        }\n      }\n    };\n    var EffectFade = {\n      name: 'effect-fade',\n      params: {\n        fadeEffect: {\n          crossFade: false\n        }\n      },\n      create: function create() {\n        var swiper = this;\n        Utils.extend(swiper, {\n          fadeEffect: {\n            setTranslate: Fade.setTranslate.bind(swiper),\n            setTransition: Fade.setTransition.bind(swiper)\n          }\n        });\n      },\n      on: {\n        beforeInit: function beforeInit() {\n          var swiper = this;\n          if (swiper.params.effect !== 'fade') {\n            return;\n          }\n          swiper.classNames.push(swiper.params.containerModifierClass + \"fade\");\n          var overwriteParams = {\n            slidesPerView: 1,\n            slidesPerColumn: 1,\n            slidesPerGroup: 1,\n            watchSlidesProgress: true,\n            spaceBetween: 0,\n            virtualTranslate: true\n          };\n          Utils.extend(swiper.params, overwriteParams);\n          Utils.extend(swiper.originalParams, overwriteParams);\n        },\n        setTranslate: function setTranslate() {\n          var swiper = this;\n          if (swiper.params.effect !== 'fade') {\n            return;\n          }\n          swiper.fadeEffect.setTranslate();\n        },\n        setTransition: function setTransition(duration) {\n          var swiper = this;\n          if (swiper.params.effect !== 'fade') {\n            return;\n          }\n          swiper.fadeEffect.setTransition(duration);\n        }\n      }\n    };\n    var Cube = {\n      setTranslate: function setTranslate() {\n        var swiper = this;\n        var $el = swiper.$el;\n        var $wrapperEl = swiper.$wrapperEl;\n        var slides = swiper.slides;\n        var swiperWidth = swiper.width;\n        var swiperHeight = swiper.height;\n        var rtl = swiper.rtlTranslate;\n        var swiperSize = swiper.size;\n        var params = swiper.params.cubeEffect;\n        var isHorizontal = swiper.isHorizontal();\n        var isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n        var wrapperRotate = 0;\n        var $cubeShadowEl;\n        if (params.shadow) {\n          if (isHorizontal) {\n            $cubeShadowEl = $wrapperEl.find('.swiper-cube-shadow');\n            if ($cubeShadowEl.length === 0) {\n              $cubeShadowEl = $('<div class=\"swiper-cube-shadow\"></div>');\n              $wrapperEl.append($cubeShadowEl);\n            }\n            $cubeShadowEl.css({\n              height: swiperWidth + \"px\"\n            });\n          } else {\n            $cubeShadowEl = $el.find('.swiper-cube-shadow');\n            if ($cubeShadowEl.length === 0) {\n              $cubeShadowEl = $('<div class=\"swiper-cube-shadow\"></div>');\n              $el.append($cubeShadowEl);\n            }\n          }\n        }\n        for (var i = 0; i < slides.length; i += 1) {\n          var $slideEl = slides.eq(i);\n          var slideIndex = i;\n          if (isVirtual) {\n            slideIndex = parseInt($slideEl.attr('data-swiper-slide-index'), 10);\n          }\n          var slideAngle = slideIndex * 90;\n          var round = Math.floor(slideAngle / 360);\n          if (rtl) {\n            slideAngle = -slideAngle;\n            round = Math.floor(-slideAngle / 360);\n          }\n          var progress = Math.max(Math.min($slideEl[0].progress, 1), -1);\n          var tx = 0;\n          var ty = 0;\n          var tz = 0;\n          if (slideIndex % 4 === 0) {\n            tx = -round * 4 * swiperSize;\n            tz = 0;\n          } else if ((slideIndex - 1) % 4 === 0) {\n            tx = 0;\n            tz = -round * 4 * swiperSize;\n          } else if ((slideIndex - 2) % 4 === 0) {\n            tx = swiperSize + round * 4 * swiperSize;\n            tz = swiperSize;\n          } else if ((slideIndex - 3) % 4 === 0) {\n            tx = -swiperSize;\n            tz = 3 * swiperSize + swiperSize * 4 * round;\n          }\n          if (rtl) {\n            tx = -tx;\n          }\n          if (!isHorizontal) {\n            ty = tx;\n            tx = 0;\n          }\n          var transform = \"rotateX(\" + (isHorizontal ? 0 : -slideAngle) + \"deg) rotateY(\" + (isHorizontal ? slideAngle : 0) + \"deg) translate3d(\" + tx + \"px, \" + ty + \"px, \" + tz + \"px)\";\n          if (progress <= 1 && progress > -1) {\n            wrapperRotate = slideIndex * 90 + progress * 90;\n            if (rtl) {\n              wrapperRotate = -slideIndex * 90 - progress * 90;\n            }\n          }\n          $slideEl.transform(transform);\n          if (params.slideShadows) {\n            // Set shadows\n            var shadowBefore = isHorizontal ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');\n            var shadowAfter = isHorizontal ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');\n            if (shadowBefore.length === 0) {\n              shadowBefore = $(\"<div class=\\\"swiper-slide-shadow-\" + (isHorizontal ? 'left' : 'top') + \"\\\"></div>\");\n              $slideEl.append(shadowBefore);\n            }\n            if (shadowAfter.length === 0) {\n              shadowAfter = $(\"<div class=\\\"swiper-slide-shadow-\" + (isHorizontal ? 'right' : 'bottom') + \"\\\"></div>\");\n              $slideEl.append(shadowAfter);\n            }\n            if (shadowBefore.length) {\n              shadowBefore[0].style.opacity = Math.max(-progress, 0);\n            }\n            if (shadowAfter.length) {\n              shadowAfter[0].style.opacity = Math.max(progress, 0);\n            }\n          }\n        }\n        $wrapperEl.css({\n          '-webkit-transform-origin': \"50% 50% -\" + swiperSize / 2 + \"px\",\n          '-moz-transform-origin': \"50% 50% -\" + swiperSize / 2 + \"px\",\n          '-ms-transform-origin': \"50% 50% -\" + swiperSize / 2 + \"px\",\n          'transform-origin': \"50% 50% -\" + swiperSize / 2 + \"px\"\n        });\n        if (params.shadow) {\n          if (isHorizontal) {\n            $cubeShadowEl.transform(\"translate3d(0px, \" + (swiperWidth / 2 + params.shadowOffset) + \"px, \" + -swiperWidth / 2 + \"px) rotateX(90deg) rotateZ(0deg) scale(\" + params.shadowScale + \")\");\n          } else {\n            var shadowAngle = Math.abs(wrapperRotate) - Math.floor(Math.abs(wrapperRotate) / 90) * 90;\n            var multiplier = 1.5 - (Math.sin(shadowAngle * 2 * Math.PI / 360) / 2 + Math.cos(shadowAngle * 2 * Math.PI / 360) / 2);\n            var scale1 = params.shadowScale;\n            var scale2 = params.shadowScale / multiplier;\n            var offset = params.shadowOffset;\n            $cubeShadowEl.transform(\"scale3d(\" + scale1 + \", 1, \" + scale2 + \") translate3d(0px, \" + (swiperHeight / 2 + offset) + \"px, \" + -swiperHeight / 2 / scale2 + \"px) rotateX(-90deg)\");\n          }\n        }\n        var zFactor = Browser.isSafari || Browser.isUiWebView ? -swiperSize / 2 : 0;\n        $wrapperEl.transform(\"translate3d(0px,0,\" + zFactor + \"px) rotateX(\" + (swiper.isHorizontal() ? 0 : wrapperRotate) + \"deg) rotateY(\" + (swiper.isHorizontal() ? -wrapperRotate : 0) + \"deg)\");\n      },\n      setTransition: function setTransition(duration) {\n        var swiper = this;\n        var $el = swiper.$el;\n        var slides = swiper.slides;\n        slides.transition(duration).find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').transition(duration);\n        if (swiper.params.cubeEffect.shadow && !swiper.isHorizontal()) {\n          $el.find('.swiper-cube-shadow').transition(duration);\n        }\n      }\n    };\n    var EffectCube = {\n      name: 'effect-cube',\n      params: {\n        cubeEffect: {\n          slideShadows: true,\n          shadow: true,\n          shadowOffset: 20,\n          shadowScale: 0.94\n        }\n      },\n      create: function create() {\n        var swiper = this;\n        Utils.extend(swiper, {\n          cubeEffect: {\n            setTranslate: Cube.setTranslate.bind(swiper),\n            setTransition: Cube.setTransition.bind(swiper)\n          }\n        });\n      },\n      on: {\n        beforeInit: function beforeInit() {\n          var swiper = this;\n          if (swiper.params.effect !== 'cube') {\n            return;\n          }\n          swiper.classNames.push(swiper.params.containerModifierClass + \"cube\");\n          swiper.classNames.push(swiper.params.containerModifierClass + \"3d\");\n          var overwriteParams = {\n            slidesPerView: 1,\n            slidesPerColumn: 1,\n            slidesPerGroup: 1,\n            watchSlidesProgress: true,\n            resistanceRatio: 0,\n            spaceBetween: 0,\n            centeredSlides: false,\n            virtualTranslate: true\n          };\n          Utils.extend(swiper.params, overwriteParams);\n          Utils.extend(swiper.originalParams, overwriteParams);\n        },\n        setTranslate: function setTranslate() {\n          var swiper = this;\n          if (swiper.params.effect !== 'cube') {\n            return;\n          }\n          swiper.cubeEffect.setTranslate();\n        },\n        setTransition: function setTransition(duration) {\n          var swiper = this;\n          if (swiper.params.effect !== 'cube') {\n            return;\n          }\n          swiper.cubeEffect.setTransition(duration);\n        }\n      }\n    };\n    var Flip = {\n      setTranslate: function setTranslate() {\n        var swiper = this;\n        var slides = swiper.slides;\n        var rtl = swiper.rtlTranslate;\n        for (var i = 0; i < slides.length; i += 1) {\n          var $slideEl = slides.eq(i);\n          var progress = $slideEl[0].progress;\n          if (swiper.params.flipEffect.limitRotation) {\n            progress = Math.max(Math.min($slideEl[0].progress, 1), -1);\n          }\n          var offset = $slideEl[0].swiperSlideOffset;\n          var rotate = -180 * progress;\n          var rotateY = rotate;\n          var rotateX = 0;\n          var tx = -offset;\n          var ty = 0;\n          if (!swiper.isHorizontal()) {\n            ty = tx;\n            tx = 0;\n            rotateX = -rotateY;\n            rotateY = 0;\n          } else if (rtl) {\n            rotateY = -rotateY;\n          }\n          $slideEl[0].style.zIndex = -Math.abs(Math.round(progress)) + slides.length;\n          if (swiper.params.flipEffect.slideShadows) {\n            // Set shadows\n            var shadowBefore = swiper.isHorizontal() ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');\n            var shadowAfter = swiper.isHorizontal() ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');\n            if (shadowBefore.length === 0) {\n              shadowBefore = $(\"<div class=\\\"swiper-slide-shadow-\" + (swiper.isHorizontal() ? 'left' : 'top') + \"\\\"></div>\");\n              $slideEl.append(shadowBefore);\n            }\n            if (shadowAfter.length === 0) {\n              shadowAfter = $(\"<div class=\\\"swiper-slide-shadow-\" + (swiper.isHorizontal() ? 'right' : 'bottom') + \"\\\"></div>\");\n              $slideEl.append(shadowAfter);\n            }\n            if (shadowBefore.length) {\n              shadowBefore[0].style.opacity = Math.max(-progress, 0);\n            }\n            if (shadowAfter.length) {\n              shadowAfter[0].style.opacity = Math.max(progress, 0);\n            }\n          }\n          $slideEl.transform(\"translate3d(\" + tx + \"px, \" + ty + \"px, 0px) rotateX(\" + rotateX + \"deg) rotateY(\" + rotateY + \"deg)\");\n        }\n      },\n      setTransition: function setTransition(duration) {\n        var swiper = this;\n        var slides = swiper.slides;\n        var activeIndex = swiper.activeIndex;\n        var $wrapperEl = swiper.$wrapperEl;\n        slides.transition(duration).find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').transition(duration);\n        if (swiper.params.virtualTranslate && duration !== 0) {\n          var eventTriggered = false;\n          // eslint-disable-next-line\n          slides.eq(activeIndex).transitionEnd(function onTransitionEnd() {\n            if (eventTriggered) {\n              return;\n            }\n            if (!swiper || swiper.destroyed) {\n              return;\n            }\n            // if (!$(this).hasClass(swiper.params.slideActiveClass)) return;\n            eventTriggered = true;\n            swiper.animating = false;\n            var triggerEvents = ['webkitTransitionEnd', 'transitionend'];\n            for (var i = 0; i < triggerEvents.length; i += 1) {\n              $wrapperEl.trigger(triggerEvents[i]);\n            }\n          });\n        }\n      }\n    };\n    var EffectFlip = {\n      name: 'effect-flip',\n      params: {\n        flipEffect: {\n          slideShadows: true,\n          limitRotation: true\n        }\n      },\n      create: function create() {\n        var swiper = this;\n        Utils.extend(swiper, {\n          flipEffect: {\n            setTranslate: Flip.setTranslate.bind(swiper),\n            setTransition: Flip.setTransition.bind(swiper)\n          }\n        });\n      },\n      on: {\n        beforeInit: function beforeInit() {\n          var swiper = this;\n          if (swiper.params.effect !== 'flip') {\n            return;\n          }\n          swiper.classNames.push(swiper.params.containerModifierClass + \"flip\");\n          swiper.classNames.push(swiper.params.containerModifierClass + \"3d\");\n          var overwriteParams = {\n            slidesPerView: 1,\n            slidesPerColumn: 1,\n            slidesPerGroup: 1,\n            watchSlidesProgress: true,\n            spaceBetween: 0,\n            virtualTranslate: true\n          };\n          Utils.extend(swiper.params, overwriteParams);\n          Utils.extend(swiper.originalParams, overwriteParams);\n        },\n        setTranslate: function setTranslate() {\n          var swiper = this;\n          if (swiper.params.effect !== 'flip') {\n            return;\n          }\n          swiper.flipEffect.setTranslate();\n        },\n        setTransition: function setTransition(duration) {\n          var swiper = this;\n          if (swiper.params.effect !== 'flip') {\n            return;\n          }\n          swiper.flipEffect.setTransition(duration);\n        }\n      }\n    };\n    var Coverflow = {\n      setTranslate: function setTranslate() {\n        var swiper = this;\n        var swiperWidth = swiper.width;\n        var swiperHeight = swiper.height;\n        var slides = swiper.slides;\n        var $wrapperEl = swiper.$wrapperEl;\n        var slidesSizesGrid = swiper.slidesSizesGrid;\n        var params = swiper.params.coverflowEffect;\n        var isHorizontal = swiper.isHorizontal();\n        var transform = swiper.translate;\n        var center = isHorizontal ? -transform + swiperWidth / 2 : -transform + swiperHeight / 2;\n        var rotate = isHorizontal ? params.rotate : -params.rotate;\n        var translate = params.depth;\n        // Each slide offset from center\n        for (var i = 0, length = slides.length; i < length; i += 1) {\n          var $slideEl = slides.eq(i);\n          var slideSize = slidesSizesGrid[i];\n          var slideOffset = $slideEl[0].swiperSlideOffset;\n          var offsetMultiplier = (center - slideOffset - slideSize / 2) / slideSize * params.modifier;\n          var rotateY = isHorizontal ? rotate * offsetMultiplier : 0;\n          var rotateX = isHorizontal ? 0 : rotate * offsetMultiplier;\n          // var rotateZ = 0\n          var translateZ = -translate * Math.abs(offsetMultiplier);\n          var stretch = params.stretch;\n          // Allow percentage to make a relative stretch for responsive sliders\n          if (typeof stretch === 'string' && stretch.indexOf('%') !== -1) {\n            stretch = parseFloat(params.stretch) / 100 * slideSize;\n          }\n          var translateY = isHorizontal ? 0 : stretch * offsetMultiplier;\n          var translateX = isHorizontal ? stretch * offsetMultiplier : 0;\n\n          // Fix for ultra small values\n          if (Math.abs(translateX) < 0.001) {\n            translateX = 0;\n          }\n          if (Math.abs(translateY) < 0.001) {\n            translateY = 0;\n          }\n          if (Math.abs(translateZ) < 0.001) {\n            translateZ = 0;\n          }\n          if (Math.abs(rotateY) < 0.001) {\n            rotateY = 0;\n          }\n          if (Math.abs(rotateX) < 0.001) {\n            rotateX = 0;\n          }\n          var slideTransform = \"translate3d(\" + translateX + \"px,\" + translateY + \"px,\" + translateZ + \"px)  rotateX(\" + rotateX + \"deg) rotateY(\" + rotateY + \"deg)\";\n          $slideEl.transform(slideTransform);\n          $slideEl[0].style.zIndex = -Math.abs(Math.round(offsetMultiplier)) + 1;\n          if (params.slideShadows) {\n            // Set shadows\n            var $shadowBeforeEl = isHorizontal ? $slideEl.find('.swiper-slide-shadow-left') : $slideEl.find('.swiper-slide-shadow-top');\n            var $shadowAfterEl = isHorizontal ? $slideEl.find('.swiper-slide-shadow-right') : $slideEl.find('.swiper-slide-shadow-bottom');\n            if ($shadowBeforeEl.length === 0) {\n              $shadowBeforeEl = $(\"<div class=\\\"swiper-slide-shadow-\" + (isHorizontal ? 'left' : 'top') + \"\\\"></div>\");\n              $slideEl.append($shadowBeforeEl);\n            }\n            if ($shadowAfterEl.length === 0) {\n              $shadowAfterEl = $(\"<div class=\\\"swiper-slide-shadow-\" + (isHorizontal ? 'right' : 'bottom') + \"\\\"></div>\");\n              $slideEl.append($shadowAfterEl);\n            }\n            if ($shadowBeforeEl.length) {\n              $shadowBeforeEl[0].style.opacity = offsetMultiplier > 0 ? offsetMultiplier : 0;\n            }\n            if ($shadowAfterEl.length) {\n              $shadowAfterEl[0].style.opacity = -offsetMultiplier > 0 ? -offsetMultiplier : 0;\n            }\n          }\n        }\n\n        // Set correct perspective for IE10\n        if (Support.pointerEvents || Support.prefixedPointerEvents) {\n          var ws = $wrapperEl[0].style;\n          ws.perspectiveOrigin = center + \"px 50%\";\n        }\n      },\n      setTransition: function setTransition(duration) {\n        var swiper = this;\n        swiper.slides.transition(duration).find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').transition(duration);\n      }\n    };\n    var EffectCoverflow = {\n      name: 'effect-coverflow',\n      params: {\n        coverflowEffect: {\n          rotate: 50,\n          stretch: 0,\n          depth: 100,\n          modifier: 1,\n          slideShadows: true\n        }\n      },\n      create: function create() {\n        var swiper = this;\n        Utils.extend(swiper, {\n          coverflowEffect: {\n            setTranslate: Coverflow.setTranslate.bind(swiper),\n            setTransition: Coverflow.setTransition.bind(swiper)\n          }\n        });\n      },\n      on: {\n        beforeInit: function beforeInit() {\n          var swiper = this;\n          if (swiper.params.effect !== 'coverflow') {\n            return;\n          }\n          swiper.classNames.push(swiper.params.containerModifierClass + \"coverflow\");\n          swiper.classNames.push(swiper.params.containerModifierClass + \"3d\");\n          swiper.params.watchSlidesProgress = true;\n          swiper.originalParams.watchSlidesProgress = true;\n        },\n        setTranslate: function setTranslate() {\n          var swiper = this;\n          if (swiper.params.effect !== 'coverflow') {\n            return;\n          }\n          swiper.coverflowEffect.setTranslate();\n        },\n        setTransition: function setTransition(duration) {\n          var swiper = this;\n          if (swiper.params.effect !== 'coverflow') {\n            return;\n          }\n          swiper.coverflowEffect.setTransition(duration);\n        }\n      }\n    };\n    var Thumbs = {\n      init: function init() {\n        var swiper = this;\n        var ref = swiper.params;\n        var thumbsParams = ref.thumbs;\n        var SwiperClass = swiper.constructor;\n        if (thumbsParams.swiper instanceof SwiperClass) {\n          swiper.thumbs.swiper = thumbsParams.swiper;\n          Utils.extend(swiper.thumbs.swiper.originalParams, {\n            watchSlidesProgress: true,\n            slideToClickedSlide: false\n          });\n          Utils.extend(swiper.thumbs.swiper.params, {\n            watchSlidesProgress: true,\n            slideToClickedSlide: false\n          });\n        } else if (Utils.isObject(thumbsParams.swiper)) {\n          swiper.thumbs.swiper = new SwiperClass(Utils.extend({}, thumbsParams.swiper, {\n            watchSlidesVisibility: true,\n            watchSlidesProgress: true,\n            slideToClickedSlide: false\n          }));\n          swiper.thumbs.swiperCreated = true;\n        }\n        swiper.thumbs.swiper.$el.addClass(swiper.params.thumbs.thumbsContainerClass);\n        swiper.thumbs.swiper.on('tap', swiper.thumbs.onThumbClick);\n      },\n      onThumbClick: function onThumbClick() {\n        var swiper = this;\n        var thumbsSwiper = swiper.thumbs.swiper;\n        if (!thumbsSwiper) {\n          return;\n        }\n        var clickedIndex = thumbsSwiper.clickedIndex;\n        var clickedSlide = thumbsSwiper.clickedSlide;\n        if (clickedSlide && $(clickedSlide).hasClass(swiper.params.thumbs.slideThumbActiveClass)) {\n          return;\n        }\n        if (typeof clickedIndex === 'undefined' || clickedIndex === null) {\n          return;\n        }\n        var slideToIndex;\n        if (thumbsSwiper.params.loop) {\n          slideToIndex = parseInt($(thumbsSwiper.clickedSlide).attr('data-swiper-slide-index'), 10);\n        } else {\n          slideToIndex = clickedIndex;\n        }\n        if (swiper.params.loop) {\n          var currentIndex = swiper.activeIndex;\n          if (swiper.slides.eq(currentIndex).hasClass(swiper.params.slideDuplicateClass)) {\n            swiper.loopFix();\n            // eslint-disable-next-line\n            swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;\n            currentIndex = swiper.activeIndex;\n          }\n          var prevIndex = swiper.slides.eq(currentIndex).prevAll(\"[data-swiper-slide-index=\\\"\" + slideToIndex + \"\\\"]\").eq(0).index();\n          var nextIndex = swiper.slides.eq(currentIndex).nextAll(\"[data-swiper-slide-index=\\\"\" + slideToIndex + \"\\\"]\").eq(0).index();\n          if (typeof prevIndex === 'undefined') {\n            slideToIndex = nextIndex;\n          } else if (typeof nextIndex === 'undefined') {\n            slideToIndex = prevIndex;\n          } else if (nextIndex - currentIndex < currentIndex - prevIndex) {\n            slideToIndex = nextIndex;\n          } else {\n            slideToIndex = prevIndex;\n          }\n        }\n        swiper.slideTo(slideToIndex);\n      },\n      update: function update(initial) {\n        var swiper = this;\n        var thumbsSwiper = swiper.thumbs.swiper;\n        if (!thumbsSwiper) {\n          return;\n        }\n        var slidesPerView = thumbsSwiper.params.slidesPerView === 'auto' ? thumbsSwiper.slidesPerViewDynamic() : thumbsSwiper.params.slidesPerView;\n        if (swiper.realIndex !== thumbsSwiper.realIndex) {\n          var currentThumbsIndex = thumbsSwiper.activeIndex;\n          var newThumbsIndex;\n          if (thumbsSwiper.params.loop) {\n            if (thumbsSwiper.slides.eq(currentThumbsIndex).hasClass(thumbsSwiper.params.slideDuplicateClass)) {\n              thumbsSwiper.loopFix();\n              // eslint-disable-next-line\n              thumbsSwiper._clientLeft = thumbsSwiper.$wrapperEl[0].clientLeft;\n              currentThumbsIndex = thumbsSwiper.activeIndex;\n            }\n            // Find actual thumbs index to slide to\n            var prevThumbsIndex = thumbsSwiper.slides.eq(currentThumbsIndex).prevAll(\"[data-swiper-slide-index=\\\"\" + swiper.realIndex + \"\\\"]\").eq(0).index();\n            var nextThumbsIndex = thumbsSwiper.slides.eq(currentThumbsIndex).nextAll(\"[data-swiper-slide-index=\\\"\" + swiper.realIndex + \"\\\"]\").eq(0).index();\n            if (typeof prevThumbsIndex === 'undefined') {\n              newThumbsIndex = nextThumbsIndex;\n            } else if (typeof nextThumbsIndex === 'undefined') {\n              newThumbsIndex = prevThumbsIndex;\n            } else if (nextThumbsIndex - currentThumbsIndex === currentThumbsIndex - prevThumbsIndex) {\n              newThumbsIndex = currentThumbsIndex;\n            } else if (nextThumbsIndex - currentThumbsIndex < currentThumbsIndex - prevThumbsIndex) {\n              newThumbsIndex = nextThumbsIndex;\n            } else {\n              newThumbsIndex = prevThumbsIndex;\n            }\n          } else {\n            newThumbsIndex = swiper.realIndex;\n          }\n          if (thumbsSwiper.visibleSlidesIndexes && thumbsSwiper.visibleSlidesIndexes.indexOf(newThumbsIndex) < 0) {\n            if (thumbsSwiper.params.centeredSlides) {\n              if (newThumbsIndex > currentThumbsIndex) {\n                newThumbsIndex = newThumbsIndex - Math.floor(slidesPerView / 2) + 1;\n              } else {\n                newThumbsIndex = newThumbsIndex + Math.floor(slidesPerView / 2) - 1;\n              }\n            } else if (newThumbsIndex > currentThumbsIndex) {\n              newThumbsIndex = newThumbsIndex - slidesPerView + 1;\n            }\n            thumbsSwiper.slideTo(newThumbsIndex, initial ? 0 : undefined);\n          }\n        }\n\n        // Activate thumbs\n        var thumbsToActivate = 1;\n        var thumbActiveClass = swiper.params.thumbs.slideThumbActiveClass;\n        if (swiper.params.slidesPerView > 1 && !swiper.params.centeredSlides) {\n          thumbsToActivate = swiper.params.slidesPerView;\n        }\n        if (!swiper.params.thumbs.multipleActiveThumbs) {\n          thumbsToActivate = 1;\n        }\n        thumbsToActivate = Math.floor(thumbsToActivate);\n        thumbsSwiper.slides.removeClass(thumbActiveClass);\n        if (thumbsSwiper.params.loop || thumbsSwiper.params.virtual && thumbsSwiper.params.virtual.enabled) {\n          for (var i = 0; i < thumbsToActivate; i += 1) {\n            thumbsSwiper.$wrapperEl.children(\"[data-swiper-slide-index=\\\"\" + (swiper.realIndex + i) + \"\\\"]\").addClass(thumbActiveClass);\n          }\n        } else {\n          for (var i$1 = 0; i$1 < thumbsToActivate; i$1 += 1) {\n            thumbsSwiper.slides.eq(swiper.realIndex + i$1).addClass(thumbActiveClass);\n          }\n        }\n      }\n    };\n    var Thumbs$1 = {\n      name: 'thumbs',\n      params: {\n        thumbs: {\n          multipleActiveThumbs: true,\n          swiper: null,\n          slideThumbActiveClass: 'swiper-slide-thumb-active',\n          thumbsContainerClass: 'swiper-container-thumbs'\n        }\n      },\n      create: function create() {\n        var swiper = this;\n        Utils.extend(swiper, {\n          thumbs: {\n            swiper: null,\n            init: Thumbs.init.bind(swiper),\n            update: Thumbs.update.bind(swiper),\n            onThumbClick: Thumbs.onThumbClick.bind(swiper)\n          }\n        });\n      },\n      on: {\n        beforeInit: function beforeInit() {\n          var swiper = this;\n          var ref = swiper.params;\n          var thumbs = ref.thumbs;\n          if (!thumbs || !thumbs.swiper) {\n            return;\n          }\n          swiper.thumbs.init();\n          swiper.thumbs.update(true);\n        },\n        slideChange: function slideChange() {\n          var swiper = this;\n          if (!swiper.thumbs.swiper) {\n            return;\n          }\n          swiper.thumbs.update();\n        },\n        update: function update() {\n          var swiper = this;\n          if (!swiper.thumbs.swiper) {\n            return;\n          }\n          swiper.thumbs.update();\n        },\n        resize: function resize() {\n          var swiper = this;\n          if (!swiper.thumbs.swiper) {\n            return;\n          }\n          swiper.thumbs.update();\n        },\n        observerUpdate: function observerUpdate() {\n          var swiper = this;\n          if (!swiper.thumbs.swiper) {\n            return;\n          }\n          swiper.thumbs.update();\n        },\n        setTransition: function setTransition(duration) {\n          var swiper = this;\n          var thumbsSwiper = swiper.thumbs.swiper;\n          if (!thumbsSwiper) {\n            return;\n          }\n          thumbsSwiper.setTransition(duration);\n        },\n        beforeDestroy: function beforeDestroy() {\n          var swiper = this;\n          var thumbsSwiper = swiper.thumbs.swiper;\n          if (!thumbsSwiper) {\n            return;\n          }\n          if (swiper.thumbs.swiperCreated && thumbsSwiper) {\n            thumbsSwiper.destroy();\n          }\n        }\n      }\n    };\n\n    // Swiper Class\n\n    var components = [Device$1, Support$1, Browser$1, Resize, Observer$1, Virtual$1, Keyboard$1, Mousewheel$1, Navigation$1, Pagination$1, Scrollbar$1, Parallax$1, Zoom$1, Lazy$1, Controller$1, A11y, History$1, HashNavigation$1, Autoplay$1, EffectFade, EffectCube, EffectFlip, EffectCoverflow, Thumbs$1];\n    if (typeof Swiper.use === 'undefined') {\n      Swiper.use = Swiper.Class.use;\n      Swiper.installModule = Swiper.Class.installModule;\n    }\n    Swiper.use(components);\n    return Swiper;\n  });\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (swiper());\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/webpack/buildin/harmony-module.js */ \"../node_modules/webpack/buildin/harmony-module.js\")(module)))\n\n//# sourceURL=webpack:///./js/vendor/swiper.js?")}});